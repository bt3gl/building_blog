<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>chmod +x singularity.sh - Shellshock</title><link href="http://bt3gl.github.io/" rel="alternate"></link><link href="http://bt3gl.github.io/feeds/shellshock.atom.xml" rel="self"></link><id>http://bt3gl.github.io/</id><updated>2014-10-01T12:21:00-04:00</updated><entry><title>Understanding the Shellshock Vulnerability</title><link href="http://bt3gl.github.io/understanding-the-shellshock-vulnerability.html" rel="alternate"></link><published>2014-10-01T12:21:00-04:00</published><updated>2014-10-01T12:21:00-04:00</updated><author><name>Marina von Steinkirch</name></author><id>tag:bt3gl.github.io,2014-10-01:/understanding-the-shellshock-vulnerability.html</id><summary type="html">&lt;p&gt;&lt;img alt="" src="http://i.imgur.com/kjkWTWV.png"&gt;&lt;/p&gt;
&lt;p&gt;Almost a week ago, a new (&lt;a href="http://blog.erratasec.com/2014/09/shellshock-is-20-years-old-get-off-my.html"&gt;old&lt;/a&gt;) type of &lt;a href="http://cwe.mitre.org/data/definitions/78.html"&gt;OS command Injection&lt;/a&gt; was reported. The &lt;strong&gt;Shellshock&lt;/strong&gt; vulnerability, also know as &lt;strong&gt;&lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-6271"&gt;CVE-2014-6271&lt;/a&gt;&lt;/strong&gt;, allows attackers to inject their own code into &lt;a href="http://www.gnu.org/software/bash/"&gt;Bash&lt;/a&gt; using specially crafted &lt;strong&gt;environment variables&lt;/strong&gt;, and it was disclosed with the following description:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    Bash supports exporting not just shell variables …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="" src="http://i.imgur.com/kjkWTWV.png"&gt;&lt;/p&gt;
&lt;p&gt;Almost a week ago, a new (&lt;a href="http://blog.erratasec.com/2014/09/shellshock-is-20-years-old-get-off-my.html"&gt;old&lt;/a&gt;) type of &lt;a href="http://cwe.mitre.org/data/definitions/78.html"&gt;OS command Injection&lt;/a&gt; was reported. The &lt;strong&gt;Shellshock&lt;/strong&gt; vulnerability, also know as &lt;strong&gt;&lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-6271"&gt;CVE-2014-6271&lt;/a&gt;&lt;/strong&gt;, allows attackers to inject their own code into &lt;a href="http://www.gnu.org/software/bash/"&gt;Bash&lt;/a&gt; using specially crafted &lt;strong&gt;environment variables&lt;/strong&gt;, and it was disclosed with the following description:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    Bash supports exporting not just shell variables, but also shell functions to other bash instances, via the process environment to(indirect) child processes. Current bash versions use an environment variable named by the function name, and a function definition starting with “() {” in the variable value to propagate function  definitions through the environment. The vulnerability occurs because  bash does not stop after processing the function definition; it continues to parse and execute shell commands following the function definition.

    For example, an environment variable setting of
                    VAR=() { ignored; }; /bin/id
    will execute /bin/id when the environment is imported into the bash process. (The process is in a slightly undefined state at this point. The PATH variable may not have been set up yet, and bash could crash  after executing /bin/id, but the damage has already happened at this  point.)

    The fact that an environment variable with an arbitrary name can be used as a carrier for a malicious function definition containing trailing commands makes this vulnerability particularly severe; it enables network-based exploitation.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Even more scary, the &lt;a href="http://nvd.nist.gov/"&gt;NIST vulnerability database&lt;/a&gt; has rated &lt;a href="http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-6271"&gt;this vulnerability “10 out of 10” in terms of severity&lt;/a&gt;. At this point, there are claims that the &lt;a href="http://www.securityweek.com/shellshock-attacks-could-already-top-1-billion-report?utm_source=feedburner&amp;amp;utm_medium=feed&amp;amp;utm_campaign=Feed%3A+Securityweek+%28SecurityWeek+RSS+Feed%29"&gt;Shellshock attacks could already top 1 Billion&lt;/a&gt;. &lt;a href="http://www.alienvault.com/open-threat-exchange/blog/attackers-exploiting-shell-shock-cve-2014-6721-in-the-wild"&gt;Shellshock-targeting DDoS attacks and IRC bots were spotted less than 24 hours after news about Shellshock went public last week!&lt;/a&gt;. Matthew Prince, from &lt;a href="https://www.cloudflare.com/"&gt;Cloudflare&lt;/a&gt;, said yesterday that they are "&lt;a href="https://twitter.com/eastdakota/status/516457250332741632"&gt;seeing north of 1.5 million Shellshock attacks across the CloudFlare network daily&lt;/a&gt;". In the same day, the &lt;a href="http://www.incapsula.com/blog/shellshock-bash-vulnerability-aftermath.html,"&gt;Incapsula&lt;/a&gt; team released several plots showing that their application firewall had deflected over 217,089 exploit attempts on over 4,115 domains. Although almost 70% were scanners (to attempt to verify the vulnerability), almost 35% where either payloads to try to hijack the server or &lt;a href="http://en.wikipedia.org/wiki/Denial-of-service_attack"&gt;DDoS&lt;/a&gt; malware.&lt;/p&gt;
&lt;p&gt;Pretty nasty stuff, huh?&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Understanding the Bash Shell&lt;/h2&gt;
&lt;p&gt;To understand this vulnerability, we need to understand how Bash handles functions and environment variables.&lt;/p&gt;
&lt;p&gt;The &lt;a href="http://www.gnu.org/software/bash/"&gt;GNU Bourne Again shell (BASH)&lt;/a&gt; is a &lt;a href="http://en.wikipedia.org/wiki/Bash_(Unix_shell)"&gt;Unix shell&lt;/a&gt; and &lt;a href="http://en.wikipedia.org/wiki/Command-line_interface"&gt;command language interpreter&lt;/a&gt;. It was released in 1989  by &lt;a href="http://en.wikipedia.org/wiki/Brian_Fox_(computer_programmer)"&gt;Brian Fox&lt;/a&gt; for the &lt;a href="http://www.gnu.org/gnu/thegnuproject.html"&gt;GNU Project&lt;/a&gt; as a free software replacement for the &lt;a href="http://en.wikipedia.org/wiki/Bourne_shell"&gt;Bourne shell&lt;/a&gt; (which was born back in 1977).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ man bash
NAME
       bash - GNU Bourne-Again SHell
SYNOPSIS
       bash &lt;span class="o"&gt;[&lt;/span&gt;options&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;file&lt;span class="o"&gt;]&lt;/span&gt;
COPYRIGHT
       Bash is Copyright &lt;span class="o"&gt;(&lt;/span&gt;C&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="m"&gt;1989&lt;/span&gt;-2011 by the Free Software Foundation, Inc.
DESCRIPTION
       Bash  is  an sh-compatible &lt;span class="nb"&gt;command&lt;/span&gt; language interpreter that executes commands &lt;span class="nb"&gt;read&lt;/span&gt; from the standard input or from a file.  Bash also incorporates useful features from the Korn and C shells &lt;span class="o"&gt;(&lt;/span&gt;ksh and csh&lt;span class="o"&gt;)&lt;/span&gt;.
&lt;span class="o"&gt;(&lt;/span&gt;...&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Of course, there are &lt;a href="http://en.wikipedia.org/wiki/Comparison_of_command_shells"&gt;other command shells out there&lt;/a&gt;. However, Bash is the default shell for most of the Linux systems (and Linux-based systems), including many Debian-based distributions and the Red Hat &amp;amp; Fedora &amp;amp; CentOS combo.&lt;/p&gt;
&lt;h3&gt;Functions in Bash&lt;/h3&gt;
&lt;p&gt;The interesting stuff comes from the fact that Bash  is also a scripting language, with the ability to define functions. This is super useful when you are writing scripts. For example, &lt;code&gt;hello.sh&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; hello &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; Hello!
&lt;span class="o"&gt;}&lt;/span&gt;
hello
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which can be called as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ chmod a+x hello.sh
$ ./hello.sh
Hello!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A function may be compacted into a single line. You just need to choose a name and put a &lt;code&gt;()&lt;/code&gt; after it. Everything inside &lt;code&gt;{}&lt;/code&gt; will belong to the scope of your function.&lt;/p&gt;
&lt;p&gt;For example, we can create a function &lt;code&gt;bashiscool&lt;/code&gt; that uses &lt;code&gt;echo&lt;/code&gt;  to display message on the standard output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bashiscool&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Bash is actually Fun&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
$ bashiscool
Bash is actually Fun
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Child Processes   and the  &lt;code&gt;export&lt;/code&gt;  command&lt;/h3&gt;
&lt;p&gt;We can make things even more interesting. The statement &lt;code&gt;bash -c&lt;/code&gt; can be used to execute a new instance of Bash, as a subprocess,  to run new commands (&lt;code&gt;-c&lt;/code&gt; passes a string with a command). The catch is that the child process does not inherit the functions  or variables that we defined in the parent:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ bash -c bashiscool &lt;span class="c1"&gt;# spawn nested shell&lt;/span&gt;
bash: bashiscool: &lt;span class="nb"&gt;command&lt;/span&gt; not found
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So before executing a new instance of Bash, we need to export the &lt;strong&gt;environment variables&lt;/strong&gt; to the child. That's why we need the &lt;code&gt;export&lt;/code&gt; command. In the example below, the flag &lt;code&gt;-f&lt;/code&gt; means &lt;em&gt;read key bindings from filename&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;export&lt;/span&gt; -f bashiscool
$ bash -c bashiscool &lt;span class="c1"&gt;# spawn nested shell&lt;/span&gt;
Bash is actually Fun
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In other words, first the &lt;code&gt;export&lt;/code&gt; command creates a &lt;strong&gt;regular environment variable&lt;/strong&gt; containing the function definition. Then, the second shell reads the environment. If it sees a variable that looks like a function, it evaluates this function!&lt;/p&gt;
&lt;h3&gt;A Simple Example of an Environment Variable&lt;/h3&gt;
&lt;p&gt;Let's  see how environment variables work examining some &lt;em&gt;builtin&lt;/em&gt; Bash command. For instance, a very popular one,  &lt;code&gt;grep&lt;/code&gt;, is used to search for pattern in files (or the standard input).&lt;/p&gt;
&lt;p&gt;Running &lt;code&gt;grep&lt;/code&gt; in a file that contains the word 'fun' will return the line where this word is. Running &lt;code&gt;grep&lt;/code&gt; with a flag &lt;code&gt;-v&lt;/code&gt; will return the non-matching lines, &lt;em&gt;i.e.&lt;/em&gt; the lines where the word 'fun' does not appear:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bash can be super fun&amp;#39;&lt;/span&gt; &amp;gt; file.txt
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bash can be dangerous&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; file.txt
$ cat file.txt
 bash can be super fun
 bash can be dangerous
$ grep fun file.txt
 bash can be super fun
$ grep -v fun file.txt
 bash can be dangerous
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;grep&lt;/code&gt; command uses an environment variable called &lt;strong&gt;GREP_OPTIONS&lt;/strong&gt; to set default options. This variable is usually set to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$GREP_OPTIONS&lt;/span&gt;
--color&lt;span class="o"&gt;=&lt;/span&gt;auto
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To update or create a new environment variable, it is not enough to use the Bash syntax &lt;code&gt;GREP_OPTIONS='-v'&lt;/code&gt;, but instead we  need to call the &lt;em&gt;builtin&lt;/em&gt; &lt;code&gt;export&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nv"&gt;GREP_OPTIONS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-v&amp;#39;&lt;/span&gt;
$ grep fun file.txt
 bash can be super fun
$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;GREP_OPTIONS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-v&amp;#39;&lt;/span&gt;
$ grep fun file.txt
 bash can be dangerous
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;The  &lt;code&gt;env&lt;/code&gt;  command&lt;/h3&gt;
&lt;p&gt;Another Bash &lt;em&gt;builtin&lt;/em&gt;, the &lt;code&gt;env&lt;/code&gt;  prints the environment variables. But it can also  be used to run a single command with an exported variable (or variables) given to that command. In this case, &lt;code&gt;env&lt;/code&gt; starts a new process, then it modifies the environment, and then it calls the command that was provided as an argument (the &lt;code&gt;env&lt;/code&gt; process is  replaced by the command process).&lt;/p&gt;
&lt;p&gt;In practice, to use &lt;code&gt;env&lt;/code&gt;  to run commands, we:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    1. set the environment variable value with env,
    2. spawn a new shell using bash -c,
    3. pass the command/function we want to run (for example, grep fun file.txt).
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ env &lt;span class="nv"&gt;GREP_OPTIONS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-v&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; grep fun file.txt    &lt;span class="c1"&gt;# this does not work, we need another shell&lt;/span&gt;
bash can be super fun
$ env &lt;span class="nv"&gt;GREP_OPTIONS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-v&amp;#39;&lt;/span&gt; bash -c &lt;span class="s1"&gt;&amp;#39;grep fun file.txt&amp;#39;&lt;/span&gt;  &lt;span class="c1"&gt;# here we go&lt;/span&gt;
bash can be dangerous
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Facing the Shellshock Vulnerability&lt;/h3&gt;
&lt;p&gt;What if we pass some function to the variable definition?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ env &lt;span class="nv"&gt;GREP_OPTIONS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;() { :;};&amp;#39;&lt;/span&gt; bash -c &lt;span class="s1"&gt;&amp;#39;grep fun file.txt&amp;#39;&lt;/span&gt;
grep: &lt;span class="o"&gt;{&lt;/span&gt;: No such file or directory
grep: :&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;: No such file or directory
grep: fun: No such file or directory
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since the things we added are strange when parsed to the command &lt;code&gt;grep&lt;/code&gt;, it won't understand them.&lt;/p&gt;
&lt;p&gt;What if we add stuff &lt;em&gt;after&lt;/em&gt; the function? Things start to get weirder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ env &lt;span class="nv"&gt;GREP_OPTIONS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-v () { :;}; echo NOOOOOOOOOOOOOOO!&amp;#39;&lt;/span&gt; bash -c &lt;span class="s1"&gt;&amp;#39;grep fun file.txt&amp;#39;&lt;/span&gt;
grep: &lt;span class="o"&gt;{&lt;/span&gt;: No such file or directory
grep: :&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;: No such file or directory
grep: echo: No such file or directory
grep: NOOOOOOOOOOOOOOO!: No such file or directory
grep: fun: No such file or directory
file.txt:bash can be super fun
file.txt:bash can be dangerous
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Did you notice the confusion? &lt;em&gt;Both&lt;/em&gt; matches and non-matches were printed! It means that some stuff was parsed well! When in doubt, Bash appears to do &lt;em&gt;everything&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;Now, what if we just keep the function, taking out the only thing that makes sense, &lt;code&gt;-v&lt;/code&gt;?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ env &lt;span class="nv"&gt;GREP_OPTIONS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;() { :;}; echo NOOOOOOOOOOOOOOO!&amp;#39;&lt;/span&gt; bash -c &lt;span class="s1"&gt;&amp;#39;grep fun file.txt&amp;#39;&lt;/span&gt;
NOOOOOOOOOOOOOOO!
grep: &lt;span class="o"&gt;{&lt;/span&gt;: No such file or directory
grep: :: No such file or directory
grep: &lt;span class="o"&gt;}&lt;/span&gt;: No such file or directory
grep: fun: No such file or directory
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Did you notice that &lt;code&gt;echo NOOOOOOOOOOOOOOO!&lt;/code&gt; was executed normally? &lt;strong&gt;This is the (first) Shellshock bug!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This works because when the new shell sees an environment variable beginning with &lt;code&gt;()&lt;/code&gt;, it gets the variable name and executes the  string following it. This  includes executing anything after the function, &lt;em&gt;i.e&lt;/em&gt;, the evaluation does not stop when the end of the function definition is reached!&lt;/p&gt;
&lt;p&gt;Remember that &lt;code&gt;echo&lt;/code&gt; is not the only thing we can do. The possibilities are unlimited! For example, we can issue any &lt;code&gt;/bin&lt;/code&gt; command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ env &lt;span class="nv"&gt;GREP_OPTIONS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;() { :;}; /bin/ls&amp;#39;&lt;/span&gt; bash -c &lt;span class="s1"&gt;&amp;#39;grep fun file.txt&amp;#39;&lt;/span&gt;
anaconda  certificates  file.txt  IPython
&lt;span class="o"&gt;(&lt;/span&gt;...&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;WOW.&lt;/p&gt;
&lt;p&gt;Worse, we  actually don't need to use a system environment variable nor even call a real command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ env &lt;span class="nv"&gt;test&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;() { :;}; echo STILL NOOOOOOOO!!!!&amp;#39;&lt;/span&gt; bash -c :
STILL NOOOOOOOO!!!!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the example above, &lt;code&gt;env&lt;/code&gt; runs a command with an arbitrary  variable  (test)  set to some function (in this case is just a single &lt;code&gt;:&lt;/code&gt;, a Bash command defined as doing nothing). The semi-colon signals the end of the function definition. Again, the bug is in the fact that there's nothing stopping the parsing of what is after the semi-colon!&lt;/p&gt;
&lt;p&gt;Now it's easy to see if your system is vulnerable, all you need to do is run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ env &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;() { :;}; echo The system is vulnerable!&amp;#39;&lt;/span&gt; bash -c :
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That simple.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;There is more than one!&lt;/h2&gt;
&lt;p&gt;The Shellshock vulnerability is  an example of an &lt;a href="http://en.wikipedia.org/wiki/Arbitrary_code_execution"&gt;arbitrary code execution&lt;/a&gt; (ACE) vulnerability, which is executed on running programs. An attacker will use an ACE vulnerability to run a program that gives her a simple way of controlling the targeted machine. This is nicely achieved by running a Shell such as Bash.&lt;/p&gt;
&lt;p&gt;It is not surprising that right after a patch for &lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-6271"&gt;CVE-2014-6271&lt;/a&gt; was released, several new issues were opened:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-7169"&gt;CVE-2014-7169&lt;/a&gt;: Right after the first bug was disclosed, a &lt;a href="https://twitter.com/taviso/status/514887394294652929"&gt;tweet&lt;/a&gt; from &lt;a href="http://taviso.decsystem.org/"&gt;Tavis Ormandy&lt;/a&gt;  showed a &lt;em&gt;further parser error&lt;/em&gt; that became the second vulnerability:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ env &lt;span class="nv"&gt;X&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;() { (a)=&amp;gt;\&amp;#39;&lt;/span&gt; bash -c &lt;span class="s2"&gt;&amp;quot;echo vulnerable&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; bash -c &lt;span class="s2"&gt;&amp;quot;echo Bug CVE-2014-7169 patched&amp;quot;&lt;/span&gt;
vulnerable
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-7186"&gt;CVE-2014-7186&lt;/a&gt; and &lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-7187"&gt;CVE-2014-7187&lt;/a&gt;: A little after the second bug, two other bugs were found by &lt;a href="http://www.enyo.de/fw/"&gt;Florian Weimer&lt;/a&gt;. One concerning &lt;em&gt;out of bound memory read error&lt;/em&gt; in &lt;a href="http://tools.cisco.com/security/center/viewAlert.x?alertId=35860"&gt;redir_stack&lt;/a&gt; and the other an &lt;em&gt;off-by-one error in nested loops&lt;/em&gt;. You can check these vulnerabilities in your system &lt;a href="https://github.com/hannob/bashcheck"&gt;with this script&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-6277"&gt;CVE 2014-6277&lt;/a&gt; and &lt;a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-6278"&gt;CVE 2014-6278&lt;/a&gt;: A couple of days ago, these new bugs were found by &lt;a href="http://lcamtuf.blogspot.de/2014/09/bash-bug-apply-unofficial-patch-now.html"&gt;Michal Zalewski&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What do you think, is Shellshock &lt;a href="http://blog.erratasec.com/2014/09/the-shockingly-bad-code-of-bash.html"&gt;just a blip&lt;/a&gt;?&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Suggestions to Protect Your System&lt;/h2&gt;
&lt;p&gt;Several patches have been released since the Shellshock vulnerabilities were found. Although at this point they &lt;a href="https://securityblog.redhat.com/2014/09/24/bash-specially-crafted-environment-variables-code-injection-attack/"&gt;seem to solve most of the problem&lt;/a&gt;, below are some  recommendations to keep your system safer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Update your system!  And keep updating it... Many Linux distributions have released new Bash software versions, so follow the instructions of your distribution. In most of the cases, a simple &lt;code&gt;yum update&lt;/code&gt; or &lt;code&gt;apt-get update&lt;/code&gt; or similar will do it. If you have several servers, the script below can be helpful:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nv"&gt;servers&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;
&lt;span class="m"&gt;120&lt;/span&gt;.120.120.120
&lt;span class="m"&gt;10&lt;/span&gt;.10.10.10
&lt;span class="m"&gt;22&lt;/span&gt;.22.22.22
&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; server in &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;servers&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
ssh &lt;span class="nv"&gt;$server&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;yum -y update bash&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Update firmware on your router or any other web-enabled devices, as soon as they become available. Remember  to only download patches  from reputable sites (only HTTPS please!), since scammers will likely try to take advantage of Shellshock reports.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keep an eye on all of your accounts for signs of unusual activity. Consider changing important passwords.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTP requests to CGI scripts have been identified as the major attack vector. Disable any  scripts that call on the shell (however, it does not fully mitigate the vulnerability). To check if your system is vulnerable you can use &lt;a href="http://milankragujevic.com/projects/shellshock/"&gt;this online scanner&lt;/a&gt;. Consider &lt;a href="https://access.redhat.com/articles/1212303"&gt;mod_security&lt;/a&gt; if you're not already using it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Because the HTTP requests used by Shellshock exploits are quite unique, monitor logs with keywords such as &lt;code&gt;grep '() {'  access_log&lt;/code&gt;or &lt;code&gt;cat access_log |grep "{ :;};"&lt;/code&gt;. Some common places for http logs are: &lt;code&gt;cPanel: /usr/local/apache/domlogs/&lt;/code&gt;, &lt;code&gt;Debian/Apache: /var/log/apache2/&lt;/code&gt;, or &lt;code&gt;CentOS: /var/log/httpd/&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://access.redhat.com/articles/1212303"&gt;Firewall and network filters&lt;/a&gt; can be set to block requests that contain a signature for the attack, &lt;em&gt;i.e&lt;/em&gt; &lt;code&gt;“() {“&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If case of an attack, publish the attacker's information! You can use &lt;a href="http://www.grymoire.com/Unix/Awk.html"&gt;awk&lt;/a&gt;  and  &lt;a href="http://en.wikipedia.org/wiki/Uniq"&gt;uniq&lt;/a&gt; (where &lt;em&gt;print $1&lt;/em&gt; means print the first column) to get her IP, for example:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat log_file &lt;span class="p"&gt;|&lt;/span&gt;grep &lt;span class="s2"&gt;&amp;quot;{ :;};&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{print $1}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;uniq
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you are on a managed hosting subscription, check your company's status. For example: &lt;a href="https://docs.acquia.com/articles/september-2014-gnu-bash-upstream-security-vulnerability"&gt;Acquia&lt;/a&gt;, &lt;a href="https://status.heroku.com/incidents/665"&gt;Heroku&lt;/a&gt;, &lt;a href="http://status.mediatemple.net/"&gt;Mediatemple&lt;/a&gt;, and &lt;a href="https://status.rackspace.com/"&gt;Rackspace&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update your Docker containers and  AWS instances.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you are running production systems that don't need exported functions at all, take a look at &lt;a href="https://github.com/dlitz/bash-shellshock"&gt;this wrapper&lt;/a&gt; that refuses to run bash if any environment variable's value starts with a left-parent.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Further  References&lt;/h2&gt;
&lt;h4&gt;Reviews&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://stephane.chazelas.free.fr"&gt;http://stephane.chazelas.free.fr/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://securityblog.redhat.com/2014/09/24/bash-specially-crafted-environment-variables-code-injection-attack"&gt;https://securityblog.redhat.com/2014/09/24/bash-specially-crafted-environment-variables-code-injection-attack&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://lcamtuf.blogspot.co.uk/2014/09/quick-notes-about-bash-bug-its-impact.html"&gt;http://lcamtuf.blogspot.co.uk/2014/09/quick-notes-about-bash-bug-its-impact.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.openwall.com/lists/oss-security/2014/09/24/11"&gt;http://www.openwall.com/lists/oss-security/2014/09/24/11&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.erratasec.com/2014/09/bash-bug-as-big-as-heartbleed.html#.VCNbefmSx8G"&gt;http://blog.erratasec.com/2014/09/bash-bug-as-big-as-heartbleed.html#.VCNbefmSx8G&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://seclists.org/oss-sec/2014/q3/649"&gt;http://seclists.org/oss-sec/2014/q3/649&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.circl.lu/pub/tr-27/#recommendations"&gt;http://www.circl.lu/pub/tr-27/#recommendations&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.troyhunt.com/2014/09/everything-you-need-to-know-about.html"&gt;http://www.troyhunt.com/2014/09/everything-you-need-to-know-about.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://lcamtuf.blogspot.com/2014/09/quick-notes-about-bash-bug-its-impact.html"&gt;http://lcamtuf.blogspot.com/2014/09/quick-notes-about-bash-bug-its-impact.html&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Bugs Description&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://ftp.gnu.org/gnu/bash/bash-4.3-patches/bash43-025"&gt;http://ftp.gnu.org/gnu/bash/bash-4.3-patches/bash43-025&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://ftp.gnu.org/gnu/bash/bash-4.3-patches/bash43-026"&gt;http://ftp.gnu.org/gnu/bash/bash-4.3-patches/bash43-026&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://ftp.gnu.org/gnu/bash/bash-4.3-patches/bash43-027"&gt;http://ftp.gnu.org/gnu/bash/bash-4.3-patches/bash43-027&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.cloudflare.com/inside-shellshock/"&gt;http://blog.cloudflare.com/inside-shellshock/&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Proof-of-Concept Attacks&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://research.zscaler.com/2014/09/shellshock-attacks-spotted-in-wild.html"&gt;http://research.zscaler.com/2014/09/shellshock-attacks-spotted-in-wild.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.clevcode.org/cve-2014-6271-shellshock/"&gt;http://www.clevcode.org/cve-2014-6271-shellshock/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.invisiblethreat.ca/2014/09/cve-2014-6271/"&gt;https://www.invisiblethreat.ca/2014/09/cve-2014-6271/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://marc.info/?l=qmail&amp;amp;m=141183309314366&amp;amp;w=2"&gt;http://marc.info/?l=qmail&amp;amp;m=141183309314366&amp;amp;w=2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.dfranke.us/posts/2014-09-27-shell-shock-exploitation-vectors.html"&gt;https://www.dfranke.us/posts/2014-09-27-shell-shock-exploitation-vectors.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.trustedsec.com/september-2014/shellshock-dhcp-rce-proof-concept/"&gt;https://www.trustedsec.com/september-2014/shellshock-dhcp-rce-proof-concept/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.invisiblethreat.ca/2014/09/cve-2014-6271/"&gt;https://www.invisiblethreat.ca/2014/09/cve-2014-6271/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pastebin.com/VyMs3rRd"&gt;http://pastebin.com/VyMs3rRd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://infosecnirvana.com/shellshock-hello-honeypot/"&gt;http://infosecnirvana.com/shellshock-hello-honeypot/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://isc.sans.edu/forums/diary/Shellshock+A+Collection+of+Exploits+seen+in+the+wild/18725"&gt;https://isc.sans.edu/forums/diary/Shellshock+A+Collection+of+Exploits+seen+in+the+wild/18725&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;</content><category term="Shellshock"></category><category term="Bash"></category><category term="Command_Injection"></category></entry></feed>