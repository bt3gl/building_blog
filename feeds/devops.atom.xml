<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>chmod +x singularity.sh - DevOps</title><link href="http://bt3gl.github.io/" rel="alternate"></link><link href="http://bt3gl.github.io/feeds/devops.atom.xml" rel="self"></link><id>http://bt3gl.github.io/</id><updated>2015-03-29T00:00:00-04:00</updated><entry><title>A Tor Proxy in a Raspberry Pi</title><link href="http://bt3gl.github.io/a-tor-proxy-in-a-raspberry-pi.html" rel="alternate"></link><published>2015-03-29T00:00:00-04:00</published><updated>2015-03-29T00:00:00-04:00</updated><author><name>Marina von Steinkirch</name></author><id>tag:bt3gl.github.io,2015-03-29:/a-tor-proxy-in-a-raspberry-pi.html</id><summary type="html">&lt;p&gt;&lt;img alt="tor" height="250px" src="./cyberpunk/tor.jpg" width="350px"&gt;&lt;/p&gt;
&lt;p&gt;In this tutorial I walk through all the steps to setup a Tor proxy in a Raspberry Pi (Model B). This work was based on some of tutorials from Adafruit.&lt;/p&gt;
&lt;h1&gt;Setting Up a Raspberry Pi&lt;/h1&gt;
&lt;h2&gt;Installing an Operating System in the SD card&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.raspberrypi.org/help/noobs-setup"&gt;You can either install NOOBS and then …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="tor" height="250px" src="./cyberpunk/tor.jpg" width="350px"&gt;&lt;/p&gt;
&lt;p&gt;In this tutorial I walk through all the steps to setup a Tor proxy in a Raspberry Pi (Model B). This work was based on some of tutorials from Adafruit.&lt;/p&gt;
&lt;h1&gt;Setting Up a Raspberry Pi&lt;/h1&gt;
&lt;h2&gt;Installing an Operating System in the SD card&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.raspberrypi.org/help/noobs-setup"&gt;You can either install NOOBS and then choose your OS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://fedoraproject.org/wiki/FedoraARMInstaller"&gt;Or you can download the Fedora ARM Installer and the OS image you prefer&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Network Setup&lt;/h2&gt;
&lt;p&gt;The easiest way is to connect your Pi in the network is through an ethernet interface. Connecting the cable should be allow the connection directly as long as your network router allows DHCP.&lt;/p&gt;
&lt;p&gt;In addition, you can also setup a wireless connect, which requires your router to be broadcasting the SSID. At Raspbian, there is a WiFi configuration icon. Type wlan0 adapter and scan. After connecting in your network you will also be able to see the IP of your Pi.&lt;/p&gt;
&lt;h2&gt;Input/Output Setup&lt;/h2&gt;
&lt;p&gt;The easiest way to connect to your Pi is by a HDMI cable to a monitor and an USB keyboard. Another options is through a console cable or a SSH connection.&lt;/p&gt;
&lt;h2&gt;Connection through a Console Cable (3.3V logic levels)&lt;/h2&gt;
&lt;p&gt;The connections are to the outside pin connections of the GPIO header:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;The red lead should be connected to 5V.
The black lead to GND,
The white lead to TXD.
The green lead to RXD.
If the serial lead (red) is connected, do not attach the Pi&amp;#39;s USB power adapter. 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In Linux you can use screen:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install screen
$ sudo screen /dev/ttyUSB0 &lt;span class="m"&gt;115200&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In Windows, you can use a terminal emulation such as Putty and the drivers from this (link)[http://www.prolific.com.tw/US/ShowProduct.aspx?p_id=225&amp;amp;pcid=41]. Verify the number of the COM serial port in the Device manager and connect with speed 115200.&lt;/p&gt;
&lt;h2&gt;SSH Connection&lt;/h2&gt;
&lt;p&gt;You need to enable SSH in the Pi:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo raspi-config
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Find the Pi's IP by:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo ifconfig
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From your Linux PC (using "pi" as user):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo PI-IP -l pi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can (should) set RSA keys. In a terminal session on the Linux client enter:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir ~/.ssh
$ chmod &lt;span class="m"&gt;700&lt;/span&gt; ~/.ssh
$ ssh-keygen -t rsa
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now copy the public key over to the Pi by typing in the client:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ssh-copy-id &amp;lt;userid&amp;gt;@&amp;lt;hostname or ip address&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Setting up a Wi-Fi Access Point&lt;/h2&gt;
&lt;p&gt;You need an ethernet cable and a WiFi adapter. First, check if you see the wlan0 (the WiFi) module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ifconfig -a 
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;DHCP Server Configuration&lt;/h3&gt;
&lt;p&gt;Install the software that will act as the hostap (host access point):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install hostapd isc-dhcp-server
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If the Pi cannot get the apt-get repositories:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get update 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Edit &lt;code&gt;/etc/networks/interfaces&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;auto lo

iface lo inet loopback
iface eth0 inet dhcp

allow-hotplug wlan0

iface wlan0 inet static
  address 192.168.42.1
  netmask 255.255.255.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then edit the DHCP server configuration file, &lt;code&gt;/etc/dhcp/dhcpd.conf&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;subnet 192.168.42.0 netmask 255.255.255.0 {
range 192.168.42.10 192.168.42.50;
option broadcast-address 192.168.42.255;
option routers 192.168.42.1;
default-lease-time 600;
max-lease-time 7200;
option domain-name &amp;quot;local&amp;quot;;
option domain-name-servers 8.8.8.8, 8.8.4.4;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, add the bellow line to &lt;code&gt;/etc/default/isc-dhcp-server&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;INTERFACES=&amp;quot;wlan0&amp;quot; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Restart the network:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo /etc/init.d/networking restart
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;IP Forwarding&lt;/h3&gt;
&lt;p&gt;Enable IP forwarding and setting up NAT to allow multiple clients to connect to the WiFi and have all the data 'tunneled' through the single Ethernet IP:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &amp;gt; /proc/sys/net/ipv4/ip_forward
$ sudo nano /etc/sysctl.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Uncomment the next line to enable packet forwarding for IPv4:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;net.ipv4.ip_forward=1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And update:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo sh -c &amp;quot;echo 1 &amp;gt; /proc/sys/net/ipv4/ip_forward&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Firewall Configuration&lt;/h3&gt;
&lt;p&gt;We insert an iptables rules to allow NAT (network address translation):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
$ iptables -A FORWARD -i eth0 -o wlan0 -m state --state RELATED,ESTABLISHED -j ACCEPT
$ iptables -A FORWARD -i eth0 -o wlan0 -m state --state RELATED,ESTABLISHED -j ACCEPT
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To make the above true in every reboot:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo sh -c &lt;span class="s2"&gt;&amp;quot;iptables-save &amp;gt; /etc/iptables.ipv4.nat&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For additional security (it blocks access from RFC 1918 subnets on your internet (eth0) interface as well as ICMP (ping) packets and ssh connections.):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo iptables -A INPUT -s &lt;span class="m"&gt;192&lt;/span&gt;.168.0.0/24 -i eth0 -j DROP
$ sudo iptables -A INPUT -s &lt;span class="m"&gt;10&lt;/span&gt;.0.0.0/8 -i eth0 -j DROP
$ sudo iptables -A INPUT -s &lt;span class="m"&gt;172&lt;/span&gt;.16.0.0/12 -i eth0 -j DROP
$ sudo iptables -A INPUT -s &lt;span class="m"&gt;224&lt;/span&gt;.0.0.0/4 -i eth0 -j DROP
$ sudo iptables -A INPUT -s &lt;span class="m"&gt;240&lt;/span&gt;.0.0.0/5 -i eth0 -j DROP
$ sudo iptables -A INPUT -s &lt;span class="m"&gt;127&lt;/span&gt;.0.0.0/8 -i eth0 -j DROP
$ sudo iptables -A INPUT -i eth0 -p tcp -m tcp --dport &lt;span class="m"&gt;22&lt;/span&gt; -j DROP
$ sudo iptables -A INPUT -i eth0 -p icmp -m icmp --icmp-type &lt;span class="m"&gt;8&lt;/span&gt; -j DROP
$ sudo iptables-save &amp;gt; /etc/iptables.up.rules
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you want to see how many packets your firewall is blocking:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ iptables -L -n -v
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If your eth0 still shows a private address, it probably didn't renew when you moved it to your modem. Fix this by running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo ifdown eth0 &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo ifup eth0
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Access Point Configuration&lt;/h2&gt;
&lt;p&gt;Configure Access Point with hostpad, editing &lt;code&gt;/etc/hostapd/hostapd.conf&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;interface=wlan0
driver=rtl871xdrv
ssid=Pi_AP
hw_mode=g
channel=6
macaddr_acl=0
auth_algs=1
ignore_broadcast_ssid=0
wpa=2
wpa_passphrase=Raspberry
wpa_key_mgmt=WPA-PSK
wpa_pairwise=TKIP
rsn_pairwise=CCMP
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we will tell the Pi where to find this configuration file in /etc/default/hostapd:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DAEMON_CONF=&amp;quot;/etc/hostapd/hostapd.conf&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And start the access point by running hostpad:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ hostapd -d /etc/hostapd/hostapd.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To start automatically, add the command to &lt;code&gt;/etc/rc.local&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ hostapd -B /etc/hostapd/hostapd.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Logs and Status&lt;/h3&gt;
&lt;p&gt;To see the system log data, run in the Pi:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tail -f /var/log/syslog
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can always check the status of the host AP server and the DHCP server with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo service hostapd status
$ sudo service isc-dhcp-server status
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Setting up a Daemon&lt;/h3&gt;
&lt;p&gt;Now that we know it works, we can set it up as a 'daemon' (a program that will start when the Pi boots):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo service hostapd start 
$ sudo service isc-dhcp-server start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To start the daemon services. Verify that they both start successfully (no 'failure' or 'errors')&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo update-rc.d hostapd &lt;span class="nb"&gt;enable&lt;/span&gt; 
$ sudo update-rc.d isc-dhcp-server &lt;span class="nb"&gt;enable&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Removing WPA-Supplicant&lt;/h3&gt;
&lt;p&gt;Depending on your distribution, you may need to remove WPASupplicant. Do so by running this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo mv /usr/share/dbus-1/system-services/fi.epitest.hostap.WPASupplicant.service ~/
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Setting up the Tor Proxy&lt;/h2&gt;
&lt;p&gt;You now have a wirelesses access point in your Pi. To make it a Tor proxy, first install Tor:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install tor
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then edit the Tor config file at &lt;code&gt;/etc/tor/torrc&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Log notice file /var/log/tor/notices.log
VirtualAddrNetwork 10.192.0.0/10
AutomapHostsSuffixes .onion,.exit
AutomapHostsOnResolve 1
TransPort 9040
TransListenAddress 192.168.42.1
DNSPort 53
DNSListenAddress 192.168.42.1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Change the IP routing tables so that connections via the WiFi interface (wlan0) will be routed through the Tor software. To flush the old rules from the IP NAT table do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo iptables -F
$ sudo iptables -t nat -F
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add the iptables, to be able to ssh:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo iptables -t nat -A PREROUTING -i wlan0 -p tcp --dport &lt;span class="m"&gt;22&lt;/span&gt; -j REDIRECT --to-ports &lt;span class="m"&gt;22&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To route all DNS (UDP port 53) from interface wlan0 to internal port 53 (DNSPort in our torrc):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo iptables -t nat -A PREROUTING -i wlan0 -p udp --dport &lt;span class="m"&gt;53&lt;/span&gt; -j REDIRECT --to-ports &lt;span class="m"&gt;53&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To route all TCP traffic from interface wlan0 to port 9040 (TransPort in our torrc):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo iptables -t nat -A PREROUTING -i wlan0 -p tcp --syn -j REDIRECT --to-ports &lt;span class="m"&gt;9040&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Check that the iptables are right with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo iptables -t nat -L
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If everything is good, we'll save it to our old NAT save file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo sh -c &lt;span class="s2"&gt;&amp;quot;iptables-save &amp;gt; /etc/iptables.ipv4.nat&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next we'll create our log file (handy for debugging) with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo touch /var/log/tor/notices.log
$ sudo chown debian-tor /var/log/tor/notices.log
$ sudo chmod &lt;span class="m"&gt;644&lt;/span&gt; /var/log/tor/notices.log
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Check it with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ls -l /var/log/tor
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, you can start the Tor service manually:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo service tor start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And make it start on boot:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo update-rc.d tor &lt;span class="nb"&gt;enable&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's it! Browser safe!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Enjoy! This article was originally posted &lt;a href="https://coderwall.com/p/m3excg/a-tor-proxy-in-a-raspberry-pi"&gt;here&lt;/a&gt;.&lt;/p&gt;</content></entry><entry><title>Deploying a Flask App at Heroku</title><link href="http://bt3gl.github.io/deploying-a-flask-app-at-heroku.html" rel="alternate"></link><published>2015-03-21T00:00:00-04:00</published><updated>2015-03-21T00:00:00-04:00</updated><author><name>Marina von Steinkirch</name></author><id>tag:bt3gl.github.io,2015-03-21:/deploying-a-flask-app-at-heroku.html</id><summary type="html">&lt;p&gt;&lt;img alt="antisocial" height="250px" src="./cyberpunk/anti-social.png" width="350px"&gt;&lt;/p&gt;
&lt;p&gt;I was playing with Flask and I wrote my own &lt;a href="https://anti-social.herokuapp.com/"&gt;Anti-Social Network&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Heroku platform is very flexible and it supports several programming languages. To
deploy an application to Heroku, use Git to push the application to Heroku’s server.&lt;/p&gt;
&lt;h1&gt;Running in a Production Server&lt;/h1&gt;
&lt;p&gt;Heroku does not provide a web …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="antisocial" height="250px" src="./cyberpunk/anti-social.png" width="350px"&gt;&lt;/p&gt;
&lt;p&gt;I was playing with Flask and I wrote my own &lt;a href="https://anti-social.herokuapp.com/"&gt;Anti-Social Network&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Heroku platform is very flexible and it supports several programming languages. To
deploy an application to Heroku, use Git to push the application to Heroku’s server.&lt;/p&gt;
&lt;h1&gt;Running in a Production Server&lt;/h1&gt;
&lt;p&gt;Heroku does not provide a web server but it expects it to start their own servers and listen on the port number set in environment variable PORT. Flask will perform very poorly because it was not designed to run in a production environment. To ameliorate this, you may use a production-ready web server such as Gunicorn.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install gunicorn
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, run your app with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gunicorn manage:app
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Gunicorn uses port 8000 instead of 5000.&lt;/p&gt;
&lt;h1&gt;Heroku Setting Up&lt;/h1&gt;
&lt;h3&gt;Create an account at Heroku.com&lt;/h3&gt;
&lt;p&gt;If you haven't done it yet. Remember: you will be able to keep up to five applications running (you can always delete them if you need).&lt;/p&gt;
&lt;h3&gt;Install Git and Heroku Toolbelt&lt;/h3&gt;
&lt;p&gt;You can find instructions at Heroku.com.&lt;/p&gt;
&lt;p&gt;For example, if you are in an AWS EC2 Ubuntu instance, you can use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install -y git-core
$ wget -qO- https://toolbelt.heroku.com/install-ubuntu.sh &lt;span class="p"&gt;|&lt;/span&gt; sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can check if it worked with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ which git
$ which heroku
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, login at Heroku:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ heroku login
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Authorize your Machine at Heroku&lt;/h2&gt;
&lt;h3&gt;Create and add a SSH Key at Heroku:&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ssh-keygen -t rsa
$ heroku keys:add
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The public and private keys will be at &lt;code&gt;~/.ssh&lt;/code&gt;. I recommend always backup your keys. Never share your private key.&lt;/p&gt;
&lt;h3&gt;Creating a Git Repository&lt;/h3&gt;
&lt;p&gt;Heroku's push/commits work just like as Git. But instead of using the "origin" you use "heroku" (you can verify this later at .git/refs/remotes/). In other words, your project's control version (development) is done by using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git push origin master &lt;span class="o"&gt;(&lt;/span&gt;or any branch you like&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and the deployment at Heroku (production) is done using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git push heroku master &lt;span class="o"&gt;(&lt;/span&gt;or any branch you like&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the root of your project, go ahead and create a Git repository, commit, add, push:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git init
$ git add -A
$ git commit -m &lt;span class="s2"&gt;&amp;quot;First commit&amp;quot;&lt;/span&gt;
$ git push origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Creating an App&lt;/h3&gt;
&lt;p&gt;Now, let's create our app at Heroku:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ heroku create &amp;lt;app-name&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can check all your current applications with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ heroku apps
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Addons and Environment Variables&lt;/h3&gt;
&lt;p&gt;Now it's time to add the addons and the environment variables to your app at the Heroku server. For the app I mentioned in the beginning, I type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ heroku addons:add heroku-postgresql:dev
$ heroku pg:promote HEROKU_POSTGRESQL_ONYX_URL
$ heroku config:set &lt;span class="nv"&gt;MAIL_USERNAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;login&amp;gt;&amp;quot;&lt;/span&gt;
$ heroku config:set &lt;span class="nv"&gt;MAIL_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;password&amp;gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can always check your configuration with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ heroku config
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Adding Requirements&lt;/h3&gt;
&lt;p&gt;Heroku needs to know what libraries and packages it needs to install to be able to run your application. For this, create a file requirements.txt in the root of your app, with all the libraries from your environment. One way of doing this is by:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat pip freeze &amp;gt;&amp;gt; requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Adding Procfile&lt;/h4&gt;
&lt;p&gt;Next, Heroku needs to know the command to use to start your app. This is given by a file called Procfile. The content should be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;web gunicorn manage:app
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(if this is how you run your application).&lt;/p&gt;
&lt;p&gt;In the Procfile, each line has a task name, a colon, and the command that runs the task. We use web here because Heroku recognizes it as the task that start the web server. Heroku gives this task a PORT environment variable, and set it to the port in which the application needs to listen for requests.&lt;/p&gt;
&lt;h3&gt;Using Foreman to Emulate Heroku&lt;/h3&gt;
&lt;p&gt;The Heroku Toolbet includes Foreman, used to run the app locally through the Procfile for testing purposes. The environment variables set at Heroku must be defined locally. Just create a file var.env with this information:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;FLASK_CONFIG=heroku
MAIL_USERNAME=&amp;lt;your-username&amp;gt;
MAIL_PASSWORD=&amp;lt;your-password&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Foreman run is used to run commands under the environment of the application. Foreman start reads the Procfile and executes the tasks in it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ foreman run python manage.py deploy
$ foreman start
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Configuring Logging&lt;/h3&gt;
&lt;p&gt;In Heroku, logs are written to stdout or stderr. In my app, I added the logging configuration to a class in my app's &lt;code&gt;config.py&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HerokuConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ProductionConfig&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;init_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;ProductionConfig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StreamHandler&lt;/span&gt;
    &lt;span class="n"&gt;file_handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StreamHandler&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;file_handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WARNING&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To let Heroku know what configuration it should use, I add this environment variable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ heroku config:set &lt;span class="nv"&gt;FLASK_CONFIG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;heroku
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now if something goes wrong when you deploy, you can always check the log:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ heroku logs
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Deploying!&lt;/h3&gt;
&lt;p&gt;If everything is well-done, it's time to deploy your application. Since you already committed your app before, you just need to push it to Heroku:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git push heroku master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In my app, I have a script for the deployment (such taking care of database and other setups for production). So, additionally, I run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ heroku run python manage.py deploy
$ heroku restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's it! The app should be running at &lt;code&gt;&amp;lt; app-name &amp;gt;.herokuapp.com&lt;/code&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Enjoy! This article was originally posted &lt;a href="https://coderwall.com/p/pstm1w/deploying-a-flask-app-at-heroku"&gt;here&lt;/a&gt;.&lt;/p&gt;</content></entry><entry><title>Functional Python Stuff Super Quick</title><link href="http://bt3gl.github.io/functional-python-stuff-super-quick.html" rel="alternate"></link><published>2015-03-01T00:00:00-05:00</published><updated>2015-03-01T00:00:00-05:00</updated><author><name>Marina von Steinkirch</name></author><id>tag:bt3gl.github.io,2015-03-01:/functional-python-stuff-super-quick.html</id><summary type="html">&lt;h3&gt;Python has &lt;strong&gt;First Class Functions&lt;/strong&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def create_adder(x):
    def adder(y):
        return x + y
    return adder
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Such that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; add_10 = create_adder(10)
&amp;gt;&amp;gt;&amp;gt; add_10(3)  
13
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Python has &lt;strong&gt;Anonymous Functions&lt;/strong&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(lambda x: x &amp;gt; 2)(3)   # =&amp;gt; True
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Python has Built-in &lt;strong&gt;Higher Order Functions&lt;/strong&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;map(add_10, [1, 2, 3])   # =&amp;gt; [11, 12, 13]
filter(lambda …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h3&gt;Python has &lt;strong&gt;First Class Functions&lt;/strong&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def create_adder(x):
    def adder(y):
        return x + y
    return adder
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Such that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; add_10 = create_adder(10)
&amp;gt;&amp;gt;&amp;gt; add_10(3)  
13
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Python has &lt;strong&gt;Anonymous Functions&lt;/strong&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(lambda x: x &amp;gt; 2)(3)   # =&amp;gt; True
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Python has Built-in &lt;strong&gt;Higher Order Functions&lt;/strong&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;map(add_10, [1, 2, 3])   # =&amp;gt; [11, 12, 13]
filter(lambda x: x &amp;gt; 5, [3, 4, 5, 6, 7])   # =&amp;gt; [6, 7]
&lt;/pre&gt;&lt;/div&gt;</content></entry><entry><title>Getting started with LAMP and CodeIgniter</title><link href="http://bt3gl.github.io/getting-started-with-lamp-and-codeigniter.html" rel="alternate"></link><published>2015-02-25T00:00:00-05:00</published><updated>2015-02-25T00:00:00-05:00</updated><author><name>Marina von Steinkirch</name></author><id>tag:bt3gl.github.io,2015-02-25:/getting-started-with-lamp-and-codeigniter.html</id><summary type="html">&lt;p&gt;LAMP is an acronym for a model of web service solution stacks: Linux, the Apache HTTP Server, the MySQL relational database management system, and the PHP programming language.&lt;/p&gt;
&lt;h2&gt;Building a MySQL Database&lt;/h2&gt;
&lt;p&gt;We will use a web interface to access data in our database:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Log in with your root login …&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;LAMP is an acronym for a model of web service solution stacks: Linux, the Apache HTTP Server, the MySQL relational database management system, and the PHP programming language.&lt;/p&gt;
&lt;h2&gt;Building a MySQL Database&lt;/h2&gt;
&lt;p&gt;We will use a web interface to access data in our database:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Log in with your root login/password (set in the installation above): &lt;code&gt;http://localhost/phpmyadmin&lt;/code&gt;.
The left hand column contains a list of all of the databases you currently have.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mysql: contains information about the MySQL database server.&lt;/li&gt;
&lt;li&gt;information_schema: contains information about all of the other databases on your computer.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the Databases interface you are presented with a list of all of the databases.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Above that list there should be a form labeled “Create new database” with a text field.&lt;/li&gt;
&lt;li&gt;Create tables within. Chose the types of your data.  Every table should always have an id column (auto-incrementing integer, meaning that each new record will be automatically assigned an id value, starting at 1). You can do this by selecting A_I checkbox.&lt;/li&gt;
&lt;li&gt;Add some data (using insert). The database is located at 
&lt;code&gt;/var/lib/mysql&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;MySQL Query Basis&lt;/h3&gt;
&lt;p&gt;Selecting items:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Retrieve all of the records (* means columns):
SELECT * FROM db_name;
Select only some columns:
SELECT col1, col2 FROM db_name;
Select only some values from some column:
SELECT * FROM db_name WHERE col1 = &amp;#39;item&amp;#39;;
Select the first 10 items:
SELECT * FROM cars WHERE make = &amp;#39;Porsche&amp;#39; LIMIT 10
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Inserting an item:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;INSERT INTO db_name (col1, col2, col3) VALUES (&amp;#39;item1&amp;#39;, &amp;#39;item2&amp;#39;, &amp;#39;item3&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Updating an item:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;UPDATE db_name SET col1 = &amp;#39;item&amp;#39; WHERE col2 = &amp;#39;item2&amp;#39; AND col3=&amp;#39;item3&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Deleting items:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DELETE db_name WHERE col1 = item&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;PHP Basics&lt;/h2&gt;
&lt;p&gt;Variables:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?&lt;/span&gt; &lt;span class="nx"&gt;php&lt;/span&gt; 
&lt;span class="nv"&gt;$result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;Comments&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="sr"&gt;/ or ./&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="err"&gt;/.&lt;/span&gt;
&lt;span class="nx"&gt;Print&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;?&lt;/span&gt; &lt;span class="nx"&gt;php&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;that&amp;#39;s a print&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Functions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;?&lt;/span&gt; &lt;span class="nx"&gt;php&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;print_this&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Print this &amp;#39;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;$name&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;nice printing&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;extra_print&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;print_this&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;aaaaa&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;extra_print&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;?&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When a PHP file is accessed, all of its functions are initialized before any of the other lines of code are executed. As long as a function is defined in the same file, it can be called from anywhere within that file.&lt;/p&gt;
&lt;p&gt;The scope of a variable refers to the domain within which it can be referenced. In PHP, any variables initialized and contained within a function itself are only available within that function.&lt;/p&gt;
&lt;h3&gt;Arrays&lt;/h3&gt;
&lt;p&gt;Creating an empty array:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?&lt;/span&gt; &lt;span class="nx"&gt;php&lt;/span&gt; &lt;span class="nv"&gt;$new_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Adding elements:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?&lt;/span&gt; &lt;span class="nx"&gt;php&lt;/span&gt; &lt;span class="nv"&gt;$new_array&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$new_array&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Creating an array with values already:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?&lt;/span&gt; &lt;span class="nx"&gt;php&lt;/span&gt; &lt;span class="nv"&gt;$other_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In PHP, arrays are like dictionaries:. If you add item likes above, it will increment from 0. You can also give the key:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?&lt;/span&gt; &lt;span class="nx"&gt;php&lt;/span&gt; &lt;span class="nv"&gt;$dictionary&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dog&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;echo&lt;/span&gt; &lt;span class="nx"&gt;$dictionary&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dog&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Multi-arrays:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$cars = array
  (
  array(&amp;quot;Volvo&amp;quot;,22,18),
  array(&amp;quot;BMW&amp;quot;,15,13),
  array(&amp;quot;Saab&amp;quot;,5,2),
  array(&amp;quot;Land Rover&amp;quot;,17,15)
  );
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Loop foreach:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?&lt;/span&gt; &lt;span class="nx"&gt;php&lt;/span&gt;
&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$array_number&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$variable_representing_current_item&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Loop for:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?&lt;/span&gt;
&lt;span class="nv"&gt;$other_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="nv"&gt;$other_array&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;The Model-View-Controller Pattern (MVC)&lt;/h2&gt;
&lt;p&gt;In high level, the flow of a web app is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User request to view a certain page by typing a URL in the browser.&lt;/li&gt;
&lt;li&gt;The app determines what needs to be displayed.&lt;/li&gt;
&lt;li&gt;The data required for the page is requested and retrieved from the database.&lt;/li&gt;
&lt;li&gt;The resulting data is used to render the page's display to the user.&lt;/li&gt;
&lt;li&gt;The MVC structure is based on the presence of 3 main components: models, views, and controllers.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Models: Representing the Data Object&lt;/h3&gt;
&lt;p&gt;Responsible for communicating with the database. Composed of two parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fields: Responsible for representing the various pieces of data within an object (the information within the database).&lt;/li&gt;
&lt;li&gt;methods: Provide extra functionality within our models. Allow the manipulation of the model's initial information or perform additional actions related to the data.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Controllers: Workhorses&lt;/h3&gt;
&lt;p&gt;Determine what objects to retrieve and how to organize them.&lt;/p&gt;
&lt;p&gt;Handle user request, retrieve proper information, and pass it to the proper view.&lt;/p&gt;
&lt;p&gt;Different request are handled by different controller actions.&lt;/p&gt;
&lt;h3&gt;Views: What the User Sees&lt;/h3&gt;
&lt;p&gt;Responsible for the presentation layer, the actual visual display.&lt;/p&gt;
&lt;p&gt;Each individual page within a web app has its own view.
Views contain HTML code and PHP (if this is the backend language) to inject objects' information, passed to the view via a controller.&lt;/p&gt;
&lt;p&gt;A simplified version of Facebook profile view:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;personal_info&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; &lt;span class="c1"&gt;// some code ?&amp;gt; &amp;lt;/section&amp;gt; &amp;lt;section id=&amp;quot;photos&amp;quot;&amp;gt; &amp;lt;?php // some code ?&amp;gt; &amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Frameworks&lt;/h2&gt;
&lt;p&gt;The basis/foundation of your web app.&lt;/p&gt;
&lt;p&gt;For PHP, we can download CodeIgniter, rename to our project name, copy it to the /var/ww folder and open it in the localhost/folder. We can modify the files for our app now.&lt;/p&gt;
&lt;p&gt;If you get the 403 forbidden error, check the permissions and then type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;restorecon -r /var/www/html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(restorecon is used to reset the security context (type) (extended attributes) on one or more files).&lt;/p&gt;
&lt;p&gt;The use guide can be seen at 
&lt;code&gt;http://localhost/APP_NAME/user_guide/&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;CodeIgniter Basics&lt;/h3&gt;
&lt;p&gt;The system folder contains all of the inner-working.
The application folder is where all the code specific to our app will live, include models, controllers, and view.&lt;/p&gt;
&lt;p&gt;Controllers (&lt;code&gt;application/controllers/welcome.php&lt;/code&gt;)
The welcome class is inherent from the CI_Controller class.&lt;/p&gt;
&lt;p&gt;An index refers to a main/default location.
The index action is responsible for loading the view that renders the welcome message:
public function index() { $this-&amp;gt;load-&amp;gt;view('welcome_message'); }
In the case of controllers, each action is frequently associated with a URL.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;'welcomemessage'&lt;/code&gt; view is at &lt;code&gt;applications/views/welcomemessage.php&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Routes&lt;/h3&gt;
&lt;p&gt;The way that our web app knows where to direct our users, based on the URLs they enter, is by establishing routes. Routes are a mapping between URLs and specific controller actions.&lt;/p&gt;
&lt;p&gt;We can configure routes at &lt;code&gt;application/config/routes.php&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$route[&amp;#39;desired-url-fragment&amp;#39;] = &amp;quot;controller-name/action-name”;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Some routes work automatically: you can reference any controller action using the following URL format:
&lt;code&gt;http://localhost/APP_NAME/index.php/[controller-name]/[action-name]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For example:
&lt;code&gt;http://localhost/APP_NAME/index.php/welcome/index/&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Configuring our app to use the Database&lt;/h3&gt;
&lt;p&gt;CI has a built-in support for interacting with a database.
In our application, the database configuration file is store at application/config/database.php&lt;/p&gt;
&lt;p&gt;To connect our app to the MySQL database, update this file to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$db[&amp;#39;default&amp;#39;][&amp;#39;hostname&amp;#39;] = &amp;#39;localhost&amp;#39;;
$db[&amp;#39;default&amp;#39;][&amp;#39;username&amp;#39;] = &amp;#39;root&amp;#39;;
$db[&amp;#39;default&amp;#39;][&amp;#39;password&amp;#39;] = &amp;#39;&amp;lt;your-root-password&amp;gt;&amp;#39;;
$db[&amp;#39;default&amp;#39;][&amp;#39;database&amp;#39;] = &amp;#39;&amp;lt;database-name-from-before&amp;#39;;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To have access to the database functionality throughout the entire web app, auto-load the database library by changing the file &lt;code&gt;application/config/autoload.php&lt;/code&gt; with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$autoload[&amp;#39;libraries&amp;#39;] = array(&amp;#39;template&amp;#39;, &amp;#39;database&amp;#39;); $autoload[&amp;#39;libraries&amp;#39;] = array(&amp;#39;database&amp;#39;);
Check if the page is still working fine 
($autoload[&amp;#39;libraries&amp;#39;] = array(&amp;#39;template&amp;#39;, &amp;#39;database&amp;#39;); does not work yet).
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Models&lt;/h3&gt;
&lt;p&gt;Each model starts the same, as they intend to serve the same general function.&lt;/p&gt;
&lt;p&gt;We create a new file in application/models folder named todomodel.php with the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;?&lt;/span&gt;&lt;span class="nx"&gt;php&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nx"&gt;defined&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;BASEPATH&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;No direct script access allowed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Todomodel&lt;/span&gt; &lt;span class="kr"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;CIModel&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;_construct() {&lt;/span&gt;
&lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nx"&gt;_construct&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The second responsibility of models is to interact with our database. We need to implement a way for our todomodel to retrieve all of the todos in our database. We add a getallentries function bellow the constructor:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;get_all_entries() {&lt;/span&gt; &lt;span class="c1"&gt;//$query = $this-&amp;gt;db-&amp;gt;get(&amp;#39;todos&amp;#39;); $query = $this-&amp;gt;db-&amp;gt;order_by(&amp;#39;order&amp;#39;,&amp;#39;ASC&amp;#39;)-&amp;gt;get(&amp;#39;todos&amp;#39;); $results = array(); foreach ($query-&amp;gt;result() as $result) { $results[] = $result; } return $results; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this snippet we query our database by order, using ascending order.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Enjoy! This article was originally posted &lt;a href="https://coderwall.com/p/5ltrxq/lamp-and-codeigniter"&gt;here&lt;/a&gt;.&lt;/p&gt;</content></entry><entry><title>JavaScript: Crash Course</title><link href="http://bt3gl.github.io/javascript-crash-course.html" rel="alternate"></link><published>2015-02-15T00:00:00-05:00</published><updated>2015-02-15T00:00:00-05:00</updated><author><name>Marina von Steinkirch</name></author><id>tag:bt3gl.github.io,2015-02-15:/javascript-crash-course.html</id><summary type="html">&lt;h1&gt;Installing &amp;amp; Setting up&lt;/h1&gt;
&lt;p&gt;JavaScript (JS) is a dynamic computer programming language. Install &lt;a href="https://developer.chrome.com/devtools/index"&gt;Google Dev Tools&lt;/a&gt; to proceed. &lt;/p&gt;
&lt;h1&gt;JavaScript 101&lt;/h1&gt;
&lt;p&gt;To include your example.js in an HTML page (usually placed right before &lt;/body&gt; will guarantee that elements are defined when the script is executed):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/path/to/example.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h1&gt;Installing &amp;amp; Setting up&lt;/h1&gt;
&lt;p&gt;JavaScript (JS) is a dynamic computer programming language. Install &lt;a href="https://developer.chrome.com/devtools/index"&gt;Google Dev Tools&lt;/a&gt; to proceed. &lt;/p&gt;
&lt;h1&gt;JavaScript 101&lt;/h1&gt;
&lt;p&gt;To include your example.js in an HTML page (usually placed right before &lt;/body&gt; will guarantee that elements are defined when the script is executed):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/path/to/example.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Variables can be defined using multiple var statements, or in a single combined var statement. The value of a variable declared without a value is undefined.&lt;/p&gt;
&lt;h2&gt;Types in JavaScript&lt;/h2&gt;
&lt;h3&gt;Primitive:&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- String
- Number
- Boolean
- null (represent the absence of a value, similar to many other programming languages)
- undefined (represent a state in which no value has been assigned at all)
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Objects:&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// Creating an object with the constructor:
var person1 = new Object;

person1.firstName = &amp;quot;John&amp;quot;;
person1.lastName = &amp;quot;Doe&amp;quot;;

alert( person1.firstName + &amp;quot; &amp;quot; + person1.lastName );
// Creating an object with the object literal syntax:
var person2 = {
    firstName: &amp;quot;Jane&amp;quot;,
    lastName: &amp;quot;Doe&amp;quot;
};

alert( person2.firstName + &amp;quot; &amp;quot; + person2.lastName );
Array

// Creating an array with the constructor:
var foo = new Array;
// Creating an array with the array literal syntax:
var bar = [];
If/Else

var foo = true;
var bar = false;

if ( bar ) {
    // This code will never run.
    console.log( &amp;quot;hello!&amp;quot; );
}

if ( bar ) {

    // This code won&amp;#39;t run.

} else {

    if ( foo ) {
        // This code will run.
    } else {
        // This code would run if foo and bar were both false.
    }

}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Flow Control&lt;/h3&gt;
&lt;h4&gt;switch&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;switch ( foo ) {

    case &amp;quot;bar&amp;quot;:
        alert( &amp;quot;the value was bar -- yay!&amp;quot; );
        break;

    case &amp;quot;baz&amp;quot;:
        alert( &amp;quot;boo baz :(&amp;quot; );
        break;

    default:
        alert( &amp;quot;everything else is just ok&amp;quot; );

}
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;for&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for ( var i = 0; i &amp;lt; 5; i++ ) {
    // Logs &amp;quot;try 0&amp;quot;, &amp;quot;try 1&amp;quot;, ..., &amp;quot;try 4&amp;quot;.
    console.log( &amp;quot;try &amp;quot; + i );
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;while&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var i = 0;
while ( i &amp;lt; 100 ) {
    // This block will be executed 100 times.
    console.log( &amp;quot;Currently at &amp;quot; + i );
    i++; // Increment i
}
or

var i = -1;
while ( ++i &amp;lt; 100 ) {
    // This block will be executed 100 times.
    console.log( &amp;quot;Currently at &amp;quot; + i );
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;do-while&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;do {
    // Even though the condition evaluates to false
    // this loop&amp;#39;s body will still execute once.
    alert( &amp;quot;Hi there!&amp;quot; );

} while ( false );
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Ternary Operator&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// Set foo to 1 if bar is true; otherwise, set foo to 0:
var foo = bar ? 1 : 0;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Arrays&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;.length&lt;/span&gt;

&lt;span class="nf"&gt;var&lt;/span&gt; &lt;span class="no"&gt;myArray&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="no"&gt;hello&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="no"&gt;world&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="c"&gt;;&lt;/span&gt;

&lt;span class="nf"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="no"&gt;var&lt;/span&gt; &lt;span class="no"&gt;i&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="c"&gt;; i &amp;lt; myArray.length; i = i + 1 ) {&lt;/span&gt;

    &lt;span class="nf"&gt;console.log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="no"&gt;myArray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="no"&gt;i&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c"&gt;;&lt;/span&gt;

&lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="na"&gt;.concat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nf"&gt;var&lt;/span&gt; &lt;span class="no"&gt;myArray&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="c"&gt;;&lt;/span&gt;
&lt;span class="no"&gt;var&lt;/span&gt; &lt;span class="no"&gt;myOtherArray&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="c"&gt;;&lt;/span&gt;
&lt;span class="no"&gt;var&lt;/span&gt; &lt;span class="no"&gt;wholeArray&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="no"&gt;myArray.concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="no"&gt;myOtherArray&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c"&gt;;&lt;/span&gt;
&lt;span class="no"&gt;.join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

 &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="nf"&gt;Joining&lt;/span&gt; &lt;span class="no"&gt;elements&lt;/span&gt;

&lt;span class="nf"&gt;var&lt;/span&gt; &lt;span class="no"&gt;myArray&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="no"&gt;hello&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="no"&gt;world&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="c"&gt;;&lt;/span&gt;

&lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="nf"&gt;The&lt;/span&gt; &lt;span class="no"&gt;default&lt;/span&gt; &lt;span class="no"&gt;separator&lt;/span&gt; &lt;span class="no"&gt;is&lt;/span&gt; &lt;span class="no"&gt;a&lt;/span&gt; &lt;span class="no"&gt;comma.&lt;/span&gt;
&lt;span class="nf"&gt;console.log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="no"&gt;myArray.join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c"&gt;;     // &amp;quot;hello,world,!&amp;quot;&lt;/span&gt;

&lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="nf"&gt;Any&lt;/span&gt; &lt;span class="no"&gt;string&lt;/span&gt; &lt;span class="no"&gt;can&lt;/span&gt; &lt;span class="no"&gt;be&lt;/span&gt; &lt;span class="no"&gt;used&lt;/span&gt; &lt;span class="no"&gt;as&lt;/span&gt; &lt;span class="no"&gt;separator...&lt;/span&gt;
&lt;span class="nf"&gt;console.log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="no"&gt;myArray.join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c"&gt;;  // &amp;quot;hello world !&amp;quot;;&lt;/span&gt;
&lt;span class="no"&gt;console.log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="no"&gt;myArray.join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;!!&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c"&gt;; // &amp;quot;hello!!world!!!&amp;quot;;&lt;/span&gt;

&lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="na"&gt;...including&lt;/span&gt; &lt;span class="no"&gt;an&lt;/span&gt; &lt;span class="no"&gt;empty&lt;/span&gt; &lt;span class="no"&gt;one.&lt;/span&gt;
&lt;span class="nf"&gt;console.log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="no"&gt;myArray.join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c"&gt;;&lt;/span&gt;
&lt;span class="no"&gt;.pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="no"&gt;and&lt;/span&gt; &lt;span class="no"&gt;.push&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Remove or add last element&lt;/h4&gt;
&lt;p&gt;Extracts a part of the array and returns that part in a new array. This method takes one parameter, which is the starting index:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;.reverse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nf"&gt;var&lt;/span&gt; &lt;span class="no"&gt;myArray&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="no"&gt;world&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="no"&gt;hello&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="c"&gt;;&lt;/span&gt;
&lt;span class="no"&gt;myArray.reverse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="c"&gt;; // [ &amp;quot;hello&amp;quot;, &amp;quot;world&amp;quot; ]&lt;/span&gt;
&lt;span class="no"&gt;.shift&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nf"&gt;var&lt;/span&gt; &lt;span class="no"&gt;myArray&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="c"&gt;;&lt;/span&gt;

&lt;span class="nf"&gt;myArray.push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c"&gt;; // [ 0 ]&lt;/span&gt;
&lt;span class="no"&gt;myArray.push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c"&gt;; // [ 0 , 2 ]&lt;/span&gt;
&lt;span class="no"&gt;myArray.push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c"&gt;; // [ 0 , 2 , 7 ]&lt;/span&gt;
&lt;span class="no"&gt;myArray.shift&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="c"&gt;;   // [ 2 , 7 ]&lt;/span&gt;
&lt;span class="no"&gt;.slice&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Remove a certain amount of elements&lt;/h4&gt;
&lt;p&gt;Abd adds new ones at the given index. It takes at least three parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Index – The starting index.&lt;/li&gt;
&lt;li&gt;Length – The number of elements to remove.&lt;/li&gt;
&lt;li&gt;Values – The values to be inserted at the index position.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var myArray = [ 0, 7, 8, 5 ];
myArray.splice( 1, 2, 1, 2, 3, 4 );
console.log( myArray ); // [ 0, 1, 2, 3, 4, 5 ]
.sort()
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Sorts an array&lt;/h4&gt;
&lt;p&gt;It takes one parameter, which is a comparing function. If this function is not given, the array is sorted ascending:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Sorting with comparing function.&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;descending&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;myArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;descending&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [ 6, 4, 3, 1 ]&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unshift&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Inserts an element at the first position of the array&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;printElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;elem&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;elem&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;printElementAndIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Index &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;elem&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;negateElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;myArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// Prints all elements to the consolez&lt;/span&gt;
&lt;span class="nx"&gt;myArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;printElement&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Prints &amp;quot;Index 0: 1&amp;quot;, &amp;quot;Index 1: 2&amp;quot;, &amp;quot;Index 2: 3&amp;quot;, ...&lt;/span&gt;
&lt;span class="nx"&gt;myArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;printElementAndIndex&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// myArray is now [ -1, -2, -3, -4, -5 ]&lt;/span&gt;
&lt;span class="nx"&gt;myArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;negateElement&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Strings&lt;/h3&gt;
&lt;p&gt;Strings are a primitive and an object in JavaScript.&lt;/p&gt;
&lt;p&gt;Some methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;length&lt;/li&gt;
&lt;li&gt;charAt()&lt;/li&gt;
&lt;li&gt;indexOf()&lt;/li&gt;
&lt;li&gt;substring()&lt;/li&gt;
&lt;li&gt;split()&lt;/li&gt;
&lt;li&gt;toLowerCase&lt;/li&gt;
&lt;li&gt;replace&lt;/li&gt;
&lt;li&gt;slice&lt;/li&gt;
&lt;li&gt;lastIndexOf&lt;/li&gt;
&lt;li&gt;concat&lt;/li&gt;
&lt;li&gt;trim&lt;/li&gt;
&lt;li&gt;toUpperCase&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Objects&lt;/h3&gt;
&lt;p&gt;Nearly everything in JavaScript is an object – arrays, functions, numbers, even strings - and they all have properties and methods.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var myObject = {
    sayHello: function() {
        console.log( &amp;quot;hello&amp;quot; );
    },
    myName: &amp;quot;Rebecca&amp;quot;
};

myObject.sayHello(); // &amp;quot;hello&amp;quot;

console.log( myObject.myName ); // &amp;quot;Rebecca&amp;quot;
The key can be any valid identifier:

var myObject = {
    validIdentifier: 123,
    &amp;quot;some string&amp;quot;: 456,
    99999: 789
};
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Functions&lt;/h3&gt;
&lt;p&gt;Can be created in many ways:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Named function expression.&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;     &lt;span class="o"&gt;----&amp;gt;&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;expression&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;load&lt;/span&gt; &lt;span class="nx"&gt;later&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// Do something.&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo() {&lt;/span&gt;        &lt;span class="o"&gt;----&amp;gt;&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;declaration&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;load&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// Do something.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;If&lt;/span&gt; &lt;span class="nx"&gt;you&lt;/span&gt; &lt;span class="kr"&gt;declare&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;local&lt;/span&gt; &lt;span class="nx"&gt;variable&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;forget&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;use&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;keyword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="nx"&gt;variable&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;automatically&lt;/span&gt; &lt;span class="nx"&gt;made&lt;/span&gt; &lt;span class="nx"&gt;global&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="nx"&gt;Immediately&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Invoked&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt; &lt;span class="nx"&gt;Expression&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// undefined!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Events&lt;/h3&gt;
&lt;p&gt;JavaScript lets you execute code when events are detected.&lt;/p&gt;
&lt;p&gt;Example of code to change a source image:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;windows&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;docuemnt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GetEventById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;example&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;example.jpg&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Methods for events:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;click&lt;/li&gt;
&lt;li&gt;resize&lt;/li&gt;
&lt;li&gt;play&lt;/li&gt;
&lt;li&gt;pause&lt;/li&gt;
&lt;li&gt;load&lt;/li&gt;
&lt;li&gt;unload&lt;/li&gt;
&lt;li&gt;dragstart&lt;/li&gt;
&lt;li&gt;drop&lt;/li&gt;
&lt;li&gt;mousemove&lt;/li&gt;
&lt;li&gt;mousedown&lt;/li&gt;
&lt;li&gt;keypress&lt;/li&gt;
&lt;li&gt;mouseout&lt;/li&gt;
&lt;li&gt;touchstart&lt;/li&gt;
&lt;li&gt;touchend&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Closure&lt;/h3&gt;
&lt;p&gt;Closure is one of the main proprieties of JavaScript.&lt;/p&gt;
&lt;p&gt;Example of closure for a counter. Normally we would have the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; var count = 0;
 function counter(){
     count += 1;
     return count
}
console.log(counter());     --&amp;gt; print 1
console.log(counter());     --&amp;gt; print 2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, in JS we can enclose our counter inside an environment. This is useful for large codes, with multiple collaborations, for example, where we might use count variables more than once:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;makeCounter&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
      &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="o"&gt;----&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;closure&lt;/span&gt; &lt;span class="nx"&gt;holds&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Prototypes&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;species&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;canine&amp;quot;&lt;/span&gt;
&lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bark&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;jQuery&lt;/h3&gt;
&lt;p&gt;Type Checking with jQuery:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// Checking the type of an arbitrary value.

var myValue = [ 1, 2, 3 ];

// Using JavaScript&amp;#39;s typeof operator to test for primitive types:
typeof myValue === &amp;quot;string&amp;quot;; // false
typeof myValue === &amp;quot;number&amp;quot;; // false
typeof myValue === &amp;quot;undefined&amp;quot;; // false
typeof myValue === &amp;quot;boolean&amp;quot;; // false

// Using strict equality operator to check for null:
myValue === null; // false

// Using jQuery&amp;#39;s methods to check for non-primitive types:
jQuery.isFunction( myValue ); // false
jQuery.isPlainObject( myValue ); // false
jQuery.isArray( myValue ); // true
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;p&gt;Enjoy! This article was originally posted &lt;a href="https://coderwall.com/p/skucrq/javascript-crash-course"&gt;here&lt;/a&gt;.&lt;/p&gt;</content></entry></feed>