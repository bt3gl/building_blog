<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>chmod +x singularity.sh - web, js</title><link href="http://bt3gl.github.io/" rel="alternate"></link><link href="http://bt3gl.github.io/feeds/web-js.atom.xml" rel="self"></link><id>http://bt3gl.github.io/</id><updated>2018-06-24T00:00:00-04:00</updated><entry><title>Introducing iOS ARKit with "Post Malone Balloon"</title><link href="http://bt3gl.github.io/introducing-ios-arkit-with-post-malone-balloon.html" rel="alternate"></link><published>2018-06-24T00:00:00-04:00</published><updated>2018-06-24T00:00:00-04:00</updated><author><name>Marina von Steinkirch</name></author><id>tag:bt3gl.github.io,2018-06-24:/introducing-ios-arkit-with-post-malone-balloon.html</id><summary type="html">&lt;p&gt;&lt;img alt="cyberpunk" height="300px" src="./cyberpunk/post_1.jpg" width="400px"&gt;&lt;/p&gt;
&lt;p&gt;Hi Everyone!&lt;/p&gt;
&lt;p&gt;I am starting a series of posts where &lt;strong&gt;&lt;em&gt;I go deep into AR &amp;amp; VR through fun examples&lt;/em&gt;&lt;/strong&gt; and I'd love you to join me!&lt;/p&gt;
&lt;p&gt;Today I am going to show how neat is to write an AR iOS application with &lt;a href="https://developer.apple.com/arkit/"&gt;ARKit&lt;/a&gt;. We are going to dive into a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="cyberpunk" height="300px" src="./cyberpunk/post_1.jpg" width="400px"&gt;&lt;/p&gt;
&lt;p&gt;Hi Everyone!&lt;/p&gt;
&lt;p&gt;I am starting a series of posts where &lt;strong&gt;&lt;em&gt;I go deep into AR &amp;amp; VR through fun examples&lt;/em&gt;&lt;/strong&gt; and I'd love you to join me!&lt;/p&gt;
&lt;p&gt;Today I am going to show how neat is to write an AR iOS application with &lt;a href="https://developer.apple.com/arkit/"&gt;ARKit&lt;/a&gt;. We are going to dive into a simple but fun &lt;a href="https://github.com/bt3gl/AR_PostMalone"&gt;App where you can insert Post Malone balloons&lt;/a&gt; into your reality.&lt;/p&gt;
&lt;p&gt;Before everything, I recommend you to watch &lt;a href="https://developer.apple.com/videos/play/wwdc2017/602/"&gt;WWDC 2017's 'Introducing ARKit: Augmented Reality for iOS'&lt;/a&gt;. It gives a nice overview of ARKit's capabilities.&lt;/p&gt;
&lt;h2&gt;The source code for AR_PostMalone the following structure:&lt;/h2&gt;
&lt;h2&gt;&lt;code&gt;Info.plist&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;An information property list file is a XML file that contains essential configuration information for a bundled executable. Example of the information you want to add is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The name of your app (&lt;code&gt;&amp;lt;string&amp;gt;PostMaloneBalloon&amp;lt;/string&amp;gt;&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Camera usage (&lt;code&gt;&amp;lt;key&amp;gt;NSCameraUsageDescription&amp;lt;/key&amp;gt;&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Frameworks you need (&lt;code&gt;&amp;lt;key&amp;gt;UIRequiredDeviceCapabilities&amp;lt;/key&amp;gt;&lt;/code&gt; with &lt;code&gt;&amp;lt;string&amp;gt;armv7&amp;lt;/string&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;string&amp;gt;arkit&amp;lt;/string&amp;gt;&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;code&gt;Assets.xcassets&lt;/code&gt; directory&lt;/h2&gt;
&lt;p&gt;This is where you place assets such as the images used in your App (Post Malone head) and icons. A file &lt;code&gt;Content.json&lt;/code&gt; is placed inside every directory to describe the assets.&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;Base.lproj&lt;/code&gt; directory&lt;/h2&gt;
&lt;p&gt;Contains two &lt;a href="https://www.raywenderlich.com/160521/storyboards-tutorial-ios-11-part-1"&gt;story board files&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LaunchScreen.storyboard&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Main.storyboard&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;code&gt;Scene.swift&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;This module is where you call the class &lt;code&gt;Scene&lt;/code&gt; to control what how the App is operating with the scene. Here we are explicitly using &lt;a href="https://developer.apple.com/arkit/"&gt;ARKit&lt;/a&gt; and &lt;a href="https://developer.apple.com/documentation/spriteKit"&gt;SpriteKit&lt;/a&gt;. Rendering brings tracking and scene understanding together with your content.&lt;/p&gt;
&lt;p&gt;For our App, we are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Defining the method &lt;code&gt;touchesBegan&lt;/code&gt;, where we define what happens when we click the scene.&lt;/li&gt;
&lt;li&gt;The sequence of movements is defined by &lt;code&gt;let sequence = SKAction.sequence([popSound, moveDown, moveDownFloating, moveToBottom])&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;When you touch the scene, a Post Malone Balloon head appears and starts to behave as a balloon (&lt;code&gt;moveDownFloating = ((arc4random() % 2)==0) ? moveLeftDown : moveRightDown&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;The balloon either pops (&lt;code&gt;let popSound = SKAction.playSoundFileNamed("pop", waitForCompletion: false)&lt;/code&gt;) or fades after a second (&lt;code&gt;fadeOut = SKAction.fadeOut(withDuration: 1.0)&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;code&gt;ViewController.swift&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The ViewController class inherents from &lt;code&gt;ARSKViewDelegate&lt;/code&gt; so that we can create a &lt;code&gt;sceneView&lt;/code&gt; variable. This class has methods for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Views&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scaling and placing the view.&lt;/li&gt;
&lt;li&gt;View when it loads (and load the pre-defined scene from &lt;a href="https://developer.apple.com/documentation/spritekit/skscene"&gt;SKScene&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;View to appear and disappear.&lt;/li&gt;
&lt;li&gt;Run.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sessions&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Session interrupted.&lt;/li&gt;
&lt;li&gt;Session ended.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;code&gt;AppDelegate.swift&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;This is where we call the class &lt;code&gt;AppDelegate&lt;/code&gt;, which responds for &lt;code&gt;UIApplicationMain&lt;/code&gt;. In this class we create a variable that will work as the window UI and we have UI methods for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;See if the application is about to move from active to inactive state (for example, pause ongoing tasks).&lt;/li&gt;
&lt;li&gt;Release shared resources and  save user data.&lt;/li&gt;
&lt;li&gt;Change from the background to the active state.&lt;/li&gt;
&lt;li&gt;Restart any tasks that were paused while the application was inactive.&lt;/li&gt;
&lt;li&gt;Termination actions for when the application is about to terminate (for example, to save data if appropriate).&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt; Thank you for reading and see you in the next episode! &amp;lt;3&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</content></entry><entry><title>Getting Started with React Development in 5 Minutes</title><link href="http://bt3gl.github.io/getting-started-with-react-development-in-5-minutes.html" rel="alternate"></link><published>2018-06-01T00:00:00-04:00</published><updated>2018-06-01T00:00:00-04:00</updated><author><name>Marina von Steinkirch</name></author><id>tag:bt3gl.github.io,2018-06-01:/getting-started-with-react-development-in-5-minutes.html</id><summary type="html">&lt;p&gt;&lt;img alt="cyberpunk" height="300px" src="./cyberpunk/5.jpg" width="400px"&gt;&lt;/p&gt;
&lt;p&gt;Hey Everyone!&lt;/p&gt;
&lt;p&gt;The VR world is about a lot of &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; and there is so many things I have been learning and I want to share with you! I am starting to write a series of posts diving into React and I am dumping all the things in &lt;a href="https://github.com/bt3gl/Everything_React"&gt;this github …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="cyberpunk" height="300px" src="./cyberpunk/5.jpg" width="400px"&gt;&lt;/p&gt;
&lt;p&gt;Hey Everyone!&lt;/p&gt;
&lt;p&gt;The VR world is about a lot of &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; and there is so many things I have been learning and I want to share with you! I am starting to write a series of posts diving into React and I am dumping all the things in &lt;a href="https://github.com/bt3gl/Everything_React"&gt;this github repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Today I am showing how easy is to start with react in 5 minutes.&lt;/p&gt;
&lt;h3&gt;What's React?&lt;/h3&gt;
&lt;p&gt;From &lt;a href="https://reactjs.org/tutorial/tutorial.html#what-is-react"&gt;React's documentation&lt;/a&gt;: &lt;strong&gt;"React is a declarative, efficient, and flexible JavaScript library for building user interfaces. It lets you compose complex UIs from small and isolated pieces of code called “components”.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Starting with &lt;code&gt;React.Component&lt;/code&gt;, the &lt;code&gt;render&lt;/code&gt; method returns a description of what you want to see on the screen, returning a &lt;code&gt;React element&lt;/code&gt;, which is a lightweight description of what to render.&lt;/p&gt;
&lt;p&gt;For instance, React developers use a syntax called &lt;code&gt;JSX&lt;/code&gt; which makes these structures easier. For example,  the &lt;code&gt;&amp;lt;div /&amp;gt;&lt;/code&gt; syntax is transformed at build time to &lt;code&gt;React.createElement('div')&lt;/code&gt;. You can put any JavaScript expressions within braces inside JSX!&lt;/p&gt;
&lt;h3&gt;OK, Just Show me React Already!&lt;/h3&gt;
&lt;p&gt;OK!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install Node.js and Yarn.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ brew install node
$ brew install yarn
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install &lt;a href="https://github.com/facebook/create-react-app"&gt;create-react-app&lt;/a&gt;. This awesome framework abstracts away all the complexity of implementing &lt;a href="https://webpack.js.org/"&gt;Webpack&lt;/a&gt;, &lt;a href="https://babeljs.io/"&gt;Babel&lt;/a&gt;, a dev server, a production build process, and other critical things.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create Your App&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ yarn create react-app &amp;lt;your-app-name&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Run it!&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; &amp;lt;your-app-name&amp;gt;
$ yarn start
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Edit &lt;code&gt;src/App.js&lt;/code&gt; and see it being update instantly in your browser at &lt;code&gt;http://localhost:3000/&lt;/code&gt;. The directory structure is the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;node_modules&lt;/code&gt;: holds all the third-party code, such as React.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public&lt;/code&gt;: where our static assets go, like our favicon. It also keeps the project's HTML file. Because React is all JavaScript, you only really need the HTML file to update the &lt;head&gt; (title and meta tags).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;src&lt;/code&gt; is where our application actually lives. I’d recommend exploring all these files, to get a sense of how they work together.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Voilà! Dat's it? Yes, datzit! &amp;lt;3&lt;/h3&gt;
&lt;h2&gt;References to get Started&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/tutorial/tutorial.html"&gt;React Tutorial&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fullstackreact.com/30-days-of-react/"&gt;30 Days of React&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.robinwieruch.de/the-road-to-learn-react/."&gt;The Road to Learn React&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Test it at home and stay tunned for the next episode! 🦄&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</content></entry></feed>