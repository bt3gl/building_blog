<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>chmod +x singularity.sh - pdftotext</title><link href="http://bt3gl.github.io/" rel="alternate"></link><link href="http://bt3gl.github.io/feeds/pdftotext.atom.xml" rel="self"></link><id>http://bt3gl.github.io/</id><updated>2014-09-22T07:20:00-04:00</updated><entry><title>CSAW CTF 2014 - Forensics 200: "Obscurity"</title><link href="http://bt3gl.github.io/csaw-ctf-2014-forensics-200-obscurity.html" rel="alternate"></link><published>2014-09-22T07:20:00-04:00</published><updated>2014-09-22T07:20:00-04:00</updated><author><name>Marina von Steinkirch</name></author><id>tag:bt3gl.github.io,2014-09-22:/csaw-ctf-2014-forensics-200-obscurity.html</id><summary type="html">&lt;p&gt;The third forensics challenge starts with the following text:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;see or do not see&lt;/p&gt;
&lt;p&gt;Written by marc&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ctf.isis.poly.edu/static/uploads/883c7046854e04138c55680ffde90a61/pdf.pdf"&gt;pdf.pdf&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hacking PDFs, what fun!&lt;/p&gt;
&lt;p&gt;In general, when dealing with reverse-engineering malicious documents, we follow these steps:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; 1. We search for malicious embedded code (shell code, JavaScript).

 2. We extract any suspicious â€¦&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;The third forensics challenge starts with the following text:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;see or do not see&lt;/p&gt;
&lt;p&gt;Written by marc&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ctf.isis.poly.edu/static/uploads/883c7046854e04138c55680ffde90a61/pdf.pdf"&gt;pdf.pdf&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hacking PDFs, what fun!&lt;/p&gt;
&lt;p&gt;In general, when dealing with reverse-engineering malicious documents, we follow these steps:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; 1. We search for malicious embedded code (shell code, JavaScript).

 2. We extract any suspicious code segments

 3. If we see shell code, we disassemble or debug it. If we see JavaScript (or ActionScript or VB macro code), we try to examine it.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, this problem turned out to be very simple...&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Finding the Flag in 10 Seconds&lt;/h2&gt;
&lt;p&gt;Yeap, this easy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1. Download the PDF file.

2. Open it in any PDF viewer.

3. CTRL+A (select all the contend).

4. You see the flag!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="http://i.imgur.com/b03EehK.png"&gt;&lt;/p&gt;
&lt;p&gt;OK, we were luck. Keep reading if you think this was too easy.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Analyzing the ID and the Streams in a PDF File&lt;/h2&gt;
&lt;p&gt;Let's suppose we had no clue that the flag would just be a text in the file. In this case, we would want to examine the file's structure. For this task we use the &lt;a href="http://blog.didierstevens.com/programs/pdf-tools/"&gt;PDF Tool&lt;/a&gt; suite, which is written in Python.&lt;/p&gt;
&lt;h4&gt;pdfid&lt;/h4&gt;
&lt;p&gt;We start with &lt;em&gt;pdfid.py&lt;/em&gt;, which parses the PDF  looking for certain  keywords. We download and unzip that script, and then we make it an executable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ unzip pdfid_v0_1_2.zip
$ chmod a+x pdfid.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Running over our file gives:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./pdfid.py pdf.pdf
PDFiD &lt;span class="m"&gt;0&lt;/span&gt;.1.2 pdf.pdf
 PDF Header: %PDF-1.3
 obj                   &lt;span class="m"&gt;20&lt;/span&gt;
 endobj                &lt;span class="m"&gt;19&lt;/span&gt;
 stream                &lt;span class="m"&gt;10&lt;/span&gt;
 endstream             &lt;span class="m"&gt;10&lt;/span&gt;
 xref                   &lt;span class="m"&gt;1&lt;/span&gt;
 trailer                &lt;span class="m"&gt;1&lt;/span&gt;
 startxref              &lt;span class="m"&gt;1&lt;/span&gt;
 /Page                  &lt;span class="m"&gt;1&lt;/span&gt;
 /Encrypt               &lt;span class="m"&gt;0&lt;/span&gt;
 /ObjStm                &lt;span class="m"&gt;0&lt;/span&gt;
 /JS                    &lt;span class="m"&gt;0&lt;/span&gt;
 /JavaScript            &lt;span class="m"&gt;0&lt;/span&gt;
 /AA                    &lt;span class="m"&gt;0&lt;/span&gt;
 /OpenAction            &lt;span class="m"&gt;0&lt;/span&gt;
 /AcroForm              &lt;span class="m"&gt;0&lt;/span&gt;
 /JBIG2Decode           &lt;span class="m"&gt;0&lt;/span&gt;
 /RichMedia             &lt;span class="m"&gt;0&lt;/span&gt;
 /Launch                &lt;span class="m"&gt;0&lt;/span&gt;
 /EmbeddedFile          &lt;span class="m"&gt;0&lt;/span&gt;
 /XFA                   &lt;span class="m"&gt;0&lt;/span&gt;
 /Colors &amp;gt; &lt;span class="m"&gt;2&lt;/span&gt;^24         &lt;span class="m"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All right, no funny stuff going on here. We need to look deeper into each of the these streams.&lt;/p&gt;
&lt;h4&gt;pdf-parser&lt;/h4&gt;
&lt;p&gt;We download &lt;em&gt;pdf-parser.py&lt;/em&gt;, which is used to search for all the fundamental elements in a PDF file. Let's take a closer look:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ unzip pdf-parser_V0_4_3.zip
$ chmod a+x pdf-parser.py
$ ./pdf-parser.py
Usage: pdf-parser.py &lt;span class="o"&gt;[&lt;/span&gt;options&lt;span class="o"&gt;]&lt;/span&gt; pdf-file&lt;span class="p"&gt;|&lt;/span&gt;zip-file&lt;span class="p"&gt;|&lt;/span&gt;url
pdf-parser, use it to parse a PDF document

Options:
  --version             show program&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s version number and &lt;span class="nb"&gt;exit&lt;/span&gt;
  -s SEARCH, --search&lt;span class="o"&gt;=&lt;/span&gt;SEARCH
                        string to search in indirect objects &lt;span class="o"&gt;(&lt;/span&gt;except streams&lt;span class="o"&gt;)&lt;/span&gt;
  -f, --filter          pass stream object through filters &lt;span class="o"&gt;(&lt;/span&gt;FlateDecode,
                        ASCIIHexDecode, ASCII85Decode, LZWDecode and
                        RunLengthDecode only&lt;span class="o"&gt;)&lt;/span&gt;
  -o OBJECT, --object&lt;span class="o"&gt;=&lt;/span&gt;OBJECT
                        id of indirect object to &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;version independent&lt;span class="o"&gt;)&lt;/span&gt;
  -r REFERENCE, --reference&lt;span class="o"&gt;=&lt;/span&gt;REFERENCE
                        id of indirect object being referenced &lt;span class="o"&gt;(&lt;/span&gt;version
                        independent&lt;span class="o"&gt;)&lt;/span&gt;
  -e ELEMENTS, --elements&lt;span class="o"&gt;=&lt;/span&gt;ELEMENTS
                        &lt;span class="nb"&gt;type&lt;/span&gt; of elements to &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;cxtsi&lt;span class="o"&gt;)&lt;/span&gt;
  -w, --raw             raw output &lt;span class="k"&gt;for&lt;/span&gt; data and filters
  -a, --stats           display stats &lt;span class="k"&gt;for&lt;/span&gt; pdf document
  -t TYPE, --type&lt;span class="o"&gt;=&lt;/span&gt;TYPE  &lt;span class="nb"&gt;type&lt;/span&gt; of indirect object to &lt;span class="k"&gt;select&lt;/span&gt;
  -v, --verbose         display malformed PDF elements
  -x EXTRACT, --extract&lt;span class="o"&gt;=&lt;/span&gt;EXTRACT
                        filename to extract malformed content to
  -H, --hash            display &lt;span class="nb"&gt;hash&lt;/span&gt; of objects
  -n, --nocanonicalizedoutput
                        &lt;span class="k"&gt;do&lt;/span&gt; not canonicalize the output
  -d DUMP, --dump&lt;span class="o"&gt;=&lt;/span&gt;DUMP  filename to dump stream content to
  -D, --debug           display debug info
  -c, --content         display the content &lt;span class="k"&gt;for&lt;/span&gt; objects without streams or
                        with streams without filters
  --searchstream&lt;span class="o"&gt;=&lt;/span&gt;SEARCHSTREAM
                        string to search in streams
  --unfiltered          search in unfiltered streams
  --casesensitive       &lt;span class="k"&gt;case&lt;/span&gt; sensitive search in streams
  --regex               use regex to search in streams
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Very interesting! We run it with our file, searching for the string &lt;em&gt;/ProcSet&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./pdf-parser.py  pdf.pdf &lt;span class="p"&gt;|&lt;/span&gt; grep  /ProcSet
        /ProcSet &lt;span class="o"&gt;[&lt;/span&gt; /ImageC /Text /PDF /ImageI /ImageB &lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Awesome! Even though we don't see any text in the file (when we opened it in the PDF viewer), there is text somewhere!&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Getting Text from PDF&lt;/h2&gt;
&lt;p&gt;A good way to extract text from a pdf is using &lt;a href="http://en.wikipedia.org/wiki/Pdftotext"&gt;pdftotext&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pdftotext pdf.pdf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should get a &lt;code&gt;pdf.txt&lt;/code&gt; file. Reading it with Linux's commands &lt;code&gt;cat&lt;/code&gt; or &lt;code&gt;strings&lt;/code&gt;gives you the flag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ strings pdf.txt
flag&lt;span class="o"&gt;{&lt;/span&gt;security_through_obscurity&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As a note, there are several other PDF forensics tools that are worth to be mentioned: &lt;a href="http://esec-lab.sogeti.com/pages/Origami"&gt;Origami&lt;/a&gt; (pdfextract extracts JavaScript from PDF files), &lt;a href="http://blog.zeltser.com/post/3235995383/pdf-stream-dumper-malicious-file-analysis"&gt;PDF Stream Dumper&lt;/a&gt; (several PDF analysis tools), &lt;a href="http://blog.zeltser.com/post/6780160077/peepdf-malicious-pdf-analysis"&gt;Peepdf&lt;/a&gt; (command-line shell for examining PDF), &lt;a href="https://github.com/9b/pdfxray_lite"&gt;PDF X-RAY Lite&lt;/a&gt; (creates an HTML report with decoded file structure and contents), &lt;a href="http://blog.zeltser.com/post/12615013257/extracting-swf-from-pdf-using-swf-mastah"&gt;SWF mastah&lt;/a&gt; (extracts SWF objects), &lt;a href="for examining and decoding structure and content of PDF files"&gt;Pyew&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hack all the things!&lt;/strong&gt;&lt;/p&gt;</content><category term="CTF"></category><category term="CSAW"></category><category term="pdf-parser"></category><category term="pdftotext"></category></entry></feed>