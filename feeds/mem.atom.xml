<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>chmod +x singularity.sh</title><link href="http://bt3gl.github.io/" rel="alternate"></link><link href="http://bt3gl.github.io/feeds/mem.atom.xml" rel="self"></link><id>http://bt3gl.github.io/</id><updated>2014-09-22T06:20:00-04:00</updated><entry><title>CSAW CTF 2014 - Forensics 100: "dumpster diving"</title><link href="http://bt3gl.github.io/csaw-ctf-2014-forensics-100-dumpster-diving.html" rel="alternate"></link><updated>2014-09-22T06:20:00-04:00</updated><author><name>Marina von Steinkirch</name></author><id>tag:bt3gl.github.io,2014-09-22:csaw-ctf-2014-forensics-100-dumpster-diving.html</id><summary type="html">&lt;p&gt;This was the first forensic challenge. It starts with the following text:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;dumpsters are cool, but cores are cooler&lt;/p&gt;
&lt;p&gt;Written by marc&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ctf.isis.poly.edu/static/uploads/606580b079e73e14ab2751e35d22ad44/firefox.mem.zip"&gt;firefox.mem.zip&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Unziping firefox.mem.zip&lt;/h2&gt;
&lt;p&gt;The given file has a funny extension &lt;em&gt;.mem.zip&lt;/em&gt;. Before we go ahead and unzip it, let's try to learn more about this file. To do this we choose to use the Linux's command &lt;a href="http://en.wikipedia.org/wiki/File_(command)"&gt;file&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;file --help
Usage: file &lt;span class="o"&gt;[&lt;/span&gt;OPTION...&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;FILE...&lt;span class="o"&gt;]&lt;/span&gt;
Determine &lt;span class="nb"&gt;type &lt;/span&gt;of FILEs.

      --help                 display this &lt;span class="nb"&gt;help &lt;/span&gt;and &lt;span class="nb"&gt;exit&lt;/span&gt;
  -v, --version              output version information and &lt;span class="nb"&gt;exit&lt;/span&gt;
  -m, --magic-file LIST      use LIST as a colon-separated list of magic
                               number files
  -z, --uncompress           try to look inside compressed files
  -b, --brief                &lt;span class="k"&gt;do &lt;/span&gt;not prepend filenames to output lines
  -c, --checking-printout    print the parsed form of the magic file, use in
                               conjunction with -m to debug a new magic file
                               before installing it
  -e, --exclude TEST         exclude TEST from the list of &lt;span class="nb"&gt;test &lt;/span&gt;to be
                               performed &lt;span class="k"&gt;for &lt;/span&gt;file. Valid tests are:
                               apptype, ascii, cdf, compress, elf, encoding,
                               soft, tar, text, tokens
  -f, --files-from FILE      &lt;span class="nb"&gt;read &lt;/span&gt;the filenames to be examined from FILE
  -F, --separator STRING     use string as separator instead of &lt;span class="sb"&gt;`&lt;/span&gt;:&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;  -i, --mime                 output MIME type strings (--mime-type and&lt;/span&gt;
&lt;span class="s1"&gt;                               --mime-encoding)&lt;/span&gt;
&lt;span class="s1"&gt;      --apple                output the Apple CREATOR/TYPE&lt;/span&gt;
&lt;span class="s1"&gt;      --mime-type            output the MIME type&lt;/span&gt;
&lt;span class="s1"&gt;      --mime-encoding        output the MIME encoding&lt;/span&gt;
&lt;span class="s1"&gt;  -k, --keep-going           don&amp;#39;&lt;/span&gt;t stop at the first match
  -l, --list                 list magic strength
  -L, --dereference          follow symlinks &lt;span class="o"&gt;(&lt;/span&gt;default&lt;span class="o"&gt;)&lt;/span&gt;
  -h, --no-dereference       don&lt;span class="s1"&gt;&amp;#39;t follow symlinks&lt;/span&gt;
&lt;span class="s1"&gt;  -n, --no-buffer            do not buffer output&lt;/span&gt;
&lt;span class="s1"&gt;  -N, --no-pad               do not pad output&lt;/span&gt;
&lt;span class="s1"&gt;  -0, --print0               terminate filenames with ASCII NUL&lt;/span&gt;
&lt;span class="s1"&gt;  -p, --preserve-date        preserve access times on files&lt;/span&gt;
&lt;span class="s1"&gt;  -r, --raw                  don&amp;#39;&lt;/span&gt;t translate unprintable chars to &lt;span class="se"&gt;\o&lt;/span&gt;oo
  -s, --special-files        treat special &lt;span class="o"&gt;(&lt;/span&gt;block/char devices&lt;span class="o"&gt;)&lt;/span&gt; files as
                             ordinary ones
  -C, --compile              compile file specified by -m
  -d, --debug                print debugging messages
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We find the flag &lt;code&gt;-z&lt;/code&gt;, which allows us to look inside the zipped files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt; file -z firefox.mem.zip
firefox.mem.zip: ELF 64-bit LSB core file x86-64, version 1 &lt;span class="o"&gt;(&lt;/span&gt;SYSV&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;Zip archive data, at least v2.0 to extract&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Cool! So let's go ahead and unzip this file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;unzip firefox.mem.zip nzip firefox.mem.zip
Archive:  firefox.mem.zip
  inflating: firefox.mem
   creating: __MACOSX/
  inflating: __MACOSX/._firefox.mem
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;Extra: Learning More about the &lt;em&gt;.mem&lt;/em&gt; File&lt;/h2&gt;
&lt;p&gt;This is a very weird file extension. If you google &lt;em&gt;.mem&lt;/em&gt;, you don't find much, it's clear it's a memory file, but what now?  From the &lt;em&gt;file&lt;/em&gt; command, we learned that this is an &lt;em&gt;ELF 64-bit LSB core&lt;/em&gt;. Let's understand this  by parts.&lt;/p&gt;
&lt;p&gt;An &lt;a href="http://en.wikipedia.org/wiki/Executable_and_Linkable_Format"&gt;ELF&lt;/a&gt; file  (Executable and Linkable Format) is a standard file format for executables, object code, shared libraries, and core dumps. The cool thing about ELF is that it's not bound to any particular architecture.&lt;/p&gt;
&lt;p&gt;In Linux, we can use the command &lt;a href="http://linux.die.net/man/1/readelf"&gt;readelf&lt;/a&gt; to displays information about ELF files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;readelf firefox.mem
Usage: readelf &amp;lt;option&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;&amp;gt; elf-file&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;
 Display information about the contents of ELF format files
 Options are:
  -a --all               Equivalent to: -h -l -S -s -r -d -V -A -I
  -h --file-header       Display the ELF file header
  -l --program-headers   Display the program headers
     --segments          An &lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; --program-headers
  -S --section-headers   Display the sections&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; header
     --sections          An &lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; --section-headers
  -g --section-groups    Display the section groups
  -t --section-details   Display the section details
  -e --headers           Equivalent to: -h -l -S
  -s --syms              Display the symbol table
     --symbols           An &lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; --syms
  --dyn-syms             Display the dynamic symbol table
  -n --notes             Display the core notes &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;present&lt;span class="o"&gt;)&lt;/span&gt;
  -r --relocs            Display the relocations &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;present&lt;span class="o"&gt;)&lt;/span&gt;
  -u --unwind            Display the unwind info &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;present&lt;span class="o"&gt;)&lt;/span&gt;
  -d --dynamic           Display the dynamic section &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;present&lt;span class="o"&gt;)&lt;/span&gt;
  -V --version-info      Display the version sections &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;present&lt;span class="o"&gt;)&lt;/span&gt;
  -A --arch-specific     Display architecture specific information &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;any&lt;span class="o"&gt;)&lt;/span&gt;
  -c --archive-index     Display the symbol/file index in an archive
  -D --use-dynamic       Use the dynamic section info when displaying symbols
  -x --hex-dump&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;number|name&amp;gt;
                         Dump the contents of section &amp;lt;number|name&amp;gt; as bytes
  -p --string-dump&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;number|name&amp;gt;
                         Dump the contents of section &amp;lt;number|name&amp;gt; as strings
  -R --relocated-dump&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;number|name&amp;gt;
                         Dump the contents of section &amp;lt;number|name&amp;gt; as relocated bytes
  -w&lt;span class="o"&gt;[&lt;/span&gt;lLiaprmfFsoRt&lt;span class="o"&gt;]&lt;/span&gt; or
  --debug-dump&lt;span class="o"&gt;[=&lt;/span&gt;rawline,&lt;span class="o"&gt;=&lt;/span&gt;decodedline,&lt;span class="o"&gt;=&lt;/span&gt;info,&lt;span class="o"&gt;=&lt;/span&gt;abbrev,&lt;span class="o"&gt;=&lt;/span&gt;pubnames,&lt;span class="o"&gt;=&lt;/span&gt;aranges,&lt;span class="o"&gt;=&lt;/span&gt;macro,&lt;span class="o"&gt;=&lt;/span&gt;frames,
               &lt;span class="o"&gt;=&lt;/span&gt;frames-interp,&lt;span class="o"&gt;=&lt;/span&gt;str,&lt;span class="o"&gt;=&lt;/span&gt;loc,&lt;span class="o"&gt;=&lt;/span&gt;Ranges,&lt;span class="o"&gt;=&lt;/span&gt;pubtypes,
               &lt;span class="o"&gt;=&lt;/span&gt;gdb_index,&lt;span class="o"&gt;=&lt;/span&gt;trace_info,&lt;span class="o"&gt;=&lt;/span&gt;trace_abbrev,&lt;span class="o"&gt;=&lt;/span&gt;trace_aranges&lt;span class="o"&gt;]&lt;/span&gt;
                         Display the contents of DWARF2 debug sections
  --dwarf-depth&lt;span class="o"&gt;=&lt;/span&gt;N        Do not display DIEs at depth N or greater
  --dwarf-start&lt;span class="o"&gt;=&lt;/span&gt;N        Display DIEs starting with N, at the same depth
                         or deeper
  -I --histogram         Display histogram of bucket list lengths
  -W --wide              Allow output width to exceed 80 characters
  @&amp;lt;file&amp;gt;                Read options from &amp;lt;file&amp;gt;
  -H --help              Display this information
  -v --version           Display the version number of readelf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In addition, &lt;a href="http://en.wikipedia.org/wiki/Linux_Standard_Base"&gt;LSB&lt;/a&gt; stands for &lt;em&gt;Linux Standard Base&lt;/em&gt;, which is a joint project by several Linux distributions. It specifies standard libraries, a number of commands and utilities that extend the POSIX standard, the layout of the file system hierarchy, run levels, the printing system, etc.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Extracting Information from the &lt;em&gt;.mem&lt;/em&gt; File&lt;/h2&gt;
&lt;p&gt;It turned out that we don't even need to know anything about the file to find the flag. All we need to do is to search for the &lt;em&gt;flag&lt;/em&gt; string:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cat firefox.mem | grep -a &lt;span class="s1"&gt;&amp;#39;flag{&amp;#39;&lt;/span&gt;
P��negativeone_or_fdZZZZZZZZZZZZnegativeone_or_nothingZZnegativeone_or_ssize_tZZd_name_extra_sizeZZZZZZZZZZZZnull_or_dirent_ptrZZZZZZZZZZOSFILE_SIZEOF_DIRZZZZZZZZZZZZ���� 3���������ZZZZZZZH�f�L��L��ZZ����@�m���������ZZZZZZZAG�@r���y��ZZZZZZZZflag&lt;span class="o"&gt;{&lt;/span&gt;cd69b4957f06cd818d7bf3d61980e291&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Yay! We found the flag: &lt;strong&gt;cd69b4957f06cd818d7bf3d61980e291&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hack all the things!&lt;/strong&gt;&lt;/p&gt;</summary><category term="CTF"></category><category term="CSAW"></category><category term="readelf"></category><category term="mem"></category></entry></feed>