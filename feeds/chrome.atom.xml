<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>chmod +x singularity.sh</title><link href="http://bt3gl.github.io/" rel="alternate"></link><link href="http://bt3gl.github.io/feeds/chrome.atom.xml" rel="self"></link><id>http://bt3gl.github.io/</id><updated>2014-11-03T04:20:00-05:00</updated><entry><title>On CRLs, OCSP, and a Short Review of Why Revocation Checking Doesn't Work (for Browsers)</title><link href="http://bt3gl.github.io/on-crls-ocsp-and-a-short-review-of-why-revocation-checking-doesnt-work-for-browsers.html" rel="alternate"></link><updated>2014-11-03T04:20:00-05:00</updated><author><name>Marina von Steinkirch</name></author><id>tag:bt3gl.github.io,2014-11-03:on-crls-ocsp-and-a-short-review-of-why-revocation-checking-doesnt-work-for-browsers.html</id><summary type="html">&lt;p&gt;Today I am going to talk about some regulation details of &lt;strong&gt;SSL/TLS connections&lt;/strong&gt;. These connections rely on a chain of trust. This chain of trust is established by &lt;strong&gt;certificate authorities&lt;/strong&gt; (CAs), which serve as trust anchors to verify the validity of who a device thinks it is talking to. In technical terms, &lt;strong&gt;X.509&lt;/strong&gt; is an &lt;a href="http://en.wikipedia.org/wiki/ITU-T"&gt;ITU-T&lt;/a&gt; standard that specifies standard formats for things such as &lt;em&gt;public key certificates&lt;/em&gt; and &lt;em&gt;certificate revocation lists&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;public key certificate&lt;/strong&gt; is  how websites bind their identity to a &lt;em&gt;public key&lt;/em&gt; to allow  an encrypted session (SSL/TLS) with the user. The certificate includes information about the key, the owner's &lt;em&gt;identity&lt;/em&gt; (such as the DNS name), and the &lt;em&gt;digital signature&lt;/em&gt; of the entity that issued the certificate (the &lt;a href="http://en.wikipedia.org/wiki/Certificate_authority"&gt;Certificate Authority&lt;/a&gt;, also known as CA).  As a consequence, browsers and other &lt;a href="http://en.wikipedia.org/wiki/User_agent"&gt;user-agents&lt;/a&gt; should always be able to check the authenticity of these certificates before proceeding.&lt;/p&gt;
&lt;p&gt;Some organizations need SSL/TLS simply for confidentiality (encryption), while other organizations use it to enhance trust in their security and identity. Therefore, CAs issue different certificates with different levels of verification, ranging from just confirming the control of the domain name (&lt;em&gt;Domain Validation&lt;/em&gt;, DV) to more extensive identity checks (&lt;em&gt;Extended Validation&lt;/em&gt;, EV). For instance, if a site's DNS gets hijacked, while the attacker could be able to issue a controlled DV, she wouldn't be able to issue new EV certificates  just with domain validation.&lt;/p&gt;
&lt;p&gt;Since EV and DV certificates can be valid for years, they might lose their validity before they expire by age.  For instance, the website can lose control of its key or, as recently in the event of the &lt;a href="http://heartbleed.com/"&gt;Heartbleed bug&lt;/a&gt;, a very large number of SSL/TLS websites needed to revoke and reissue their certificates. Therefore, the need for an efficient revocation machinery is evident.&lt;/p&gt;
&lt;p&gt;For many years,  two ways of revoking a certificate have prevailed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;by checking a  &lt;strong&gt;Certificate Revocation Lists&lt;/strong&gt; (CRLs), which are lists of serial numbers of certificates that have been revoked, provided by &lt;em&gt;each CA&lt;/em&gt;. As one can imagine, they can become quite large.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;by a communication protocol named &lt;strong&gt;Online Certificate Status Protocol&lt;/strong&gt; (OCSP), which allows a system to check with a CA for the status of a single certificate without pulling the entire CRL.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While CRLs are long lists and OCSP only deals with a single certificate, they are both methods of getting signed statements about the status of a certificate; and they both present issues concerning privacy, integrity, and availability. In this post I discuss some of these issues and I review possible alternatives.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Broken Models&lt;/h2&gt;
&lt;h3&gt;Certificate Revocation Lists (CRLs)&lt;/h3&gt;
&lt;p&gt;A CRL is a list of  serial numbers (such as &lt;code&gt;54:99:05:bd:ca:2a:ad:e3:82:21:95:d6:aa:ee:b6:5a&lt;/code&gt;) of unexpired security certificates which have been revoked by their issuer and should not be trusted.&lt;/p&gt;
&lt;p&gt;Each CA maintains and publishes its own CRL. CRLs are in continuous changes: old certificates expire due to their age and serial numbers of newly revoked certificates are added.&lt;/p&gt;
&lt;p&gt;The main issue here is that the original &lt;em&gt;public key infrastructure&lt;/em&gt; (PKI) scheme does not scale. Users all over the Internet are constantly checking for  revocation and having to download files that can be many MB.  In addition, although CRL can be cached, they are still very volatile, turning CAs into a major performance bottleneck on the Internet.&lt;/p&gt;
&lt;h3&gt;Online Certificate Status Protocol (OCSP)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://tools.ietf.org/html/rfc2560"&gt;OCSP was intended to replace the CRL system&lt;/a&gt;, however it presented several issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Reliability&lt;/em&gt;: Every time any user connects to any secured website, her  browser must query the CA's OCSP server. The typical CA issues certificates for hundreds of thousands of individual websites and the checks can be  up to  seconds.  Also, the CA's OCSP server might experience downtime! If a server is offline, overloaded, under attack, or unable to reply for any reason, certificate validity cannot be confirmed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Privacy&lt;/em&gt;: CAs can learn the IP address of users and which websites they wish to securely visit.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Security&lt;/em&gt;: Browsers can not be sure that a CA's server is reachable (&lt;em&gt;e.g.&lt;/em&gt;, captive portals that require one to sign in on a HTTPS site, but blocks traffic to all other sites, including CA's OCSP servers).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One attempt to circumvent the lack of assurance of a server's reliability was issuing OCSP checks with a &lt;strong&gt;soft-fail&lt;/strong&gt; option. In this case, online revocation checks which result in a &lt;em&gt;network error would be ignored&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This brings serious issues. A simple example is when an &lt;a href="http://www.thoughtcrime.org/papers/ocsp-attack.pdf"&gt;attacker can intercept HTTPS traffic and make online revocation checks appear to fail, bypassing OCSP checks&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On the flip side, it's also not a good idea to enforce a &lt;strong&gt;hard-fail&lt;/strong&gt; check:  OCSP servers are pretty flaky/slow and you do not want to relay on their capabilities (DDoS attackers would love this though).&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Some Light in a Solution&lt;/h2&gt;
&lt;p&gt;There are several attempts of a solution for the revocation problem but none of them has been regarded as the definitive one. Here some of them:&lt;/p&gt;
&lt;h3&gt;CRLSets&lt;/h3&gt;
&lt;p&gt;Google Chrome uses &lt;a href="https://dev.chromium.org/Home/chromium-security/crlsets"&gt;&lt;strong&gt;CRLSets&lt;/strong&gt;&lt;/a&gt; int its update mechanism to send lists of serial numbers of revoked certificates which are constantly added by crawling the CAs.&lt;/p&gt;
&lt;p&gt;This method brings  more performance and reliability to the browser and, in addition, &lt;a href="https://www.imperialviolet.org/2014/04/19/revchecking.html"&gt;CRLSet updates occur at least daily&lt;/a&gt;, which is faster than most OCSP validity periods.&lt;/p&gt;
&lt;p&gt;A complementary initiative from Google is the  &lt;a href="http://www.certificate-transparency.org/what-is-ct"&gt;Certificate Transparency&lt;/a&gt; project. The objective is to help with  structural flaws in the SSL certificate system such as domain validation, end-to-end encryption, and the chains of trust set up by CAs.&lt;/p&gt;
&lt;h3&gt;OCSP stapling&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;OCSP Stapling&lt;/strong&gt; (&lt;a href="http://tools.ietf.org/html/draft-hallambaker-tlssecuritypolicy-03"&gt;TLS Certificate Status Request extension&lt;/a&gt;) is an alternative approach for checking the revocation status of certificates. It allows the presenter of a certificate to bear the resource cost involved in providing OCSP responses, instead of the CA, in a fashion reminiscent of the &lt;a href="http://en.wikipedia.org/wiki/Kerberos_(protocol)"&gt;Kerberos Ticket&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In a simple example, the certificate holder is the one who periodically queries the OCSP server, obtaining a &lt;em&gt;signed time-stamped OCSP response&lt;/em&gt;. When users attempt to connect to the website, the response is signed with the SSL/TLS handshake via the Certificate Status Request extension response. Since the stapled response is signed by the CA, it cannot be forged (without the CA's signing key).&lt;/p&gt;
&lt;p&gt;If the stapled OCSP has the &lt;a href="http://tools.ietf.org/html/draft-hallambaker-muststaple-00"&gt;Must Staple&lt;/a&gt; capability, it becomes hard-fail if a valid OCSP response is not stapled. To make a browser know this option, one can add a "must staple" assertion to the site's security certificate and/or create a new HTTP response header similar to &lt;a href="http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security"&gt;HSTS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Some fixable issue is that OCSP stapling supports only one response at a time. This is insufficient for sites that use several different certificates for a single page. Nevertheless, OCSP stapling is the most promising solution for the problem for now. The idea has been implemented by the servers for years, and recently, a &lt;a href="https://blog.mozilla.org/security/2013/07/29/ocsp-stapling-in-firefox/"&gt;few browsers are adopting it&lt;/a&gt;. If this solution is going to become mainstream, only time will show.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;tl;dr:&lt;/strong&gt; The security of the Internet depends on the agent's ability to revoke compromised certificates, but the status quo is broken. There is  a urgent  need for rethinking the way things have been done!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Edited, 11/19/2014:&lt;/strong&gt; The &lt;strong&gt;EFF&lt;/strong&gt; just announced an attempt to help the CA  problem:  &lt;a href="https://www.eff.org/deeplinks/2014/11/certificate-authority-encrypt-entire-web"&gt;Let's Encrypt&lt;/a&gt;, "a new certificate authority (CA) initiative that aims to clear the remaining roadblocks to transition the Web from HTTP to HTTPS". The initiative is planned to be released in 2015. These are good news, but it is still not clear whether they are going to address the revocation problem with new solutions.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;References:&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.imperialviolet.org/2011/03/18/revocation.html"&gt;Imperial Violet: Revocation Doesn't work&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.imperialviolet.org/2014/04/19/revchecking.html"&gt;Imperial Violet: Don't Enable Revocation Checking&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.imperialviolet.org/2014/04/29/revocationagain.html"&gt;Imperial Violet: Revocation Still Doesn't Work&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/agl/876829"&gt;Proxy server for testing revocation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.imperialviolet.org/2012/02/05/crlsets.html"&gt;Revocation checking and Chrome's CRL&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://code.google.com/p/chromium/issues/detail?id=361820"&gt;Discussion about OCSP checking at Chrome&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://tools.ietf.org/html/draft-balfanz-tls-channelid-00"&gt;RFC Transport Layer Security (TLS) Channel IDs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.isecpartners.com/media/17919/revocation-whitepaper_pdf__2_.pdf"&gt;Fixing Revocation for Web Browsers, iSEC Partners&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://wiki.mozilla.org/images/e/e3/SSLcertRevocation.pdf"&gt;Proposal for Better Revocation Model of SSL Certificates&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.ssllabs.com/ssltest/"&gt;SSL Server Test&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.digicert.com/help/"&gt;SSL Certificate Checker&lt;/a&gt;&lt;/p&gt;</summary><category term="CRL"></category><category term="CRLSets"></category><category term="OCSP"></category><category term="TLS"></category><category term="Chrome"></category></entry><entry><title>A Closer Look at Chrome's Security: Understanding V8</title><link href="http://bt3gl.github.io/a-closer-look-at-chromes-security-understanding-v8.html" rel="alternate"></link><updated>2014-11-01T04:20:00-04:00</updated><author><name>Marina von Steinkirch</name></author><id>tag:bt3gl.github.io,2014-11-01:a-closer-look-at-chromes-security-understanding-v8.html</id><summary type="html">&lt;p&gt;&lt;a href="http://blogoscoped.com/google-chrome/"&gt;In 2008, Google released a sandbox-oriented browser&lt;/a&gt;, that was assembled from several different code libraries from Google and third parties (for instance, it borrowed a rendering machinery from the open-source  &lt;a href="https://www.webkit.org/"&gt;Webkit layout engine&lt;/a&gt;, later changing it to a forked version, &lt;a href="http://en.wikipedia.org/wiki/Blink_(layout_engine)"&gt;Blink&lt;/a&gt;).  Six years later, Chrome has became the preferred browser for &lt;a href="http://en.wikipedia.org/wiki/File:Usage_share_of_web_browsers_(Source_StatCounter).svg"&gt;half of users in the Internet&lt;/a&gt;. This is enough reason to investigate further how security is dealt in this engine. With this motivation in mind, I summarize the main features of Chrome and its &lt;a href="http://www.chromium.org/Home"&gt;Chromium Project&lt;/a&gt;, describing the pristine way of processing JavaScript with the &lt;strong&gt;V8 JavaScript virtual machine&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;They way computers talk...&lt;/h2&gt;
&lt;p&gt;In mainstream computer languages, a &lt;a href="http://www.openbookproject.net/thinkcs/python/english2e/ch01.html"&gt;source code in a &lt;strong&gt;high level language&lt;/strong&gt; is transformed to a &lt;strong&gt;low level language&lt;/strong&gt;&lt;/a&gt; (a machine or assembly language)  by either being &lt;strong&gt;compiled&lt;/strong&gt; or &lt;strong&gt;interpreted&lt;/strong&gt; . This is &lt;a href="https://www.youtube.com/watch?v=_C5AHaS1mOA"&gt;a very simple concept&lt;/a&gt; but it is a fundamental one!&lt;/p&gt;
&lt;h3&gt;Compilers and Interpreters&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Compilers&lt;/strong&gt;  produce  an intermediate form called &lt;strong&gt;code object&lt;/strong&gt;, which is like machine code but augmented with symbols tables  to make executable blocks (library files, with file objects). A linker is used to finally combine them to form executables.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Interpreters&lt;/strong&gt; execute instructions without compiling into machine language first. They are first translated into a lower level intermediate representations such as &lt;strong&gt;byte code&lt;/strong&gt; or &lt;strong&gt;abstract syntax trees&lt;/strong&gt; (ASTs). Then they are interpreted by a  &lt;strong&gt;virtual machine&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The truth is that things are generally mixed.  For example, when you type some instruction in  Python's REPL, &lt;a href="http://akaptur.com/blog/2013/11/17/introduction-to-the-python-interpreter-3/"&gt;the language executes four steps&lt;/a&gt;: &lt;em&gt;lexing&lt;/em&gt; (breaks the code into pieces), &lt;em&gt;parsing&lt;/em&gt; (generates an AST with those pieces - it is the syntax analysis), &lt;em&gt;compiling&lt;/em&gt; (converts the AST into code objects - which are attributes of the function objects), and &lt;em&gt;interpreting&lt;/em&gt; (executes the code objects).&lt;/p&gt;
&lt;p&gt;In Python, byte-compiled code, in form of &lt;strong&gt;.pyc&lt;/strong&gt; files, is used by the compiler to speed-up the start-up time (load time) for short programs that use a lot of standard modules. And, by the way, byte codes are attributes of the code object so to see them, you just need to call &lt;code&gt;func_code&lt;/code&gt; (code object) and &lt;code&gt;co_code&lt;/code&gt;(bytecode)[1]:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;some_function&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;return&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;some_function&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;co_code&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;d&lt;/span&gt;&lt;span class="se"&gt;\x00\x00&lt;/span&gt;&lt;span class="s"&gt;S&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;On the other hand, traditional JavaScript code is represented as a bytecode or an AST, and then executed in a &lt;em&gt;virtual machine&lt;/em&gt; or further compiled into machine code. When JavaScript interprets code, it executes roughly the following steps: &lt;em&gt;parsing&lt;/em&gt; and &lt;em&gt;preprocessing&lt;/em&gt;, &lt;em&gt;scope analysis&lt;/em&gt;, and &lt;em&gt;bytecode or translation to native&lt;/em&gt;. Just a note: the JavaScript engine represents bytecode using &lt;a href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Internals/Bytecode"&gt;SpiderMonkey&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So we see that when modern languages choose the way they compile or interpret code, they are trading off with the speed they want things to run. Since browsers are preoccupied with delivering content the faster they can,  this is a fundamental concept.&lt;/p&gt;
&lt;h3&gt;Method JITs and Tracing JITs&lt;/h3&gt;
&lt;p&gt;To speed things up, instead of having the code being parsed and then executed (&lt;a href="http://en.wikipedia.org/wiki/Ahead-of-time_compilation"&gt;one at time&lt;/a&gt;),  &lt;strong&gt;dynamic translators&lt;/strong&gt;  (&lt;em&gt;Just-in-time&lt;/em&gt; translators, or JIT) can be used. JITs &lt;em&gt;translate intermediate representation into machine language  at runtime&lt;/em&gt;. They have the efficiency of running native code with the cost of startup time plus increased memory (when the bytecode or AST are first compiled).&lt;/p&gt;
&lt;p&gt;Engines have different policies on code generation, which can roughly be grouped into types: &lt;strong&gt;tracing&lt;/strong&gt; and &lt;strong&gt;method&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Method JITs&lt;/strong&gt; emit native code for every block (method) of code and update references dynamically. Method JITs can implement an &lt;em&gt;inline cache&lt;/em&gt; for rewriting type lookups at runtime.&lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;tracing JITs&lt;/strong&gt;, native code is only emitted when a certain block (method) is considered &lt;em&gt;important&lt;/em&gt;. An example is given by traditional JavaScript: if you load a script with functions that are never used, they are never compiled. Additionally, in JavaScript a  &lt;em&gt;cache&lt;/em&gt; is usually implemented due to the nature of its &lt;em&gt;dynamic typing system&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;As we will see below, V8 performs direct JIT compilation from  (JavaScript) source code to native machine code (IA-32, x86-64, ARM, or MIPS ISAs),  &lt;strong&gt;without transforming it to bytecode first&lt;/strong&gt;. In addition, V8 performs  dynamic several optimizations at runtime (including &lt;strong&gt;inline caching&lt;/strong&gt;). But let's not get ahead of ourselves! Also,  as a note, Google has implemented a technology called &lt;a href="http://code.google.com/p/nativeclient/"&gt;&lt;strong&gt;Native Client&lt;/strong&gt;&lt;/a&gt; (NaCl), which  allows one to provide compiled code to the  Chrome browser.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;The way JavaScript rolls...&lt;/h2&gt;
&lt;p&gt;JavaScript's integration with &lt;a href="http://en.wikipedia.org/wiki/Netscape_Navigator"&gt;Netscape Navigator&lt;/a&gt; in the mid-90s made it easier for developers to access HTML page elements such as &lt;em&gt;forms&lt;/em&gt;, &lt;em&gt;frames&lt;/em&gt;, and &lt;em&gt;images&lt;/em&gt;. This was essential for JavaScript's accession to become the most popular scripting engine for the web.&lt;/p&gt;
&lt;p&gt;However, the language's high dynamical behavior (that I'm briefly discussing here) came with a price: in the mid-2000s browsers had very slow  implementations that did not scale with code size or &lt;em&gt;object allocation&lt;/em&gt;. Issues such as &lt;em&gt;memory leaks&lt;/em&gt; when running web apps were becoming mainstream. It was clear that things would only get worse and a new JavaScript engine was a need.&lt;/p&gt;
&lt;h3&gt;JavaScript's Structure&lt;/h3&gt;
&lt;p&gt;In JavaScript, every object has a &lt;em&gt;prototype&lt;/em&gt;, and the prototype is also an object. All JavaScript objects inherit their properties and methods from their prototype.&lt;/p&gt;
&lt;p&gt;So, for example, supposing an application that has an object &lt;em&gt;Point&lt;/em&gt; (borrowed from the &lt;a href="https://developers.google.com/v8/design"&gt;official documentation&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can create several objects:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And we can access the propriety &lt;code&gt;x&lt;/code&gt; in these object by:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the above implementation, we would have two different Point objects that do not share any structure. This is because JavaScript is &lt;strong&gt;classless&lt;/strong&gt;: you create  new objects on the fly and dynamically add or remove proprieties. Functions can move from an object to another. Objects with same type can appear in the same sites in the program with no constraints.&lt;/p&gt;
&lt;p&gt;Furthermore, to store their object proprieties, most JavaScript engines use a &lt;em&gt;dictionary-like data structure&lt;/em&gt;. Each property access demands a dynamic lookup to resolve their location in memory. This contrasts  &lt;em&gt;static&lt;/em&gt; languages such as Java, where instance variables are located at fixed offsets determined by the compiler (due to the &lt;em&gt;fixed&lt;/em&gt; object layout by the &lt;em&gt;object's class&lt;/em&gt;). In this case, access is given by a simple memory load or store (a single instruction).&lt;/p&gt;
&lt;h3&gt;JavaScript's Garbage Collection&lt;/h3&gt;
&lt;p&gt;Garbage collection is a form of &lt;em&gt;automatic memory management&lt;/em&gt;: an attempt to reclaim the memory occupied by objects that are not being used any longer (&lt;em&gt;i.e.&lt;/em&gt;, if an object loses its reference, the object's memory has to be reclaimed).&lt;/p&gt;
&lt;p&gt;The other possibility is &lt;em&gt;manual memory management&lt;/em&gt;, which requires the developer to specify which objects need to be deallocated. However, manual garbage collection can result in bugs such as:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Dangling pointers&lt;/strong&gt;: when a piece of memory is freed while there are still pointers to it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Double free bugs&lt;/strong&gt;: when the program tries to free a region of memory that it had already freed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Memory leaks&lt;/strong&gt;: when the program fails to free memory occupied by an object that had became unreachable, leading to memory exhaustion.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As one could guess, JavaScript has automatic memory management. Actually, the core design flaw of traditional JavaScript engines is &lt;strong&gt;bad garbage collection behavior&lt;/strong&gt;. The problem is that JavaScript engines do not know exactly where all the pointers are, and they will search through the entire execution stack to see what data looks like pointers (for instance, integers can look like a pointer to an address in the heap).&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Introducing V8&lt;/h2&gt;
&lt;p&gt;A solution for the issues presented above came from Google,  with  the &lt;strong&gt;V8 Engine&lt;/strong&gt;. V8 is an &lt;a href="https://code.google.com/p/v8/"&gt;open source JavaScript engine&lt;/a&gt; written in C++ that gave birth to Chrome. V8 has a way to categorize the highly-dynamic JavaScript objects into classes, bringing techniques from static class-based languages. In addition, as I mentioned in the the beginning, V8 compiles JavaScript to native machine code before executing it.&lt;/p&gt;
&lt;p&gt;In terms of performance, besides direct compilation to native code, three main features in V8 are fundamental:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="n"&gt;Hidden&lt;/span&gt; &lt;span class="n"&gt;classes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="n"&gt;In&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="n"&gt;caching&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;optimization&lt;/span&gt; &lt;span class="n"&gt;technique&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="n"&gt;Efficient&lt;/span&gt; &lt;span class="n"&gt;memory&lt;/span&gt; &lt;span class="n"&gt;management&lt;/span&gt; &lt;span class="n"&gt;system&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;garbage&lt;/span&gt; &lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's take a look at each of them.&lt;/p&gt;
&lt;h3&gt;V8's Hidden Class&lt;/h3&gt;
&lt;p&gt;In V8, as execution goes on, objects that end up with the same properties will share the same &lt;strong&gt;hidden class&lt;/strong&gt;. This way the engine  applies dynamic optimizations.&lt;/p&gt;
&lt;p&gt;Consider the Point example from before: we have two different objects, &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;. Instead of having them completely independent, V8 makes them share a hidden class. So instead of creating two objects, we have &lt;em&gt;three&lt;/em&gt;. The hidden class shows that both objects have the same proprieties and an object changes its hidden class when a new property is added.&lt;/p&gt;
&lt;p&gt;So, for our example, if another Point object is created:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Initially the Point object has no properties so the newly created object refers to the initial class &lt;strong&gt;C0&lt;/strong&gt;. The value is stored at offset zero of  the Point object.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When property &lt;code&gt;x&lt;/code&gt; is added, V8 follows the hidden class transition from &lt;strong&gt;C0&lt;/strong&gt; to &lt;strong&gt;C1&lt;/strong&gt; and writes the value of &lt;code&gt;x&lt;/code&gt; at the offset specified by &lt;strong&gt;C1&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When property &lt;code&gt;y&lt;/code&gt; is added, V8 follows the hidden class transition from &lt;strong&gt;C1&lt;/strong&gt; to &lt;strong&gt;C2&lt;/strong&gt; and writes the value of &lt;code&gt;y&lt;/code&gt; at the offset specified by &lt;strong&gt;C2&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Instead of having a generic lookup for a propriety, V8  generates an efficient machine code to search the propriety. The machine code generated for accessing &lt;code&gt;x&lt;/code&gt; is something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# ebx = the point object&lt;/span&gt;
&lt;span class="n"&gt;cmp&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ebx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;cached&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;jne&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;inline&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="n"&gt;miss&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;mv&lt;/span&gt; &lt;span class="n"&gt;eax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ebx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;cached&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Instead of a complicated lookup at the propriety, the propriety reading translates into three machine operations!&lt;/p&gt;
&lt;p&gt;It might seem inefficient to create a new hidden class whenever a property is added. However, because of the class transitions the hidden classes can be reused several times. It turns out that most of the access to objects are within the same hidden class.&lt;/p&gt;
&lt;h3&gt;V8's Inline caching&lt;/h3&gt;
&lt;p&gt;When the engine runs the code, it does not know about the hidden class. V8 optimizes property access by predicting that the class will also be used for all future objects accessed in the same section of code, and adds the information to the &lt;strong&gt;inline cache code&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Inline caching is a class-based object-oriented optimization technique employed by some language runtimes.  The concept of inline caching is based on the  observation that the objects that occur at a particular call site are often of the same type. Therefore, performance can be increased by storing the result of a method lookup &lt;em&gt;inline&lt;/em&gt; (at the call site).&lt;/p&gt;
&lt;p&gt;If V8 has predicted correctly the property's value, this is assigned in a single operation. If the prediction is incorrect, V8 patches the code to remove the optimization. To facilitate this process, call sites are assigned in four different states:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Unitilized&lt;/strong&gt;: Initial state, for any object that was never seen before.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pre-monomorphic&lt;/strong&gt;: Behaves like an uninitialized but do a one-time lookup and  rewrite it to the monophorfic state. It's good for code executed only once (such as initialization and setup).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Monomphorpic&lt;/strong&gt;: Very fast. Recodes the hidden class of the object already seen.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Megamorphic&lt;/strong&gt;: Like the initialized stub (since it always does runtime lookup) except that it never replaces itself.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In conclusion, the combination of using hidden classes to access properties with inline caching (plus  machine code generation) does optimize in cases where  type of objects are frequently created and accessed in a similar way. This greatly improves the speed at which most JavaScript code can be executed.&lt;/p&gt;
&lt;h3&gt;V8's Efficient Garbage Collecting&lt;/h3&gt;
&lt;p&gt;In V8, a &lt;strong&gt;precise garbage collection&lt;/strong&gt; is used. &lt;em&gt;Every pointer's location are known on the execution stack&lt;/em&gt;, so V8 is able to implement incremental garbage collection. V8 can migrate an object to another place and just rewire the pointer.&lt;/p&gt;
&lt;p&gt;In summary, &lt;a href="https://developers.google.com/v8/design#garb_coll"&gt;V8's garbage collection&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="n"&gt;stops&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt; &lt;span class="n"&gt;execution&lt;/span&gt; &lt;span class="n"&gt;when&lt;/span&gt; &lt;span class="n"&gt;performing&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;garbage&lt;/span&gt; &lt;span class="n"&gt;collection&lt;/span&gt; &lt;span class="n"&gt;cycle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

&lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="n"&gt;processes&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;part&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="n"&gt;heap&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;collection&lt;/span&gt; &lt;span class="n"&gt;cycles&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minimizing&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;impact&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;stopping&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;

&lt;span class="mf"&gt;3.&lt;/span&gt; &lt;span class="n"&gt;always&lt;/span&gt; &lt;span class="n"&gt;knows&lt;/span&gt; &lt;span class="n"&gt;exactly&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;objects&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;pointers&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;memory&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;avoiding&lt;/span&gt; &lt;span class="n"&gt;falsely&lt;/span&gt; &lt;span class="n"&gt;identifying&lt;/span&gt; &lt;span class="n"&gt;objects&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;pointers&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;Further Readings:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://noncombatant.org/2014/03/11/privacy-and-security-settings-in-chrome/"&gt;Privacy And Security Settings in Chrome&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[1] When the Python interpreter is invoked with the &lt;code&gt;-O&lt;/code&gt; flag, optimized code is generated and stored in &lt;strong&gt;&lt;em&gt;.pyo&lt;/em&gt;&lt;/strong&gt; files. The optimizer removes assert statements.&lt;/p&gt;</summary><category term="V8"></category><category term="JIT"></category><category term="JavaScript"></category><category term="garbage_collection"></category><category term="cache"></category><category term="bytecode"></category><category term="Chrome"></category><category term="Python"></category></entry></feed>