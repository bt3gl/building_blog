<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>chmod +x singularity.sh - Marina von Steinkirch</title><link href="http://bt3gl.github.io/" rel="alternate"></link><link href="http://bt3gl.github.io/feeds/marina-von-steinkirch.atom.xml" rel="self"></link><id>http://bt3gl.github.io/</id><updated>2018-02-01T00:00:00-05:00</updated><entry><title>A Quick Intro to Kubernetes</title><link href="http://bt3gl.github.io/a-quick-intro-to-kubernetes.html" rel="alternate"></link><published>2018-02-01T00:00:00-05:00</published><updated>2018-02-01T00:00:00-05:00</updated><author><name>Marina von Steinkirch</name></author><id>tag:bt3gl.github.io,2018-02-01:/a-quick-intro-to-kubernetes.html</id><summary type="html">&lt;p&gt;&lt;img alt="cyberpunk" height="300px" src="./cyberpunk/27.jpg" width="400px"&gt;&lt;/p&gt;
&lt;p&gt;Wanna try Kubernetes for the first time and don't know how to start? No problem! I wrote this quick guide to help some of the junior engineers in my team at Etsy to get started with k8s!&lt;/p&gt;
&lt;p&gt;In this guide I will show you how to spin a quick Node …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="cyberpunk" height="300px" src="./cyberpunk/27.jpg" width="400px"&gt;&lt;/p&gt;
&lt;p&gt;Wanna try Kubernetes for the first time and don't know how to start? No problem! I wrote this quick guide to help some of the junior engineers in my team at Etsy to get started with k8s!&lt;/p&gt;
&lt;p&gt;In this guide I will show you how to spin a quick Node.js server in kubernetes and to grasp some of its main concepts. Read on! &lt;a href="https://github.com/bt3gl/k8s_security"&gt;Here is the source code&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Install kubectl&lt;/h3&gt;
&lt;p&gt;First things first, you will need to install &lt;a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/"&gt;kubectl&lt;/a&gt; in your machine or VM.&lt;/p&gt;
&lt;p&gt;Make sure you have all the auths right:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a auth token and move to &lt;code&gt;~/.kube&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create a config file and move to &lt;code&gt;~/.kube&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Spinning up a Hello World node server in docker&lt;/h3&gt;
&lt;p&gt;Download &lt;a href="https://github.com/bt3gl/intro_to_k8s/tree/master/node_server_example"&gt;this code&lt;/a&gt; and build the image:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make build:
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, just run the container:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make run
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Which is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker build -t  node_app_test .
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Check whether the server is up:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make curl
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make status
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Other useful commands&lt;/h4&gt;
&lt;p&gt;Exec inside the container:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker &lt;span class="nb"&gt;exec&lt;/span&gt; -i -t &amp;lt;container name from status&amp;gt; /bin/bash
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Check images in disk:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker images
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Pushing the Registry to Kubernetes&lt;/h3&gt;
&lt;p&gt;In a real production system, we’ll want to build images in one place, then run them in the Kubernetes cluster. The system that
 stores these images for distribution out to the running containers is called a &lt;strong&gt;container registry&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Using a &lt;code&gt;yaml&lt;/code&gt; Kubernetes files (for example, the one inside &lt;code&gt;node_server_example/&lt;/code&gt; you can now deploy the image with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ kubectl create -f  node_example_kube_config.yaml
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you can create the service with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$  kubectl expose deployment node-app-test
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;See the service at:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ kubectl get services
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Clean up&lt;/h3&gt;
&lt;p&gt;Removing the service and the deployment when you are done:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ kubectl delete service node-app-test
$ kubectl delete deployment node-app-test
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Useful General Commands&lt;/h2&gt;
&lt;p&gt;Checking out pods:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ kubectl get pods --namespace&lt;span class="o"&gt;=&lt;/span&gt;security
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Checking deployments:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ kubectl get deployments --namespace&lt;span class="o"&gt;=&lt;/span&gt;security
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Checking services:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ kubectl get services --namespace&lt;span class="o"&gt;=&lt;/span&gt;security
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Get more information about a pod:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ kubectl describe pod --namespace&lt;span class="o"&gt;=&lt;/span&gt;security &amp;lt;pod name&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Some References:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#general-guidelines-and-recommendations"&gt;Dockerfiles good practices&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Thank you for reading, and let me know what you think!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</content></entry><entry><title>Introducing Amigo, a tool to manage Google Cloud Platform Security</title><link href="http://bt3gl.github.io/introducing-amigo-a-tool-to-manage-google-cloud-platform-security.html" rel="alternate"></link><published>2017-12-17T00:00:00-05:00</published><updated>2017-12-17T00:00:00-05:00</updated><author><name>Marina von Steinkirch</name></author><id>tag:bt3gl.github.io,2017-12-17:/introducing-amigo-a-tool-to-manage-google-cloud-platform-security.html</id><summary type="html">&lt;p&gt;&lt;img alt="cyberpunk" height="300px" src="./cyberpunk/27.jpg" width="400px"&gt;&lt;/p&gt;
&lt;p&gt;I wrote a tool called &lt;a href="https://github.com/bt3gl/Amigo-Google-Cloud-Platform-Security"&gt;Amigo&lt;/a&gt; that uses the GCP API to fetch an organization's project data and, with a set of customizable rules, searches for security risks!&lt;/p&gt;
&lt;h2&gt;How Amigo Works&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;i)&lt;/strong&gt; Amigo retrieves the GCP project list and their attributes (defined in a &lt;code&gt;config.yaml&lt;/code&gt; file).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ii)&lt;/strong&gt; For each …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="cyberpunk" height="300px" src="./cyberpunk/27.jpg" width="400px"&gt;&lt;/p&gt;
&lt;p&gt;I wrote a tool called &lt;a href="https://github.com/bt3gl/Amigo-Google-Cloud-Platform-Security"&gt;Amigo&lt;/a&gt; that uses the GCP API to fetch an organization's project data and, with a set of customizable rules, searches for security risks!&lt;/p&gt;
&lt;h2&gt;How Amigo Works&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;i)&lt;/strong&gt; Amigo retrieves the GCP project list and their attributes (defined in a &lt;code&gt;config.yaml&lt;/code&gt; file).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ii)&lt;/strong&gt; For each attribute in a project, Amigo creates an updated report. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;iii)&lt;/strong&gt; Amigo checks the previous report for differences (verifying when the data was modified). If there is a diff, Amigo logs the report for this diff.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;iv)&lt;/strong&gt; Amigo saves the resources data in a database and then it checks the custom rules specified in &lt;code&gt;rules.yaml&lt;/code&gt;, reporting everything that violates those rules.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;v)&lt;/strong&gt; The &lt;strong&gt;science&lt;/strong&gt; generated by Amigo can be fed into ELK.&lt;/p&gt;
&lt;h2&gt;Setting up and Running Amigo&lt;/h2&gt;
&lt;h3&gt;Setting a Virtual Environment&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make venv
$ &lt;span class="nb"&gt;source&lt;/span&gt; venv/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Installing Amigo&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make install
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Creating a Service Account&lt;/h3&gt;
&lt;p&gt;This should be done once, at the first time you run Amigo:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create a project and a service account at &lt;a href="https://console.cloud.google.com/iam-admin/serviceaccounts"&gt;https://console.cloud.google.com/iam-admin/serviceaccounts&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the IAM roles &lt;strong&gt;Security Reviewer&lt;/strong&gt; and &lt;strong&gt;Viewer permissions&lt;/strong&gt; to the service account.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download the &lt;strong&gt;Service Account JSON credential file&lt;/strong&gt; to a safe directory (e.g. your home directory). If amigo runs in other machines (or other people in the same organization is running Amigo), this key can be shared (and step 1. and 2. do not need to be repeated).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Setting gcloud&lt;/h3&gt;
&lt;p&gt;Install &lt;a href="https://cloud.google.com/sdk/downloads"&gt;gcloud SDK&lt;/a&gt; and authenticate with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gcloud auth application-default login
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can also check whether env variable &lt;code&gt;GOOGLE_APPLICATION_CREDENTIALS&lt;/code&gt; is pointing to the &lt;strong&gt;Service Account JSON credential file&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Setting the Config file&lt;/h3&gt;
&lt;p&gt;Copy &lt;code&gt;config.yaml_example&lt;/code&gt; to &lt;code&gt;config.yaml&lt;/code&gt; and customize it.&lt;/p&gt;
&lt;p&gt;In the bottom of this file you are able to edit the attributes that you want to report on:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;### Attributes to inspect
gcp_attributes:
    compute:
        - firewalls
        - networks
        - snapshots
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Setting the Rules file&lt;/h3&gt;
&lt;p&gt;Inspect &lt;code&gt;rules.yaml&lt;/code&gt; either removing or adding rules that should be searched in the reports.&lt;/p&gt;
&lt;h3&gt;Running Amigo&lt;/h3&gt;
&lt;p&gt;Run amigo with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo amigo
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This retrieves the data from GCP and generate JSON reports. These reports will be save where is &lt;code&gt;reports_dir&lt;/code&gt; in the config file.&lt;/p&gt;
&lt;p&gt;It is advised to watch for STERR and STDOUT in the &lt;code&gt;log_file&lt;/code&gt; file defined in &lt;code&gt;config.yaml&lt;/code&gt; (default to &lt;code&gt;amigo_log.txt&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tail -f amigo_log.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Alerting with Amigo&lt;/h3&gt;
&lt;p&gt;Relevant reports (e.g. diff reports) are generated inside the directory defined as &lt;code&gt;results_dir&lt;/code&gt;, in the file &lt;code&gt;results.log&lt;/code&gt; (e.g. &lt;code&gt;/log/amigo.log&lt;/code&gt;). This is a JSON file that can be fed to ELK.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Creating Custom rules&lt;/h2&gt;
&lt;h3&gt;Firewalls Resource&lt;/h3&gt;
&lt;p&gt;Firewall reports have this format:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{
  &amp;quot;kind&amp;quot;: &amp;quot;compute#firewall&amp;quot;,
  &amp;quot;network&amp;quot;: &amp;quot;https://www.googleapis.com/compute/v1/projects/&amp;lt;name&amp;gt;/global/networks/default&amp;quot;,
  &amp;quot;direction&amp;quot;: &amp;quot;INGRESS&amp;quot;,
  &amp;quot;sourceRanges&amp;quot;: [
    &amp;quot;0.0.0.0/0&amp;quot;
  ],
  &amp;quot;name&amp;quot;: &amp;quot;default-allow-icmp&amp;quot;,
  &amp;quot;priority&amp;quot;: 65534,
  &amp;quot;allowed&amp;quot;: [
    {
      &amp;quot;IPProtocol&amp;quot;: &amp;quot;icmp&amp;quot;
    }
  ],
  &amp;quot;creationTimestamp&amp;quot;: &amp;lt;Time stamp&amp;gt;,
  &amp;quot;id&amp;quot;: &amp;lt;ID&amp;gt;,
  &amp;quot;selfLink&amp;quot;: &amp;quot;https://www.googleapis.com/compute/v1/projects/&amp;lt;name&amp;gt;/global/firewalls/default-allow-icmp&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;Allow ICMP from anywhere&amp;quot;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Networks Resource&lt;/h3&gt;
&lt;p&gt;Snapshot reports have this format:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{
  &amp;quot;kind&amp;quot;: &amp;quot;compute#network&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;Default network for the project&amp;quot;,
  &amp;quot;subnetworks&amp;quot;: [
    &amp;quot;https://www.googleapis.com/compute/v1/projects/&amp;lt;name&amp;gt;/regions/&amp;lt;region&amp;gt;/subnetworks/default&amp;quot;,
  ],
  &amp;quot;autoCreateSubnetworks&amp;quot;: true,
  &amp;quot;routingConfig&amp;quot;: {
    &amp;quot;routingMode&amp;quot;: &amp;quot;REGIONAL&amp;quot;
  },
  &amp;quot;creationTimestamp&amp;quot;: &amp;lt;Time stamp&amp;gt;,
  &amp;quot;id&amp;quot;: &amp;lt;ID&amp;gt;,
  &amp;quot;selfLink&amp;quot;: &amp;quot;https://www.googleapis.com/compute/v1/projects/&amp;lt;name&amp;gt;/global/networks/default&amp;quot;,
  &amp;quot;name&amp;quot;: &amp;quot;default&amp;quot;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Snapshots Resource&lt;/h3&gt;
&lt;p&gt;Snapshot reports have this format:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{
  &amp;quot;status&amp;quot;: &amp;quot;READY&amp;quot;,
  &amp;quot;kind&amp;quot;: &amp;quot;compute#snapshot&amp;quot;,
  &amp;quot;storageBytes&amp;quot;: &amp;lt;number&amp;gt;,
  &amp;quot;name&amp;quot;: &amp;lt;name&amp;gt;,
  &amp;quot;sourceDisk&amp;quot;: &amp;quot;https://www.googleapis.com/compute/v1/projects/&amp;lt;name&amp;gt;/zones/us-central1-c/disks/deployhost&amp;quot;,
  &amp;quot;storageBytesStatus&amp;quot;: &amp;quot;UP_TO_DATE&amp;quot;,
  &amp;quot;labelFingerprint&amp;quot;: &amp;lt;code&amp;gt;,
  &amp;quot;sourceDiskId&amp;quot;: &amp;lt;ID&amp;gt;,
  &amp;quot;diskSizeGb&amp;quot;: &amp;lt;size&amp;gt;,
  &amp;quot;licenses&amp;quot;: [
    &amp;quot;https://www.googleapis.com/compute/v1/projects/centos-cloud/global/licenses/centos-7&amp;quot;
  ],
  &amp;quot;creationTimestamp&amp;quot;: &amp;lt;time stamp&amp;gt;,
  &amp;quot;id&amp;quot;: &amp;lt;ID&amp;gt;,
  &amp;quot;selfLink&amp;quot;: &amp;quot;https://www.googleapis.com/compute/v1/projects/&amp;lt;name&amp;gt;/global/snapshots/snapshot-1-deployhost&amp;quot;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Instance Template Resource&lt;/h3&gt;
&lt;p&gt;Instance Template reports have this format:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{
  &amp;quot;kind&amp;quot;: &amp;quot;compute#instanceTemplate&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;,
  &amp;quot;properties&amp;quot;: {
    &amp;quot;machineType&amp;quot;: &amp;lt;type&amp;gt;,
    &amp;quot;tags&amp;quot;: {
      &amp;quot;items&amp;quot;: [
        &amp;lt;items&amp;gt;
      ]
    },
    &amp;quot;disks&amp;quot;: [
      {
        &amp;quot;deviceName&amp;quot;: &amp;quot;persistent-disk-0&amp;quot;,
        &amp;quot;kind&amp;quot;: &amp;quot;compute#attachedDisk&amp;quot;,
        &amp;quot;initializeParams&amp;quot;: {
          &amp;quot;sourceImage&amp;quot;: &amp;quot;global/images/&amp;lt;name&amp;gt;&amp;quot;,
          &amp;quot;diskType&amp;quot;: &amp;quot;pd-standard&amp;quot;
        },
        &amp;quot;autoDelete&amp;quot;: true,
        &amp;quot;index&amp;quot;: 0,
        &amp;quot;boot&amp;quot;: true,
        &amp;quot;mode&amp;quot;: &amp;quot;READ_WRITE&amp;quot;,
        &amp;quot;interface&amp;quot;: &amp;quot;SCSI&amp;quot;,
        &amp;quot;type&amp;quot;: &amp;quot;PERSISTENT&amp;quot;
      }
    ],
    &amp;quot;scheduling&amp;quot;: {
      &amp;quot;automaticRestart&amp;quot;: true,
      &amp;quot;preemptible&amp;quot;: false,
      &amp;quot;onHostMaintenance&amp;quot;: &amp;quot;MIGRATE&amp;quot;
    },
    &amp;quot;serviceAccounts&amp;quot;: [
      {
        &amp;quot;scopes&amp;quot;: [
          &amp;quot;https://www.googleapis.com/auth/compute.readonly&amp;quot;
        ],
        &amp;quot;email&amp;quot;: &amp;lt;service-account-email&amp;gt;
      }
    ],
    &amp;quot;metadata&amp;quot;: {
      &amp;quot;items&amp;quot;: [
        &amp;lt;metadata&amp;gt;
      &amp;quot;kind&amp;quot;: &amp;quot;compute#metadata&amp;quot;,
    }
  },
  &amp;quot;creationTimestamp&amp;quot;: &amp;quot;2017-11-14T12:24:00.744-08:00&amp;quot;,
  &amp;quot;id&amp;quot;: &amp;lt;ID&amp;gt;
  &amp;quot;selfLink&amp;quot;: &amp;quot;https://www.googleapis.com/compute/v1/projects/&amp;lt;project-name&amp;gt;/global/instanceTemplates/&amp;quot;,
  &amp;quot;name&amp;quot;: &amp;lt;name&amp;gt;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt; Thank you for reading, and let me know what you think!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</content></entry><entry><title>Introducing a GCP Pub/Sub Message Framework</title><link href="http://bt3gl.github.io/introducing-a-gcp-pubsub-message-framework.html" rel="alternate"></link><published>2017-12-16T00:00:00-05:00</published><updated>2017-12-16T00:00:00-05:00</updated><author><name>Marina von Steinkirch</name></author><id>tag:bt3gl.github.io,2017-12-16:/introducing-a-gcp-pubsub-message-framework.html</id><summary type="html">&lt;p&gt;&lt;img alt="cyberpunk" height="300px" src="./cyberpunk/21.jpg" width="400px"&gt;&lt;/p&gt;
&lt;p&gt;Everything in either in GCP or AWS these days and there is so much data from so many sources!&lt;/p&gt;
&lt;p&gt;To try to make sense of all the logs from different sources on &lt;a href="https://cloud.google.com/pubsub/docs/overview"&gt;GCP pub/sub&lt;/a&gt;,  I created this little &lt;a href="https://github.com/bt3gl/GCP-Pub-Sub-Message-Framework"&gt;serverless framework&lt;/a&gt; that uses &lt;a href="https://kafka.apache.org/intro"&gt;Kafka streams&lt;/a&gt; for alerting correlation on &lt;a href="https://kubernetes.io/"&gt;Kubernetes …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="cyberpunk" height="300px" src="./cyberpunk/21.jpg" width="400px"&gt;&lt;/p&gt;
&lt;p&gt;Everything in either in GCP or AWS these days and there is so much data from so many sources!&lt;/p&gt;
&lt;p&gt;To try to make sense of all the logs from different sources on &lt;a href="https://cloud.google.com/pubsub/docs/overview"&gt;GCP pub/sub&lt;/a&gt;,  I created this little &lt;a href="https://github.com/bt3gl/GCP-Pub-Sub-Message-Framework"&gt;serverless framework&lt;/a&gt; that uses &lt;a href="https://kafka.apache.org/intro"&gt;Kafka streams&lt;/a&gt; for alerting correlation on &lt;a href="https://kubernetes.io/"&gt;Kubernetes&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Installing Kubeless&lt;/h2&gt;
&lt;p&gt;Follow &lt;a href="https://github.com/kubeless/kubeless"&gt;this instructions&lt;/a&gt;. Customize Kubeless config file at &lt;code&gt;kubeless-config.yaml&lt;/code&gt; and then run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make kl
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Crating Kubeless topic&lt;/h2&gt;
&lt;p&gt;In Kafka, messages are published into topics. The functions ran by kubeless (consumers) are going to receive these messages by creating the topic:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ kubeless topic create reactor
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Firing Up Containers&lt;/h2&gt;
&lt;p&gt;To run a logstash, elastsearch, zookeeper and kafka (producers) so that it outputs to Kafka's topic for kubeless, run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make pipeline
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Debugging&lt;/h2&gt;
&lt;p&gt;To debug any pods (&lt;code&gt;kubeless&lt;/code&gt; or &lt;code&gt;kafka&lt;/code&gt; or &lt;code&gt;zoo&lt;/code&gt;), grab the name with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make pods
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and then run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ kubectl logs &amp;lt;podname&amp;gt;  --namespace&lt;span class="o"&gt;=&lt;/span&gt;kubeless
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kubeless/kubeless"&gt;Kubeless github repository.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kubernetes.io/docs/tasks/access-kubernetes-api/extend-api-custom-resource-definitions/"&gt;Kubernetes CustomResourceDefiniton.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://serverless.com/framework/docs/providers/kubeless/"&gt;Kubeless serveless documentation.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.beyondthelines.net/computing/kafka-patterns/"&gt;Kafka Concepts and Common Patterns&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Enjoy and let me know what you think! :)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PS: If you want to learn more about GCP, check my resources and labs &lt;a href="https://github.com/bt3gl/GCP_Studies_and_Labs"&gt;here&lt;/a&gt;.&lt;/p&gt;</content></entry><entry><title>18 Tips for Website Performance</title><link href="http://bt3gl.github.io/18-tips-for-website-performance.html" rel="alternate"></link><published>2017-12-12T00:00:00-05:00</published><updated>2017-12-12T00:00:00-05:00</updated><author><name>Marina von Steinkirch</name></author><id>tag:bt3gl.github.io,2017-12-12:/18-tips-for-website-performance.html</id><summary type="html">&lt;p&gt;&lt;img alt="cyberpunk" height="300px" src="./cyberpunk/16.jpg" width="400px"&gt;&lt;/p&gt;
&lt;h2&gt;1. Test your Website’s Speed&lt;/h2&gt;
&lt;p&gt;Use a website speed test tool to analyze the overall speed of your website. For instance, &lt;a href="https://tools.keycdn.com/speed"&gt;KeyCDN’s website speed test tool&lt;/a&gt; or &lt;a href="http://www.webpagetest.org/"&gt;WebPageTest&lt;/a&gt; can useful (and they both support HTTP/2). You could also use a &lt;a href="https://www.ej-technologies.com/products/jprofiler/overview.html"&gt;JavaScript&lt;/a&gt; profiler.&lt;/p&gt;
&lt;h2&gt;2. Load Test Your Site …&lt;/h2&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="cyberpunk" height="300px" src="./cyberpunk/16.jpg" width="400px"&gt;&lt;/p&gt;
&lt;h2&gt;1. Test your Website’s Speed&lt;/h2&gt;
&lt;p&gt;Use a website speed test tool to analyze the overall speed of your website. For instance, &lt;a href="https://tools.keycdn.com/speed"&gt;KeyCDN’s website speed test tool&lt;/a&gt; or &lt;a href="http://www.webpagetest.org/"&gt;WebPageTest&lt;/a&gt; can useful (and they both support HTTP/2). You could also use a &lt;a href="https://www.ej-technologies.com/products/jprofiler/overview.html"&gt;JavaScript&lt;/a&gt; profiler.&lt;/p&gt;
&lt;h2&gt;2. Load Test Your Site&lt;/h2&gt;
&lt;p&gt;Load test your website to check for any bottlenecks. Some cool tools for this task:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.blitz.io/"&gt;Blirz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wondernetwork.com/loadtesting"&gt;Wonder Network&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://loadimpact.com/"&gt;Load Impact&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://loader.io/"&gt;Loader&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;3. Use Performance Tools&lt;/h2&gt;
&lt;p&gt;You can check how fast in seconds you want your site to load, on certain connection speed, with this &lt;a href="http://www.performancebudget.io/"&gt;free Budget Calculator tool&lt;/a&gt;, depending on the number of resources (HTML, images, JS, CSS, fonts, etc).&lt;/p&gt;
&lt;p&gt;Additionally, check &lt;a href="https://developers.google.com/speed/"&gt;Google's performance resources&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;4. Reduce the number of HTTP Requests&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;If your JS code is small enough, you can have it inline.&lt;/li&gt;
&lt;li&gt;Reduce the number of third party plugins and frameworks.&lt;/li&gt;
&lt;li&gt;Have less code.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;5. Clean up your JS and CSS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Remove unnecessary characters (whitespace, new line, comments).&lt;/li&gt;
&lt;li&gt;Some useful tools are &lt;a href="https://www.npmjs.com/package/gulp-uglify"&gt;grunt ugligy&lt;/a&gt; and &lt;a href="https://www.npmjs.com/package/gulp-clean-css"&gt;gulp-clean-css&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;6.  Avoid Redirects&lt;/h2&gt;
&lt;p&gt;301 redirects will damage the performance of your website because they generate additional round trip times (RTT) before the browser even starts to load other assets.&lt;/p&gt;
&lt;h2&gt;7. Image Optimization&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Use compression tools such as &lt;a href="https://github.com/toy/image_optim"&gt;image_optim&lt;/a&gt;, &lt;a href="https://tinypng.com/"&gt;tinypgn&lt;/a&gt;, &lt;a href="https://pngmini.com/"&gt;pngmini&lt;/a&gt;, &lt;a href="https://www.jpegmini.com"&gt;jpegmini&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Use responsive images in HTML with &lt;strong&gt;&lt;em&gt;srcset&lt;/em&gt;&lt;/strong&gt; and sizes attributes to serve different scaled images, based on the size of the display.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;8.  Render Blocking Resources blocking the DOM&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;&lt;em&gt;Document Object Model&lt;/em&gt;&lt;/strong&gt; is a programming interface for HTML and XML documents that provides a structured representation (node tree) of a document, defining ways it can be accessed and manipulated using scripting languages such as Javascript. To ensure that the DOM loads in a responsive time, render blocking resources should get to the client as soon and as quickly as possible.&lt;/p&gt;
&lt;p&gt;Here some tips for DOM resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CSS&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path"&gt;media queries&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Concatenate all CSS files in one.&lt;/li&gt;
&lt;li&gt;Remove extra spaces, characters, comments, etc.&lt;/li&gt;
&lt;li&gt;Check &lt;a href="https://github.com/postcss/autoprefixer"&gt;Autoprefixer &lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;JavaScript&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;&lt;em&gt;async&lt;/em&gt;&lt;/strong&gt; tag allows the script to be downloaded in the background without blocking.&lt;/li&gt;
&lt;li&gt;Move JS scripts to the bottom of the page, right before the &lt;/body&gt; tag.&lt;/li&gt;
&lt;li&gt;Concatenate all JS files in one.&lt;/li&gt;
&lt;li&gt;Remove extra spaces, characters, comments, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;9. Reduce Latency with a CDN.&lt;/h2&gt;
&lt;p&gt;You can test the latency of your website by using sending out ICMP packets to its address (by ping in your terminal or &lt;a href="https://tools.keycdn.com/ping"&gt;UI tools&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Content Delivery Networks are servers that maintain cached copies of the content of a website (images, CSS, JS, fonts), so that they can be retrieved from the closest physical location for reduced latency. Here some nice guides for &lt;a href="https://www.keycdn.com/support/google-cloud-storage-cdn-integration/"&gt;google cloud storage&lt;/a&gt; and &lt;a href="https://www.keycdn.com/support/aws-s3-cdn-integration/"&gt;AWS S3&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;10. Time to first byte (TTFB)&lt;/h2&gt;
&lt;p&gt;TTFB is the measurement of the responsiveness of a web server, as the time that takes for the browser to start receiving information after it has requested it from the server.&lt;/p&gt;
&lt;p&gt;TTFB is calculated as &lt;strong&gt;HTTP request time + Process request time + HTTP response time&lt;/strong&gt;, and can be check at the &lt;a href="https://developers.google.com/web/tools/chrome-devtools/"&gt;Chrome Dev Tools&lt;/a&gt; (the green bar).&lt;/p&gt;
&lt;h2&gt;11. Browser Cache&lt;/h2&gt;
&lt;p&gt;Let the browser cache some data (with a max-age of a week) by using HTTP headers such as &lt;strong&gt;&lt;em&gt;Cache-control&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;Expires&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;12. Prefetching&lt;/h2&gt;
&lt;p&gt;DNS prefetching can be a good solution to resolve domain names before a user follows a link. It's implemented in the &lt;strong&gt;&lt;em&gt;HEADER&lt;/em&gt;&lt;/strong&gt; session with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;link rel=&amp;quot;dns-prefetch&amp;quot; href=&amp;quot;//www.example.com&amp;quot;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;13. Preconnecting&lt;/h2&gt;
&lt;p&gt;With the &lt;strong&gt;&lt;em&gt;preconnect&lt;/em&gt;&lt;/strong&gt; label, the browser can set up early connections (such as DNS lookup, TLS negotiation, etc.) before an HTTP request is sent to the server. This can be implemented with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;link href=&amp;#39;https://CDNHOST.com&amp;#39; rel=&amp;#39;preconnect&amp;#39; crossorigin&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;14. HTTP/2&lt;/h2&gt;
&lt;p&gt;HTTP/2 comes with a huge performance benefit. To enable HTTP/2 one needs a SSL certificate and a server that supports HTTP/2.&lt;/p&gt;
&lt;h2&gt;15. Hotlink Protection&lt;/h2&gt;
&lt;p&gt;Hotlink protection is given by restricting HTTP referrers so that one can prevent others from embedding assets on other websites (protecting site's bandwidth). To use it, one needs to place the code below in a &lt;code&gt;.htaccess&lt;/code&gt; file (Apache):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;RewriteEngine On
RewriteCond %{HTTP_REFERER} !^http://(.+\.)?domain\.com/ [NC]
RewriteCond %{HTTP_REFERER} !^$
RewriteRule .*\.(jpe?g|gif|bmp|png)$ http://i.imgur.com/DONT_DISPLAY.gif [L]
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;16. Enable Gzip Compression&lt;/h2&gt;
&lt;p&gt;Gzip compresses web pages, CSS, and JS code at the server level, before sending them over to the browser, to optimize the website performance. This is enable in the &lt;code&gt;.htaccess&lt;/code&gt; file (Apache) or &lt;code&gt;nginx.conf&lt;/code&gt; (Nginx).&lt;/p&gt;
&lt;h2&gt;17. Optimizing Video&lt;/h2&gt;
&lt;p&gt;Matching the file type to the optimal platform reduces playback issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.mp4&lt;/code&gt; is a good quality video with a small file size and is the recommended format for YouTube and Vimeo.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.mov&lt;/code&gt; is a high quality video with a large file size. This file type doesn't play on windows without the help of VLC.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.wmv&lt;/code&gt; is a good quality video with a large file size. It is also hard to play this format on Mac machines unless you have VLC.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.flv&lt;/code&gt; is a small file size, but need extra steps to bring up the quality. This format doesn’t play natively on most Mac and Windows machines.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are plenty of programs that will reformat videos, rearranging file settings for faster playback, which helps them stream more smoothly across a multitude of devices. For instance &lt;a href="https://handbrake.fr/"&gt;Handbrake&lt;/a&gt;, is a useful open source video transcoder.&lt;/p&gt;
&lt;h2&gt;18. Automate&lt;/h2&gt;
&lt;p&gt;Have a Continuous Delivery pipeline which includes profiling and performance analysis of acceptance and load tests.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Thank you for reading :) &lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</content></entry><entry><title>Introducing OsqueryX</title><link href="http://bt3gl.github.io/introducing-osqueryx.html" rel="alternate"></link><published>2017-07-18T00:00:00-04:00</published><updated>2017-07-18T00:00:00-04:00</updated><author><name>Marina von Steinkirch</name></author><id>tag:bt3gl.github.io,2017-07-18:/introducing-osqueryx.html</id><summary type="html">&lt;p&gt;&lt;img alt="cyberpunk" height="300px" src="./cyberpunk/28.jpg" width="400px"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/bt3gl/osqueryx"&gt;osqueryX&lt;/a&gt; is a set of tools to manage security data collection and alerts from &lt;a href="https://osquery.io/"&gt;osquery&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Installing&lt;/h2&gt;
&lt;p&gt;Clone this repo and bootstrap your environment running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you get a &lt;code&gt;Success!&lt;/code&gt; message and you've finished the docker setup correctly, you should now be able start with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ osqueryx start
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Installation Notes …&lt;/h3&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="cyberpunk" height="300px" src="./cyberpunk/28.jpg" width="400px"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/bt3gl/osqueryx"&gt;osqueryX&lt;/a&gt; is a set of tools to manage security data collection and alerts from &lt;a href="https://osquery.io/"&gt;osquery&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Installing&lt;/h2&gt;
&lt;p&gt;Clone this repo and bootstrap your environment running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you get a &lt;code&gt;Success!&lt;/code&gt; message and you've finished the docker setup correctly, you should now be able start with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ osqueryx start
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Installation Notes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you can't get the script working (file a bug!) or install these manually:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker for Mac&lt;/li&gt;
&lt;li&gt;Foreman&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Two temporary directories will be created under &lt;code&gt;osqueryx/tmp&lt;/code&gt;, in order to help you start creating your first alerts:
        - tmp/elasticsearch - where Elasticsearch stores the index data.
        - tmp/log/osquery - where you can read your development logs for the OSQuery daemon.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The following directories are mounted inside the ElastAlert container once it boots (ElastAlert reads rules and config from them):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;- `/opt/config`: ElastAlert (elastalert_config.yaml) and Supervisord (elastalert_supervisord.conf) configuration files.
- `/opt/rules`: Contains ElastAlert rules.
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Starting&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ osqueryx start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will start two docker containers (Elasticsearch/ElastAlert) in daemonized mode. You can check to see if they're running properly using &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker ps
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After the containers are booted, it will run &lt;code&gt;foreman start&lt;/code&gt; to fire up OSQuery and Filebeat.&lt;/p&gt;
&lt;p&gt;You should then be seeing the output of ElastAlert as it searches the Filebeat index in Elasticsearch.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Creating a new osquery query&lt;/h2&gt;
&lt;h3&gt;Adding adhoc queries&lt;/h3&gt;
&lt;p&gt;OSQuery queries are added/modified in the &lt;code&gt;.conf&lt;/code&gt; files in the &lt;code&gt;packs/&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;New JSON query file should be tested using &lt;code&gt;osqueryi&lt;/code&gt; tool and linted with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ osqueryx lint_queries
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once you've modified the query pack you will have to restart the OSQuery process by hitting &lt;code&gt;CTRL+C&lt;/code&gt; in the terminal where you're running foreman. Once you kill it, run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ osqueryx restart
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Adding malware queries&lt;/h3&gt;
&lt;p&gt;Malware queries (specified in the &lt;code&gt;packs/&amp;lt;OS&amp;gt;/malware.conf&lt;/code&gt; file) are generate from YAML IoC files inside &lt;code&gt;iocs/&amp;lt;OS&amp;gt;/*&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To add a new malware IoC/query/alert:&lt;/p&gt;
&lt;p&gt;Add the IoC data inside the IoC type (e.g. &lt;code&gt;"bundle_id"&lt;/code&gt;, &lt;code&gt;"process_name"&lt;/code&gt;, &lt;code&gt;"launchdaemons"&lt;/code&gt;) and generate the osquery queries with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ osqueryx create_queries
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once you've modified the query pack you will have to restart the OSQuery process by hitting &lt;code&gt;CTRL+C&lt;/code&gt; in the terminal where you're running foreman. Once you kill it, run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ osqueryx restart
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h2&gt;Alerts&lt;/h2&gt;
&lt;p&gt;Alerts are generated using ElastAlert. ElastAlert reads all of the files in &lt;code&gt;rules/&lt;/code&gt; and alerts when a document in the filebeat index matches. The files in &lt;code&gt;rules/&lt;/code&gt; can be manually created or automatically generated.&lt;/p&gt;
&lt;p&gt;You generate a list of alerts automatically with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ osqueryx create_alerts
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you take a peek inside of &lt;code&gt;rules/&lt;/code&gt; you will see a new YAML file for each query.&lt;/p&gt;
&lt;p&gt;Once these files are added to &lt;code&gt;rules/&lt;/code&gt; ElastAlert will pick them up on it's next config reload (every 60s).&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;An Walk Through example&lt;/h2&gt;
&lt;p&gt;For instance, a new OSX indicator of compromise that is identified by a file &lt;code&gt;~/osquery_virus.txt&lt;/code&gt; could be added to &lt;code&gt;iocs/osx/malicious_files.yaml&lt;/code&gt; as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;the_osquery_virus_omg:
  - &amp;#39;/Users/%%/osquery_virus.txt&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, the OSQuery query (inside &lt;code&gt;malicious_files.conf&lt;/code&gt;) and the alerts can be created by running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ osqueryx deploy
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Restart osquery by hitting &lt;code&gt;CTRL+C&lt;/code&gt; and then:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ osqueryx restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;By default, OSQuery will run this query every hour. This can be customized by changing the value of the key &lt;strong&gt;interval&lt;/strong&gt; in the top of the IoC YAML file (below &lt;strong&gt;IoC Query Config&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;You can also add the desired type of ElastAlert alert there (e.g. "alert": "slack").&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Shipping your work&lt;/h2&gt;
&lt;p&gt;Whenever you are ready to push your work, you can bring osqueryx down with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ osqueryx stop
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;More Details on How osqueryx Works&lt;/h2&gt;
&lt;h3&gt;ElastAlert variables in OSQuery&lt;/h3&gt;
&lt;p&gt;In order to generate our alerts automatically, we're storing some custom values inside of some queries. Since OSQuery stores it's config in JSON, we're able to add extra data to the Query objects and OSQuery will just ignore it. We're taking advantage of this and storing extra metadata about the kind of alert we'd like to generate.&lt;/p&gt;
&lt;p&gt;Below is a table of supported attributes &lt;code&gt;osqueryx create_alerts&lt;/code&gt; will add to the output of your alert.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Query Key&lt;/th&gt;
&lt;th align="center"&gt;Type&lt;/th&gt;
&lt;th align="right"&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ElastAlert_rule_type&lt;/td&gt;
&lt;td align="center"&gt;string&lt;/td&gt;
&lt;td align="right"&gt;new_term&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ElastAlert_fields&lt;/td&gt;
&lt;td align="center"&gt;array&lt;/td&gt;
&lt;td align="right"&gt;["cats"]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;Adding alerts&lt;/h3&gt;
&lt;p&gt;In most cases our alerts are generated directly from OSQuery queries, however, there will be some cases that we want to add an alert for some adhoc info that we want to know about.&lt;/p&gt;
&lt;p&gt;Look in &lt;code&gt;examples/&lt;/code&gt; to see what your ElastAlert should look like. Copy it into &lt;code&gt;rules/&lt;/code&gt; and modify to your hearts content. Once you've got it working the way you want to then proceed to following the basic contribution steps for submitting the alert to this repo.&lt;/p&gt;
&lt;h3&gt;Testing alerts&lt;/h3&gt;
&lt;p&gt;Before you commit your change in your PR, you should have tested the entire flow from start to finish for your alert. For example, if you want to add an OSQuery query which would alert you when a certain file existed on a users machine, create this query and alert in the osqueryx environment and then create the file. Once the file is created, OSQuery should write an event to the log file which should trigger ElastAlert.&lt;/p&gt;
&lt;p&gt;By doing this, you should be able to see the alert and determine if it's what you intend. Also through this practice you can determine if this is a noisy alert and could use some tuning.&lt;/p&gt;
&lt;h2&gt;Listing queries and alerts&lt;/h2&gt;
&lt;p&gt;Available queries can be listed with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ osqueryx list_queries
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Available alerts can be listed with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ osqueryx list_alerts
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;OSQuery&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;How does it run?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;OSQuery is booted up using Foreman which is executed when you run &lt;code&gt;osqueryx start&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Where can I read the logs?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;An automatic tail of these logs is started when you execute &lt;code&gt;osqueryx start&lt;/code&gt;. The logs are prefixed with &lt;code&gt;OSQuery_log&lt;/code&gt; in the foreman output. If you'd like to tail these logs separately, they live in &lt;code&gt;tmp/log/osquery&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How can I restart it?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As with any Foreman controlled process, simply CTRL+C in the pane that you're running Foreman in and it will die. Simply run &lt;code&gt;foreman start&lt;/code&gt; or &lt;code&gt;osqueryx start&lt;/code&gt; to start up the processes again.&lt;/p&gt;
&lt;h4&gt;Filebeat&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;How do I interact with it?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Not much interaction should be required for Filebeat, however, if you desire to modify the config and restart the process, you would edit the config at &lt;code&gt;config/filebeat.yml&lt;/code&gt; and then CTRL+C your Foreman and restart with &lt;code&gt;osqueryx start&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How does it run?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Filebeat is booted up using Foreman which is executed when you run &lt;code&gt;osqueryx start&lt;/code&gt;. If you want to run this process separately, look at the &lt;code&gt;osqueryx&lt;/code&gt; command in the &lt;code&gt;Procfile&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Where can I read the logs?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;An automatic tail of these logs is started when you execute &lt;code&gt;osqueryx start&lt;/code&gt;. The logs are prefixed with &lt;code&gt;filebeat_log&lt;/code&gt; in the foreman output. If you'd like to tail these logs separately, they live at &lt;code&gt;tmp/filebeat/logs&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How can I restart it?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As with any Foreman controlled process, simply CTRL+C in the pane that you're running Foreman in and it will die. Simply run &lt;code&gt;foreman start&lt;/code&gt; or &lt;code&gt;osqueryx restart&lt;/code&gt; to start up the processes again.&lt;/p&gt;
&lt;h4&gt;Elasticsearch&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;How do I access it?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Elasticsearch should be running at &lt;a href="http://localhost:9200"&gt;http://localhost:9200&lt;/a&gt; after you run &lt;code&gt;osqueryx start&lt;/code&gt;. From there you can interact with it using &lt;code&gt;curl&lt;/code&gt; and the &lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs.html"&gt;Elasticsearch API&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How does it run?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Elasticsearch is started using Docker and Docker Compose. These commands are executed when you run &lt;code&gt;osqueryx start&lt;/code&gt; which will bring the containers up in the background in a running state. Docker is used to encapsulate Elasticsearch in a Linux environment. This allows us to emulate an environment similar to production easily.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Where can I read the logs?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;An automatic tail of these logs is started when you execute &lt;code&gt;osqueryx start&lt;/code&gt;. The logs are prefixed with &lt;code&gt;elasticsearch_log&lt;/code&gt; in the foreman output. If you'd like to tail these logs separately, you can do so by invoking the docker client on the terminal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker logs -f osqueryx_elasticsearch_1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;How can I restart it?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Elasticsearch is run using Docker Compose. If you'd like to restart your running containers, you can run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ osqueryx restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to issue a full restart of your containers. Keep in mind this will also restart ElastAlert.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How do I know it's running?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can &lt;code&gt;curl localhost:9200&lt;/code&gt; to see if Elasticsearch is listening on port 9200 properly. You should see something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{
  &amp;quot;name&amp;quot; : &amp;quot;Commando&amp;quot;,
  &amp;quot;cluster_name&amp;quot; : &amp;quot;elasticsearch&amp;quot;,
  &amp;quot;cluster_uuid&amp;quot; : &amp;quot;KflM016zREenHcjCrA4dfg&amp;quot;,
  &amp;quot;version&amp;quot; : {
    &amp;quot;number&amp;quot; : &amp;quot;2.4.4&amp;quot;,
    &amp;quot;build_hash&amp;quot; : &amp;quot;fcbb46dfd45562a9cf00c604b30849a6dec6b017&amp;quot;,
    &amp;quot;build_timestamp&amp;quot; : &amp;quot;2017-01-03T11:33:16Z&amp;quot;,
    &amp;quot;build_snapshot&amp;quot; : false,
    &amp;quot;lucene_version&amp;quot; : &amp;quot;5.5.2&amp;quot;
  },
  &amp;quot;tagline&amp;quot; : &amp;quot;You Know, for Search&amp;quot;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can also look at your running containers by executing &lt;code&gt;docker ps | grep elasticsearch&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker ps  &lt;span class="p"&gt;|&lt;/span&gt; grep elasticsearch
7f7e28471dbf        osqueryx_elasticsearch   &lt;span class="s2"&gt;&amp;quot;/elasticsearch_do...&amp;quot;&lt;/span&gt;   &lt;span class="m"&gt;23&lt;/span&gt; hours ago        Up &lt;span class="m"&gt;23&lt;/span&gt; hours         &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:9200-&amp;gt;9200/tcp, &lt;span class="m"&gt;9300&lt;/span&gt;/tcp   osqueryx_elasticsearch_1
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;ElastAlert&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;How do I interact with it?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ElastAlert automatically detects rule changes on the filesystem and will reload rules accordingly. One magic thing we're doing in the osqueryx environment is mounting the ElastAlert &lt;code&gt;rules/&lt;/code&gt; directory in this repo directly to &lt;code&gt;/opt/rules&lt;/code&gt; in the container, which ElastAlert is configured to watch. Once you modify an alert, no restart of the service is required. Wait patiently and watch the logs for ElastAlert to reload your rule files.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How does it run?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ElastAlert is started using Docker and Docker Compose. The commands to bring up the Kibana container are executed when you run &lt;code&gt;osqueryx start&lt;/code&gt;. You can check to see if it's running by executing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker ps &lt;span class="p"&gt;|&lt;/span&gt; grep kibana
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Where can I read the logs?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Foreman is set up to follow the tail of the logs which are generated by the container. If you'd like to tail this in a different window, you can run &lt;code&gt;docker logs -f osqueryx_elastalert_1&lt;/code&gt; in a separate window to read the logs.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How can I restart it?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ElastAlert is run using Docker Compose. If you'd like to restart your running containers, you can run &lt;code&gt;osqueryx restart&lt;/code&gt; to issue a full restart of your containers. Keep in mind this will also restart Elasticsearch.&lt;/p&gt;
&lt;h4&gt;Kibana&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;How do I access it?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Kibana should be running at &lt;a href="http://localhost:5601"&gt;http://localhost:5601&lt;/a&gt; after you run &lt;code&gt;osqueryx start&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How does it run?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Kibana is started using Docker and Docker Compose. The commands to bring up the Kibana container are executed when you run &lt;code&gt;osqueryx start&lt;/code&gt;. You can check to see if it's running by executing &lt;code&gt;docker ps | grep kibana&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Where can I read the logs?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;An automatic tail of these logs is started when you execute &lt;code&gt;osqueryx start&lt;/code&gt;. The logs are prefixed with &lt;code&gt;kibana_log&lt;/code&gt; in the foreman output. If you'd like to tail these logs separately, you can do so by running &lt;code&gt;docker logs -f osqueryx_kibana_1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How can I restart it?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Kibana is run using Docker Compose. If you'd like to restart your running containers, you can run &lt;code&gt;osqueryx restart&lt;/code&gt; to issue a full restart of your containers. Keep in mind this will also restart the other running containers that are defined in the &lt;code&gt;docker-compose.yml&lt;/code&gt; file.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Thank you for reading and let me know what you think!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</content></entry></feed>